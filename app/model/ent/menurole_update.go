// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/menurole"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// MenuRoleUpdate is the builder for updating MenuRole entities.
type MenuRoleUpdate struct {
	config
	hooks      []Hook
	mutation   *MenuRoleMutation
	predicates []predicate.MenuRole
}

// Where adds a new predicate for the builder.
func (mru *MenuRoleUpdate) Where(ps ...predicate.MenuRole) *MenuRoleUpdate {
	mru.predicates = append(mru.predicates, ps...)
	return mru
}

// SetRoleID sets the role_id field.
func (mru *MenuRoleUpdate) SetRoleID(i int) *MenuRoleUpdate {
	mru.mutation.ResetRoleID()
	mru.mutation.SetRoleID(i)
	return mru
}

// AddRoleID adds i to role_id.
func (mru *MenuRoleUpdate) AddRoleID(i int) *MenuRoleUpdate {
	mru.mutation.AddRoleID(i)
	return mru
}

// SetUserID sets the user_id field.
func (mru *MenuRoleUpdate) SetUserID(i int) *MenuRoleUpdate {
	mru.mutation.ResetUserID()
	mru.mutation.SetUserID(i)
	return mru
}

// AddUserID adds i to user_id.
func (mru *MenuRoleUpdate) AddUserID(i int) *MenuRoleUpdate {
	mru.mutation.AddUserID(i)
	return mru
}

// SetMenuID sets the menu_id field.
func (mru *MenuRoleUpdate) SetMenuID(i int) *MenuRoleUpdate {
	mru.mutation.ResetMenuID()
	mru.mutation.SetMenuID(i)
	return mru
}

// AddMenuID adds i to menu_id.
func (mru *MenuRoleUpdate) AddMenuID(i int) *MenuRoleUpdate {
	mru.mutation.AddMenuID(i)
	return mru
}

// SetCreator sets the creator field.
func (mru *MenuRoleUpdate) SetCreator(s string) *MenuRoleUpdate {
	mru.mutation.SetCreator(s)
	return mru
}

// SetCreatedAt sets the created_at field.
func (mru *MenuRoleUpdate) SetCreatedAt(t time.Time) *MenuRoleUpdate {
	mru.mutation.SetCreatedAt(t)
	return mru
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mru *MenuRoleUpdate) SetNillableCreatedAt(t *time.Time) *MenuRoleUpdate {
	if t != nil {
		mru.SetCreatedAt(*t)
	}
	return mru
}

// SetUpdatedAt sets the updated_at field.
func (mru *MenuRoleUpdate) SetUpdatedAt(t time.Time) *MenuRoleUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mru *MenuRoleUpdate) SetNillableUpdatedAt(t *time.Time) *MenuRoleUpdate {
	if t != nil {
		mru.SetUpdatedAt(*t)
	}
	return mru
}

// SetVersion sets the version field.
func (mru *MenuRoleUpdate) SetVersion(i int) *MenuRoleUpdate {
	mru.mutation.ResetVersion()
	mru.mutation.SetVersion(i)
	return mru
}

// SetNillableVersion sets the version field if the given value is not nil.
func (mru *MenuRoleUpdate) SetNillableVersion(i *int) *MenuRoleUpdate {
	if i != nil {
		mru.SetVersion(*i)
	}
	return mru
}

// AddVersion adds i to version.
func (mru *MenuRoleUpdate) AddVersion(i int) *MenuRoleUpdate {
	mru.mutation.AddVersion(i)
	return mru
}

// Mutation returns the MenuRoleMutation object of the builder.
func (mru *MenuRoleUpdate) Mutation() *MenuRoleMutation {
	return mru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mru *MenuRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mru.hooks) == 0 {
		affected, err = mru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mru.mutation = mutation
			affected, err = mru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mru.hooks) - 1; i >= 0; i-- {
			mut = mru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MenuRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MenuRoleUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MenuRoleUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mru *MenuRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menurole.Table,
			Columns: menurole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menurole.FieldID,
			},
		},
	}
	if ps := mru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldRoleID,
		})
	}
	if value, ok := mru.mutation.AddedRoleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldRoleID,
		})
	}
	if value, ok := mru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldUserID,
		})
	}
	if value, ok := mru.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldUserID,
		})
	}
	if value, ok := mru.mutation.MenuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldMenuID,
		})
	}
	if value, ok := mru.mutation.AddedMenuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldMenuID,
		})
	}
	if value, ok := mru.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menurole.FieldCreator,
		})
	}
	if value, ok := mru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menurole.FieldCreatedAt,
		})
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menurole.FieldUpdatedAt,
		})
	}
	if value, ok := mru.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldVersion,
		})
	}
	if value, ok := mru.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menurole.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MenuRoleUpdateOne is the builder for updating a single MenuRole entity.
type MenuRoleUpdateOne struct {
	config
	hooks    []Hook
	mutation *MenuRoleMutation
}

// SetRoleID sets the role_id field.
func (mruo *MenuRoleUpdateOne) SetRoleID(i int) *MenuRoleUpdateOne {
	mruo.mutation.ResetRoleID()
	mruo.mutation.SetRoleID(i)
	return mruo
}

// AddRoleID adds i to role_id.
func (mruo *MenuRoleUpdateOne) AddRoleID(i int) *MenuRoleUpdateOne {
	mruo.mutation.AddRoleID(i)
	return mruo
}

// SetUserID sets the user_id field.
func (mruo *MenuRoleUpdateOne) SetUserID(i int) *MenuRoleUpdateOne {
	mruo.mutation.ResetUserID()
	mruo.mutation.SetUserID(i)
	return mruo
}

// AddUserID adds i to user_id.
func (mruo *MenuRoleUpdateOne) AddUserID(i int) *MenuRoleUpdateOne {
	mruo.mutation.AddUserID(i)
	return mruo
}

// SetMenuID sets the menu_id field.
func (mruo *MenuRoleUpdateOne) SetMenuID(i int) *MenuRoleUpdateOne {
	mruo.mutation.ResetMenuID()
	mruo.mutation.SetMenuID(i)
	return mruo
}

// AddMenuID adds i to menu_id.
func (mruo *MenuRoleUpdateOne) AddMenuID(i int) *MenuRoleUpdateOne {
	mruo.mutation.AddMenuID(i)
	return mruo
}

// SetCreator sets the creator field.
func (mruo *MenuRoleUpdateOne) SetCreator(s string) *MenuRoleUpdateOne {
	mruo.mutation.SetCreator(s)
	return mruo
}

// SetCreatedAt sets the created_at field.
func (mruo *MenuRoleUpdateOne) SetCreatedAt(t time.Time) *MenuRoleUpdateOne {
	mruo.mutation.SetCreatedAt(t)
	return mruo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mruo *MenuRoleUpdateOne) SetNillableCreatedAt(t *time.Time) *MenuRoleUpdateOne {
	if t != nil {
		mruo.SetCreatedAt(*t)
	}
	return mruo
}

// SetUpdatedAt sets the updated_at field.
func (mruo *MenuRoleUpdateOne) SetUpdatedAt(t time.Time) *MenuRoleUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mruo *MenuRoleUpdateOne) SetNillableUpdatedAt(t *time.Time) *MenuRoleUpdateOne {
	if t != nil {
		mruo.SetUpdatedAt(*t)
	}
	return mruo
}

// SetVersion sets the version field.
func (mruo *MenuRoleUpdateOne) SetVersion(i int) *MenuRoleUpdateOne {
	mruo.mutation.ResetVersion()
	mruo.mutation.SetVersion(i)
	return mruo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (mruo *MenuRoleUpdateOne) SetNillableVersion(i *int) *MenuRoleUpdateOne {
	if i != nil {
		mruo.SetVersion(*i)
	}
	return mruo
}

// AddVersion adds i to version.
func (mruo *MenuRoleUpdateOne) AddVersion(i int) *MenuRoleUpdateOne {
	mruo.mutation.AddVersion(i)
	return mruo
}

// Mutation returns the MenuRoleMutation object of the builder.
func (mruo *MenuRoleUpdateOne) Mutation() *MenuRoleMutation {
	return mruo.mutation
}

// Save executes the query and returns the updated entity.
func (mruo *MenuRoleUpdateOne) Save(ctx context.Context) (*MenuRole, error) {
	var (
		err  error
		node *MenuRole
	)
	if len(mruo.hooks) == 0 {
		node, err = mruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mruo.mutation = mutation
			node, err = mruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mruo.hooks) - 1; i >= 0; i-- {
			mut = mruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MenuRoleUpdateOne) SaveX(ctx context.Context) *MenuRole {
	mr, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return mr
}

// Exec executes the query on the entity.
func (mruo *MenuRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MenuRoleUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mruo *MenuRoleUpdateOne) sqlSave(ctx context.Context) (mr *MenuRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menurole.Table,
			Columns: menurole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menurole.FieldID,
			},
		},
	}
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MenuRole.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mruo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldRoleID,
		})
	}
	if value, ok := mruo.mutation.AddedRoleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldRoleID,
		})
	}
	if value, ok := mruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldUserID,
		})
	}
	if value, ok := mruo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldUserID,
		})
	}
	if value, ok := mruo.mutation.MenuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldMenuID,
		})
	}
	if value, ok := mruo.mutation.AddedMenuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldMenuID,
		})
	}
	if value, ok := mruo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menurole.FieldCreator,
		})
	}
	if value, ok := mruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menurole.FieldCreatedAt,
		})
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menurole.FieldUpdatedAt,
		})
	}
	if value, ok := mruo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldVersion,
		})
	}
	if value, ok := mruo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menurole.FieldVersion,
		})
	}
	mr = &MenuRole{config: mruo.config}
	_spec.Assign = mr.assignValues
	_spec.ScanValues = mr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menurole.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mr, nil
}
