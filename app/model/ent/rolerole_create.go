// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/rolerole"
)

// RoleRoleCreate is the builder for creating a RoleRole entity.
type RoleRoleCreate struct {
	config
	mutation *RoleRoleMutation
	hooks    []Hook
}

// SetOwnerID sets the owner_id field.
func (rrc *RoleRoleCreate) SetOwnerID(i int) *RoleRoleCreate {
	rrc.mutation.SetOwnerID(i)
	return rrc
}

// SetChildID sets the child_id field.
func (rrc *RoleRoleCreate) SetChildID(i int) *RoleRoleCreate {
	rrc.mutation.SetChildID(i)
	return rrc
}

// SetCreator sets the creator field.
func (rrc *RoleRoleCreate) SetCreator(s string) *RoleRoleCreate {
	rrc.mutation.SetCreator(s)
	return rrc
}

// SetCreatedAt sets the created_at field.
func (rrc *RoleRoleCreate) SetCreatedAt(t time.Time) *RoleRoleCreate {
	rrc.mutation.SetCreatedAt(t)
	return rrc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (rrc *RoleRoleCreate) SetNillableCreatedAt(t *time.Time) *RoleRoleCreate {
	if t != nil {
		rrc.SetCreatedAt(*t)
	}
	return rrc
}

// SetUpdatedAt sets the updated_at field.
func (rrc *RoleRoleCreate) SetUpdatedAt(t time.Time) *RoleRoleCreate {
	rrc.mutation.SetUpdatedAt(t)
	return rrc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (rrc *RoleRoleCreate) SetNillableUpdatedAt(t *time.Time) *RoleRoleCreate {
	if t != nil {
		rrc.SetUpdatedAt(*t)
	}
	return rrc
}

// SetVersion sets the version field.
func (rrc *RoleRoleCreate) SetVersion(i int) *RoleRoleCreate {
	rrc.mutation.SetVersion(i)
	return rrc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (rrc *RoleRoleCreate) SetNillableVersion(i *int) *RoleRoleCreate {
	if i != nil {
		rrc.SetVersion(*i)
	}
	return rrc
}

// Mutation returns the RoleRoleMutation object of the builder.
func (rrc *RoleRoleCreate) Mutation() *RoleRoleMutation {
	return rrc.mutation
}

// Save creates the RoleRole in the database.
func (rrc *RoleRoleCreate) Save(ctx context.Context) (*RoleRole, error) {
	if _, ok := rrc.mutation.OwnerID(); !ok {
		return nil, &ValidationError{Name: "owner_id", err: errors.New("ent: missing required field \"owner_id\"")}
	}
	if _, ok := rrc.mutation.ChildID(); !ok {
		return nil, &ValidationError{Name: "child_id", err: errors.New("ent: missing required field \"child_id\"")}
	}
	if _, ok := rrc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		v := rolerole.DefaultCreatedAt()
		rrc.mutation.SetCreatedAt(v)
	}
	if _, ok := rrc.mutation.UpdatedAt(); !ok {
		v := rolerole.DefaultUpdatedAt()
		rrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rrc.mutation.Version(); !ok {
		v := rolerole.DefaultVersion
		rrc.mutation.SetVersion(v)
	}
	var (
		err  error
		node *RoleRole
	)
	if len(rrc.hooks) == 0 {
		node, err = rrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rrc.mutation = mutation
			node, err = rrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rrc.hooks) - 1; i >= 0; i-- {
			mut = rrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RoleRoleCreate) SaveX(ctx context.Context) *RoleRole {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rrc *RoleRoleCreate) sqlSave(ctx context.Context) (*RoleRole, error) {
	rr, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	rr.ID = int(id)
	return rr, nil
}

func (rrc *RoleRoleCreate) createSpec() (*RoleRole, *sqlgraph.CreateSpec) {
	var (
		rr    = &RoleRole{config: rrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rolerole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolerole.FieldID,
			},
		}
	)
	if value, ok := rrc.mutation.OwnerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldOwnerID,
		})
		rr.OwnerID = value
	}
	if value, ok := rrc.mutation.ChildID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldChildID,
		})
		rr.ChildID = value
	}
	if value, ok := rrc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolerole.FieldCreator,
		})
		rr.Creator = value
	}
	if value, ok := rrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolerole.FieldCreatedAt,
		})
		rr.CreatedAt = value
	}
	if value, ok := rrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolerole.FieldUpdatedAt,
		})
		rr.UpdatedAt = value
	}
	if value, ok := rrc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldVersion,
		})
		rr.Version = value
	}
	return rr, _spec
}
