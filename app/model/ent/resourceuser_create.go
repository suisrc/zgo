// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/resourceuser"
)

// ResourceUserCreate is the builder for creating a ResourceUser entity.
type ResourceUserCreate struct {
	config
	mutation *ResourceUserMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (ruc *ResourceUserCreate) SetUserID(i int) *ResourceUserCreate {
	ruc.mutation.SetUserID(i)
	return ruc
}

// SetResource sets the resource field.
func (ruc *ResourceUserCreate) SetResource(s string) *ResourceUserCreate {
	ruc.mutation.SetResource(s)
	return ruc
}

// SetCreator sets the creator field.
func (ruc *ResourceUserCreate) SetCreator(s string) *ResourceUserCreate {
	ruc.mutation.SetCreator(s)
	return ruc
}

// SetCreatedAt sets the created_at field.
func (ruc *ResourceUserCreate) SetCreatedAt(t time.Time) *ResourceUserCreate {
	ruc.mutation.SetCreatedAt(t)
	return ruc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ruc *ResourceUserCreate) SetNillableCreatedAt(t *time.Time) *ResourceUserCreate {
	if t != nil {
		ruc.SetCreatedAt(*t)
	}
	return ruc
}

// SetUpdatedAt sets the updated_at field.
func (ruc *ResourceUserCreate) SetUpdatedAt(t time.Time) *ResourceUserCreate {
	ruc.mutation.SetUpdatedAt(t)
	return ruc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ruc *ResourceUserCreate) SetNillableUpdatedAt(t *time.Time) *ResourceUserCreate {
	if t != nil {
		ruc.SetUpdatedAt(*t)
	}
	return ruc
}

// SetVersion sets the version field.
func (ruc *ResourceUserCreate) SetVersion(i int) *ResourceUserCreate {
	ruc.mutation.SetVersion(i)
	return ruc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ruc *ResourceUserCreate) SetNillableVersion(i *int) *ResourceUserCreate {
	if i != nil {
		ruc.SetVersion(*i)
	}
	return ruc
}

// Mutation returns the ResourceUserMutation object of the builder.
func (ruc *ResourceUserCreate) Mutation() *ResourceUserMutation {
	return ruc.mutation
}

// Save creates the ResourceUser in the database.
func (ruc *ResourceUserCreate) Save(ctx context.Context) (*ResourceUser, error) {
	if _, ok := ruc.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := ruc.mutation.Resource(); !ok {
		return nil, &ValidationError{Name: "resource", err: errors.New("ent: missing required field \"resource\"")}
	}
	if _, ok := ruc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		v := resourceuser.DefaultCreatedAt()
		ruc.mutation.SetCreatedAt(v)
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		v := resourceuser.DefaultUpdatedAt()
		ruc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ruc.mutation.Version(); !ok {
		v := resourceuser.DefaultVersion
		ruc.mutation.SetVersion(v)
	}
	var (
		err  error
		node *ResourceUser
	)
	if len(ruc.hooks) == 0 {
		node, err = ruc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruc.mutation = mutation
			node, err = ruc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruc.hooks) - 1; i >= 0; i-- {
			mut = ruc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *ResourceUserCreate) SaveX(ctx context.Context) *ResourceUser {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ruc *ResourceUserCreate) sqlSave(ctx context.Context) (*ResourceUser, error) {
	ru, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ru.ID = int(id)
	return ru, nil
}

func (ruc *ResourceUserCreate) createSpec() (*ResourceUser, *sqlgraph.CreateSpec) {
	var (
		ru    = &ResourceUser{config: ruc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: resourceuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourceuser.FieldID,
			},
		}
	)
	if value, ok := ruc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldUserID,
		})
		ru.UserID = value
	}
	if value, ok := ruc.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourceuser.FieldResource,
		})
		ru.Resource = value
	}
	if value, ok := ruc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourceuser.FieldCreator,
		})
		ru.Creator = value
	}
	if value, ok := ruc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourceuser.FieldCreatedAt,
		})
		ru.CreatedAt = value
	}
	if value, ok := ruc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourceuser.FieldUpdatedAt,
		})
		ru.UpdatedAt = value
	}
	if value, ok := ruc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldVersion,
		})
		ru.Version = value
	}
	return ru, _spec
}
