// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/menuaction"
)

// MenuActionCreate is the builder for creating a MenuAction entity.
type MenuActionCreate struct {
	config
	mutation *MenuActionMutation
	hooks    []Hook
}

// SetMenuID sets the menu_id field.
func (mac *MenuActionCreate) SetMenuID(i int) *MenuActionCreate {
	mac.mutation.SetMenuID(i)
	return mac
}

// SetRoleID sets the role_id field.
func (mac *MenuActionCreate) SetRoleID(i int) *MenuActionCreate {
	mac.mutation.SetRoleID(i)
	return mac
}

// SetCode sets the code field.
func (mac *MenuActionCreate) SetCode(s string) *MenuActionCreate {
	mac.mutation.SetCode(s)
	return mac
}

// SetName sets the name field.
func (mac *MenuActionCreate) SetName(s string) *MenuActionCreate {
	mac.mutation.SetName(s)
	return mac
}

// SetDisable sets the disable field.
func (mac *MenuActionCreate) SetDisable(i int) *MenuActionCreate {
	mac.mutation.SetDisable(i)
	return mac
}

// SetCreator sets the creator field.
func (mac *MenuActionCreate) SetCreator(s string) *MenuActionCreate {
	mac.mutation.SetCreator(s)
	return mac
}

// SetCreatedAt sets the created_at field.
func (mac *MenuActionCreate) SetCreatedAt(t time.Time) *MenuActionCreate {
	mac.mutation.SetCreatedAt(t)
	return mac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mac *MenuActionCreate) SetNillableCreatedAt(t *time.Time) *MenuActionCreate {
	if t != nil {
		mac.SetCreatedAt(*t)
	}
	return mac
}

// SetUpdatedAt sets the updated_at field.
func (mac *MenuActionCreate) SetUpdatedAt(t time.Time) *MenuActionCreate {
	mac.mutation.SetUpdatedAt(t)
	return mac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mac *MenuActionCreate) SetNillableUpdatedAt(t *time.Time) *MenuActionCreate {
	if t != nil {
		mac.SetUpdatedAt(*t)
	}
	return mac
}

// SetVersion sets the version field.
func (mac *MenuActionCreate) SetVersion(i int) *MenuActionCreate {
	mac.mutation.SetVersion(i)
	return mac
}

// SetNillableVersion sets the version field if the given value is not nil.
func (mac *MenuActionCreate) SetNillableVersion(i *int) *MenuActionCreate {
	if i != nil {
		mac.SetVersion(*i)
	}
	return mac
}

// Mutation returns the MenuActionMutation object of the builder.
func (mac *MenuActionCreate) Mutation() *MenuActionMutation {
	return mac.mutation
}

// Save creates the MenuAction in the database.
func (mac *MenuActionCreate) Save(ctx context.Context) (*MenuAction, error) {
	if _, ok := mac.mutation.MenuID(); !ok {
		return nil, &ValidationError{Name: "menu_id", err: errors.New("ent: missing required field \"menu_id\"")}
	}
	if _, ok := mac.mutation.RoleID(); !ok {
		return nil, &ValidationError{Name: "role_id", err: errors.New("ent: missing required field \"role_id\"")}
	}
	if _, ok := mac.mutation.Code(); !ok {
		return nil, &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := mac.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mac.mutation.Disable(); !ok {
		return nil, &ValidationError{Name: "disable", err: errors.New("ent: missing required field \"disable\"")}
	}
	if _, ok := mac.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := mac.mutation.CreatedAt(); !ok {
		v := menuaction.DefaultCreatedAt()
		mac.mutation.SetCreatedAt(v)
	}
	if _, ok := mac.mutation.UpdatedAt(); !ok {
		v := menuaction.DefaultUpdatedAt()
		mac.mutation.SetUpdatedAt(v)
	}
	if _, ok := mac.mutation.Version(); !ok {
		v := menuaction.DefaultVersion
		mac.mutation.SetVersion(v)
	}
	var (
		err  error
		node *MenuAction
	)
	if len(mac.hooks) == 0 {
		node, err = mac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mac.mutation = mutation
			node, err = mac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mac.hooks) - 1; i >= 0; i-- {
			mut = mac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MenuActionCreate) SaveX(ctx context.Context) *MenuAction {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mac *MenuActionCreate) sqlSave(ctx context.Context) (*MenuAction, error) {
	ma, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ma.ID = int(id)
	return ma, nil
}

func (mac *MenuActionCreate) createSpec() (*MenuAction, *sqlgraph.CreateSpec) {
	var (
		ma    = &MenuAction{config: mac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: menuaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menuaction.FieldID,
			},
		}
	)
	if value, ok := mac.mutation.MenuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldMenuID,
		})
		ma.MenuID = value
	}
	if value, ok := mac.mutation.RoleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldRoleID,
		})
		ma.RoleID = value
	}
	if value, ok := mac.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldCode,
		})
		ma.Code = value
	}
	if value, ok := mac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldName,
		})
		ma.Name = value
	}
	if value, ok := mac.mutation.Disable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldDisable,
		})
		ma.Disable = value
	}
	if value, ok := mac.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldCreator,
		})
		ma.Creator = value
	}
	if value, ok := mac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menuaction.FieldCreatedAt,
		})
		ma.CreatedAt = value
	}
	if value, ok := mac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menuaction.FieldUpdatedAt,
		})
		ma.UpdatedAt = value
	}
	if value, ok := mac.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldVersion,
		})
		ma.Version = value
	}
	return ma, _spec
}
