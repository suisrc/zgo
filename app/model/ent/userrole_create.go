// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/userrole"
)

// UserRoleCreate is the builder for creating a UserRole entity.
type UserRoleCreate struct {
	config
	mutation *UserRoleMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (urc *UserRoleCreate) SetUserID(i int) *UserRoleCreate {
	urc.mutation.SetUserID(i)
	return urc
}

// SetRoleID sets the role_id field.
func (urc *UserRoleCreate) SetRoleID(i int) *UserRoleCreate {
	urc.mutation.SetRoleID(i)
	return urc
}

// SetExpired sets the expired field.
func (urc *UserRoleCreate) SetExpired(t time.Time) *UserRoleCreate {
	urc.mutation.SetExpired(t)
	return urc
}

// SetCreator sets the creator field.
func (urc *UserRoleCreate) SetCreator(s string) *UserRoleCreate {
	urc.mutation.SetCreator(s)
	return urc
}

// SetCreatedAt sets the created_at field.
func (urc *UserRoleCreate) SetCreatedAt(t time.Time) *UserRoleCreate {
	urc.mutation.SetCreatedAt(t)
	return urc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (urc *UserRoleCreate) SetNillableCreatedAt(t *time.Time) *UserRoleCreate {
	if t != nil {
		urc.SetCreatedAt(*t)
	}
	return urc
}

// SetUpdatedAt sets the updated_at field.
func (urc *UserRoleCreate) SetUpdatedAt(t time.Time) *UserRoleCreate {
	urc.mutation.SetUpdatedAt(t)
	return urc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (urc *UserRoleCreate) SetNillableUpdatedAt(t *time.Time) *UserRoleCreate {
	if t != nil {
		urc.SetUpdatedAt(*t)
	}
	return urc
}

// SetVersion sets the version field.
func (urc *UserRoleCreate) SetVersion(i int) *UserRoleCreate {
	urc.mutation.SetVersion(i)
	return urc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (urc *UserRoleCreate) SetNillableVersion(i *int) *UserRoleCreate {
	if i != nil {
		urc.SetVersion(*i)
	}
	return urc
}

// Mutation returns the UserRoleMutation object of the builder.
func (urc *UserRoleCreate) Mutation() *UserRoleMutation {
	return urc.mutation
}

// Save creates the UserRole in the database.
func (urc *UserRoleCreate) Save(ctx context.Context) (*UserRole, error) {
	if _, ok := urc.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := urc.mutation.RoleID(); !ok {
		return nil, &ValidationError{Name: "role_id", err: errors.New("ent: missing required field \"role_id\"")}
	}
	if _, ok := urc.mutation.Expired(); !ok {
		return nil, &ValidationError{Name: "expired", err: errors.New("ent: missing required field \"expired\"")}
	}
	if _, ok := urc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := urc.mutation.CreatedAt(); !ok {
		v := userrole.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		v := userrole.DefaultUpdatedAt()
		urc.mutation.SetUpdatedAt(v)
	}
	if _, ok := urc.mutation.Version(); !ok {
		v := userrole.DefaultVersion
		urc.mutation.SetVersion(v)
	}
	var (
		err  error
		node *UserRole
	)
	if len(urc.hooks) == 0 {
		node, err = urc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			urc.mutation = mutation
			node, err = urc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(urc.hooks) - 1; i >= 0; i-- {
			mut = urc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserRoleCreate) SaveX(ctx context.Context) *UserRole {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (urc *UserRoleCreate) sqlSave(ctx context.Context) (*UserRole, error) {
	ur, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ur.ID = int(id)
	return ur, nil
}

func (urc *UserRoleCreate) createSpec() (*UserRole, *sqlgraph.CreateSpec) {
	var (
		ur    = &UserRole{config: urc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userrole.FieldID,
			},
		}
	)
	if value, ok := urc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userrole.FieldUserID,
		})
		ur.UserID = value
	}
	if value, ok := urc.mutation.RoleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userrole.FieldRoleID,
		})
		ur.RoleID = value
	}
	if value, ok := urc.mutation.Expired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userrole.FieldExpired,
		})
		ur.Expired = value
	}
	if value, ok := urc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userrole.FieldCreator,
		})
		ur.Creator = value
	}
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userrole.FieldCreatedAt,
		})
		ur.CreatedAt = value
	}
	if value, ok := urc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userrole.FieldUpdatedAt,
		})
		ur.UpdatedAt = value
	}
	if value, ok := urc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userrole.FieldVersion,
		})
		ur.Version = value
	}
	return ur, _spec
}
