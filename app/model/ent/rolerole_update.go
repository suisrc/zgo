// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/predicate"
	"github.com/suisrc/zgo/app/model/ent/rolerole"
)

// RoleRoleUpdate is the builder for updating RoleRole entities.
type RoleRoleUpdate struct {
	config
	hooks      []Hook
	mutation   *RoleRoleMutation
	predicates []predicate.RoleRole
}

// Where adds a new predicate for the builder.
func (rru *RoleRoleUpdate) Where(ps ...predicate.RoleRole) *RoleRoleUpdate {
	rru.predicates = append(rru.predicates, ps...)
	return rru
}

// SetOwnerID sets the owner_id field.
func (rru *RoleRoleUpdate) SetOwnerID(i int) *RoleRoleUpdate {
	rru.mutation.ResetOwnerID()
	rru.mutation.SetOwnerID(i)
	return rru
}

// AddOwnerID adds i to owner_id.
func (rru *RoleRoleUpdate) AddOwnerID(i int) *RoleRoleUpdate {
	rru.mutation.AddOwnerID(i)
	return rru
}

// SetChildID sets the child_id field.
func (rru *RoleRoleUpdate) SetChildID(i int) *RoleRoleUpdate {
	rru.mutation.ResetChildID()
	rru.mutation.SetChildID(i)
	return rru
}

// AddChildID adds i to child_id.
func (rru *RoleRoleUpdate) AddChildID(i int) *RoleRoleUpdate {
	rru.mutation.AddChildID(i)
	return rru
}

// SetCreator sets the creator field.
func (rru *RoleRoleUpdate) SetCreator(s string) *RoleRoleUpdate {
	rru.mutation.SetCreator(s)
	return rru
}

// SetCreatedAt sets the created_at field.
func (rru *RoleRoleUpdate) SetCreatedAt(t time.Time) *RoleRoleUpdate {
	rru.mutation.SetCreatedAt(t)
	return rru
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (rru *RoleRoleUpdate) SetNillableCreatedAt(t *time.Time) *RoleRoleUpdate {
	if t != nil {
		rru.SetCreatedAt(*t)
	}
	return rru
}

// SetUpdatedAt sets the updated_at field.
func (rru *RoleRoleUpdate) SetUpdatedAt(t time.Time) *RoleRoleUpdate {
	rru.mutation.SetUpdatedAt(t)
	return rru
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (rru *RoleRoleUpdate) SetNillableUpdatedAt(t *time.Time) *RoleRoleUpdate {
	if t != nil {
		rru.SetUpdatedAt(*t)
	}
	return rru
}

// SetVersion sets the version field.
func (rru *RoleRoleUpdate) SetVersion(i int) *RoleRoleUpdate {
	rru.mutation.ResetVersion()
	rru.mutation.SetVersion(i)
	return rru
}

// SetNillableVersion sets the version field if the given value is not nil.
func (rru *RoleRoleUpdate) SetNillableVersion(i *int) *RoleRoleUpdate {
	if i != nil {
		rru.SetVersion(*i)
	}
	return rru
}

// AddVersion adds i to version.
func (rru *RoleRoleUpdate) AddVersion(i int) *RoleRoleUpdate {
	rru.mutation.AddVersion(i)
	return rru
}

// Mutation returns the RoleRoleMutation object of the builder.
func (rru *RoleRoleUpdate) Mutation() *RoleRoleMutation {
	return rru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (rru *RoleRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rru.hooks) == 0 {
		affected, err = rru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rru.mutation = mutation
			affected, err = rru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rru.hooks) - 1; i >= 0; i-- {
			mut = rru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RoleRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RoleRoleUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RoleRoleUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rru *RoleRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolerole.Table,
			Columns: rolerole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolerole.FieldID,
			},
		},
	}
	if ps := rru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldOwnerID,
		})
	}
	if value, ok := rru.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldOwnerID,
		})
	}
	if value, ok := rru.mutation.ChildID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldChildID,
		})
	}
	if value, ok := rru.mutation.AddedChildID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldChildID,
		})
	}
	if value, ok := rru.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolerole.FieldCreator,
		})
	}
	if value, ok := rru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolerole.FieldCreatedAt,
		})
	}
	if value, ok := rru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolerole.FieldUpdatedAt,
		})
	}
	if value, ok := rru.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldVersion,
		})
	}
	if value, ok := rru.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolerole.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoleRoleUpdateOne is the builder for updating a single RoleRole entity.
type RoleRoleUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoleRoleMutation
}

// SetOwnerID sets the owner_id field.
func (rruo *RoleRoleUpdateOne) SetOwnerID(i int) *RoleRoleUpdateOne {
	rruo.mutation.ResetOwnerID()
	rruo.mutation.SetOwnerID(i)
	return rruo
}

// AddOwnerID adds i to owner_id.
func (rruo *RoleRoleUpdateOne) AddOwnerID(i int) *RoleRoleUpdateOne {
	rruo.mutation.AddOwnerID(i)
	return rruo
}

// SetChildID sets the child_id field.
func (rruo *RoleRoleUpdateOne) SetChildID(i int) *RoleRoleUpdateOne {
	rruo.mutation.ResetChildID()
	rruo.mutation.SetChildID(i)
	return rruo
}

// AddChildID adds i to child_id.
func (rruo *RoleRoleUpdateOne) AddChildID(i int) *RoleRoleUpdateOne {
	rruo.mutation.AddChildID(i)
	return rruo
}

// SetCreator sets the creator field.
func (rruo *RoleRoleUpdateOne) SetCreator(s string) *RoleRoleUpdateOne {
	rruo.mutation.SetCreator(s)
	return rruo
}

// SetCreatedAt sets the created_at field.
func (rruo *RoleRoleUpdateOne) SetCreatedAt(t time.Time) *RoleRoleUpdateOne {
	rruo.mutation.SetCreatedAt(t)
	return rruo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (rruo *RoleRoleUpdateOne) SetNillableCreatedAt(t *time.Time) *RoleRoleUpdateOne {
	if t != nil {
		rruo.SetCreatedAt(*t)
	}
	return rruo
}

// SetUpdatedAt sets the updated_at field.
func (rruo *RoleRoleUpdateOne) SetUpdatedAt(t time.Time) *RoleRoleUpdateOne {
	rruo.mutation.SetUpdatedAt(t)
	return rruo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (rruo *RoleRoleUpdateOne) SetNillableUpdatedAt(t *time.Time) *RoleRoleUpdateOne {
	if t != nil {
		rruo.SetUpdatedAt(*t)
	}
	return rruo
}

// SetVersion sets the version field.
func (rruo *RoleRoleUpdateOne) SetVersion(i int) *RoleRoleUpdateOne {
	rruo.mutation.ResetVersion()
	rruo.mutation.SetVersion(i)
	return rruo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (rruo *RoleRoleUpdateOne) SetNillableVersion(i *int) *RoleRoleUpdateOne {
	if i != nil {
		rruo.SetVersion(*i)
	}
	return rruo
}

// AddVersion adds i to version.
func (rruo *RoleRoleUpdateOne) AddVersion(i int) *RoleRoleUpdateOne {
	rruo.mutation.AddVersion(i)
	return rruo
}

// Mutation returns the RoleRoleMutation object of the builder.
func (rruo *RoleRoleUpdateOne) Mutation() *RoleRoleMutation {
	return rruo.mutation
}

// Save executes the query and returns the updated entity.
func (rruo *RoleRoleUpdateOne) Save(ctx context.Context) (*RoleRole, error) {
	var (
		err  error
		node *RoleRole
	)
	if len(rruo.hooks) == 0 {
		node, err = rruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rruo.mutation = mutation
			node, err = rruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rruo.hooks) - 1; i >= 0; i-- {
			mut = rruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RoleRoleUpdateOne) SaveX(ctx context.Context) *RoleRole {
	rr, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return rr
}

// Exec executes the query on the entity.
func (rruo *RoleRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RoleRoleUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rruo *RoleRoleUpdateOne) sqlSave(ctx context.Context) (rr *RoleRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolerole.Table,
			Columns: rolerole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolerole.FieldID,
			},
		},
	}
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RoleRole.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rruo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldOwnerID,
		})
	}
	if value, ok := rruo.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldOwnerID,
		})
	}
	if value, ok := rruo.mutation.ChildID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldChildID,
		})
	}
	if value, ok := rruo.mutation.AddedChildID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldChildID,
		})
	}
	if value, ok := rruo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolerole.FieldCreator,
		})
	}
	if value, ok := rruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolerole.FieldCreatedAt,
		})
	}
	if value, ok := rruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolerole.FieldUpdatedAt,
		})
	}
	if value, ok := rruo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldVersion,
		})
	}
	if value, ok := rruo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rolerole.FieldVersion,
		})
	}
	rr = &RoleRole{config: rruo.config}
	_spec.Assign = rr.assignValues
	_spec.ScanValues = rr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolerole.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return rr, nil
}
