// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/userdetail"
)

// UserDetailCreate is the builder for creating a UserDetail entity.
type UserDetailCreate struct {
	config
	mutation *UserDetailMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (udc *UserDetailCreate) SetUserID(i int) *UserDetailCreate {
	udc.mutation.SetUserID(i)
	return udc
}

// SetNickname sets the nickname field.
func (udc *UserDetailCreate) SetNickname(s string) *UserDetailCreate {
	udc.mutation.SetNickname(s)
	return udc
}

// SetAvatar sets the avatar field.
func (udc *UserDetailCreate) SetAvatar(s string) *UserDetailCreate {
	udc.mutation.SetAvatar(s)
	return udc
}

// SetCreator sets the creator field.
func (udc *UserDetailCreate) SetCreator(s string) *UserDetailCreate {
	udc.mutation.SetCreator(s)
	return udc
}

// SetCreatedAt sets the created_at field.
func (udc *UserDetailCreate) SetCreatedAt(t time.Time) *UserDetailCreate {
	udc.mutation.SetCreatedAt(t)
	return udc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableCreatedAt(t *time.Time) *UserDetailCreate {
	if t != nil {
		udc.SetCreatedAt(*t)
	}
	return udc
}

// SetUpdatedAt sets the updated_at field.
func (udc *UserDetailCreate) SetUpdatedAt(t time.Time) *UserDetailCreate {
	udc.mutation.SetUpdatedAt(t)
	return udc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableUpdatedAt(t *time.Time) *UserDetailCreate {
	if t != nil {
		udc.SetUpdatedAt(*t)
	}
	return udc
}

// SetVersion sets the version field.
func (udc *UserDetailCreate) SetVersion(i int) *UserDetailCreate {
	udc.mutation.SetVersion(i)
	return udc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableVersion(i *int) *UserDetailCreate {
	if i != nil {
		udc.SetVersion(*i)
	}
	return udc
}

// SetString1 sets the string_1 field.
func (udc *UserDetailCreate) SetString1(s string) *UserDetailCreate {
	udc.mutation.SetString1(s)
	return udc
}

// SetString2 sets the string_2 field.
func (udc *UserDetailCreate) SetString2(s string) *UserDetailCreate {
	udc.mutation.SetString2(s)
	return udc
}

// SetString3 sets the string_3 field.
func (udc *UserDetailCreate) SetString3(s string) *UserDetailCreate {
	udc.mutation.SetString3(s)
	return udc
}

// SetNumber1 sets the number_1 field.
func (udc *UserDetailCreate) SetNumber1(i int) *UserDetailCreate {
	udc.mutation.SetNumber1(i)
	return udc
}

// SetNumber2 sets the number_2 field.
func (udc *UserDetailCreate) SetNumber2(i int) *UserDetailCreate {
	udc.mutation.SetNumber2(i)
	return udc
}

// SetNumber3 sets the number_3 field.
func (udc *UserDetailCreate) SetNumber3(i int) *UserDetailCreate {
	udc.mutation.SetNumber3(i)
	return udc
}

// Mutation returns the UserDetailMutation object of the builder.
func (udc *UserDetailCreate) Mutation() *UserDetailMutation {
	return udc.mutation
}

// Save creates the UserDetail in the database.
func (udc *UserDetailCreate) Save(ctx context.Context) (*UserDetail, error) {
	if _, ok := udc.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := udc.mutation.Nickname(); !ok {
		return nil, &ValidationError{Name: "nickname", err: errors.New("ent: missing required field \"nickname\"")}
	}
	if _, ok := udc.mutation.Avatar(); !ok {
		return nil, &ValidationError{Name: "avatar", err: errors.New("ent: missing required field \"avatar\"")}
	}
	if _, ok := udc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := udc.mutation.CreatedAt(); !ok {
		v := userdetail.DefaultCreatedAt()
		udc.mutation.SetCreatedAt(v)
	}
	if _, ok := udc.mutation.UpdatedAt(); !ok {
		v := userdetail.DefaultUpdatedAt()
		udc.mutation.SetUpdatedAt(v)
	}
	if _, ok := udc.mutation.Version(); !ok {
		v := userdetail.DefaultVersion
		udc.mutation.SetVersion(v)
	}
	if _, ok := udc.mutation.String1(); !ok {
		return nil, &ValidationError{Name: "string_1", err: errors.New("ent: missing required field \"string_1\"")}
	}
	if _, ok := udc.mutation.String2(); !ok {
		return nil, &ValidationError{Name: "string_2", err: errors.New("ent: missing required field \"string_2\"")}
	}
	if _, ok := udc.mutation.String3(); !ok {
		return nil, &ValidationError{Name: "string_3", err: errors.New("ent: missing required field \"string_3\"")}
	}
	if _, ok := udc.mutation.Number1(); !ok {
		return nil, &ValidationError{Name: "number_1", err: errors.New("ent: missing required field \"number_1\"")}
	}
	if _, ok := udc.mutation.Number2(); !ok {
		return nil, &ValidationError{Name: "number_2", err: errors.New("ent: missing required field \"number_2\"")}
	}
	if _, ok := udc.mutation.Number3(); !ok {
		return nil, &ValidationError{Name: "number_3", err: errors.New("ent: missing required field \"number_3\"")}
	}
	var (
		err  error
		node *UserDetail
	)
	if len(udc.hooks) == 0 {
		node, err = udc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			udc.mutation = mutation
			node, err = udc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(udc.hooks) - 1; i >= 0; i-- {
			mut = udc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDetailCreate) SaveX(ctx context.Context) *UserDetail {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (udc *UserDetailCreate) sqlSave(ctx context.Context) (*UserDetail, error) {
	ud, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ud.ID = int(id)
	return ud, nil
}

func (udc *UserDetailCreate) createSpec() (*UserDetail, *sqlgraph.CreateSpec) {
	var (
		ud    = &UserDetail{config: udc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdetail.FieldID,
			},
		}
	)
	if value, ok := udc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldUserID,
		})
		ud.UserID = value
	}
	if value, ok := udc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldNickname,
		})
		ud.Nickname = value
	}
	if value, ok := udc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldAvatar,
		})
		ud.Avatar = value
	}
	if value, ok := udc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldCreator,
		})
		ud.Creator = value
	}
	if value, ok := udc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdetail.FieldCreatedAt,
		})
		ud.CreatedAt = value
	}
	if value, ok := udc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdetail.FieldUpdatedAt,
		})
		ud.UpdatedAt = value
	}
	if value, ok := udc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldVersion,
		})
		ud.Version = value
	}
	if value, ok := udc.mutation.String1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString1,
		})
		ud.String1 = value
	}
	if value, ok := udc.mutation.String2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString2,
		})
		ud.String2 = value
	}
	if value, ok := udc.mutation.String3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString3,
		})
		ud.String3 = value
	}
	if value, ok := udc.mutation.Number1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber1,
		})
		ud.Number1 = value
	}
	if value, ok := udc.mutation.Number2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber2,
		})
		ud.Number2 = value
	}
	if value, ok := udc.mutation.Number3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber3,
		})
		ud.Number3 = value
	}
	return ud, _spec
}
