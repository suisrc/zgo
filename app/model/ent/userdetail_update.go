// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/predicate"
	"github.com/suisrc/zgo/app/model/ent/userdetail"
)

// UserDetailUpdate is the builder for updating UserDetail entities.
type UserDetailUpdate struct {
	config
	hooks      []Hook
	mutation   *UserDetailMutation
	predicates []predicate.UserDetail
}

// Where adds a new predicate for the builder.
func (udu *UserDetailUpdate) Where(ps ...predicate.UserDetail) *UserDetailUpdate {
	udu.predicates = append(udu.predicates, ps...)
	return udu
}

// SetUserID sets the user_id field.
func (udu *UserDetailUpdate) SetUserID(i int) *UserDetailUpdate {
	udu.mutation.ResetUserID()
	udu.mutation.SetUserID(i)
	return udu
}

// AddUserID adds i to user_id.
func (udu *UserDetailUpdate) AddUserID(i int) *UserDetailUpdate {
	udu.mutation.AddUserID(i)
	return udu
}

// SetNickname sets the nickname field.
func (udu *UserDetailUpdate) SetNickname(s string) *UserDetailUpdate {
	udu.mutation.SetNickname(s)
	return udu
}

// SetAvatar sets the avatar field.
func (udu *UserDetailUpdate) SetAvatar(s string) *UserDetailUpdate {
	udu.mutation.SetAvatar(s)
	return udu
}

// SetCreator sets the creator field.
func (udu *UserDetailUpdate) SetCreator(s string) *UserDetailUpdate {
	udu.mutation.SetCreator(s)
	return udu
}

// SetCreatedAt sets the created_at field.
func (udu *UserDetailUpdate) SetCreatedAt(t time.Time) *UserDetailUpdate {
	udu.mutation.SetCreatedAt(t)
	return udu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableCreatedAt(t *time.Time) *UserDetailUpdate {
	if t != nil {
		udu.SetCreatedAt(*t)
	}
	return udu
}

// SetUpdatedAt sets the updated_at field.
func (udu *UserDetailUpdate) SetUpdatedAt(t time.Time) *UserDetailUpdate {
	udu.mutation.SetUpdatedAt(t)
	return udu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableUpdatedAt(t *time.Time) *UserDetailUpdate {
	if t != nil {
		udu.SetUpdatedAt(*t)
	}
	return udu
}

// SetVersion sets the version field.
func (udu *UserDetailUpdate) SetVersion(i int) *UserDetailUpdate {
	udu.mutation.ResetVersion()
	udu.mutation.SetVersion(i)
	return udu
}

// SetNillableVersion sets the version field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableVersion(i *int) *UserDetailUpdate {
	if i != nil {
		udu.SetVersion(*i)
	}
	return udu
}

// AddVersion adds i to version.
func (udu *UserDetailUpdate) AddVersion(i int) *UserDetailUpdate {
	udu.mutation.AddVersion(i)
	return udu
}

// SetString1 sets the string_1 field.
func (udu *UserDetailUpdate) SetString1(s string) *UserDetailUpdate {
	udu.mutation.SetString1(s)
	return udu
}

// SetString2 sets the string_2 field.
func (udu *UserDetailUpdate) SetString2(s string) *UserDetailUpdate {
	udu.mutation.SetString2(s)
	return udu
}

// SetString3 sets the string_3 field.
func (udu *UserDetailUpdate) SetString3(s string) *UserDetailUpdate {
	udu.mutation.SetString3(s)
	return udu
}

// SetNumber1 sets the number_1 field.
func (udu *UserDetailUpdate) SetNumber1(i int) *UserDetailUpdate {
	udu.mutation.ResetNumber1()
	udu.mutation.SetNumber1(i)
	return udu
}

// AddNumber1 adds i to number_1.
func (udu *UserDetailUpdate) AddNumber1(i int) *UserDetailUpdate {
	udu.mutation.AddNumber1(i)
	return udu
}

// SetNumber2 sets the number_2 field.
func (udu *UserDetailUpdate) SetNumber2(i int) *UserDetailUpdate {
	udu.mutation.ResetNumber2()
	udu.mutation.SetNumber2(i)
	return udu
}

// AddNumber2 adds i to number_2.
func (udu *UserDetailUpdate) AddNumber2(i int) *UserDetailUpdate {
	udu.mutation.AddNumber2(i)
	return udu
}

// SetNumber3 sets the number_3 field.
func (udu *UserDetailUpdate) SetNumber3(i int) *UserDetailUpdate {
	udu.mutation.ResetNumber3()
	udu.mutation.SetNumber3(i)
	return udu
}

// AddNumber3 adds i to number_3.
func (udu *UserDetailUpdate) AddNumber3(i int) *UserDetailUpdate {
	udu.mutation.AddNumber3(i)
	return udu
}

// Mutation returns the UserDetailMutation object of the builder.
func (udu *UserDetailUpdate) Mutation() *UserDetailMutation {
	return udu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (udu *UserDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(udu.hooks) == 0 {
		affected, err = udu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			udu.mutation = mutation
			affected, err = udu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(udu.hooks) - 1; i >= 0; i-- {
			mut = udu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDetailUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDetailUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udu *UserDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdetail.Table,
			Columns: userdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdetail.FieldID,
			},
		},
	}
	if ps := udu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldUserID,
		})
	}
	if value, ok := udu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldUserID,
		})
	}
	if value, ok := udu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldNickname,
		})
	}
	if value, ok := udu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldAvatar,
		})
	}
	if value, ok := udu.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldCreator,
		})
	}
	if value, ok := udu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdetail.FieldCreatedAt,
		})
	}
	if value, ok := udu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdetail.FieldUpdatedAt,
		})
	}
	if value, ok := udu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldVersion,
		})
	}
	if value, ok := udu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldVersion,
		})
	}
	if value, ok := udu.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString1,
		})
	}
	if value, ok := udu.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString2,
		})
	}
	if value, ok := udu.mutation.String3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString3,
		})
	}
	if value, ok := udu.mutation.Number1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber1,
		})
	}
	if value, ok := udu.mutation.AddedNumber1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber1,
		})
	}
	if value, ok := udu.mutation.Number2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber2,
		})
	}
	if value, ok := udu.mutation.AddedNumber2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber2,
		})
	}
	if value, ok := udu.mutation.Number3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber3,
		})
	}
	if value, ok := udu.mutation.AddedNumber3(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber3,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserDetailUpdateOne is the builder for updating a single UserDetail entity.
type UserDetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserDetailMutation
}

// SetUserID sets the user_id field.
func (uduo *UserDetailUpdateOne) SetUserID(i int) *UserDetailUpdateOne {
	uduo.mutation.ResetUserID()
	uduo.mutation.SetUserID(i)
	return uduo
}

// AddUserID adds i to user_id.
func (uduo *UserDetailUpdateOne) AddUserID(i int) *UserDetailUpdateOne {
	uduo.mutation.AddUserID(i)
	return uduo
}

// SetNickname sets the nickname field.
func (uduo *UserDetailUpdateOne) SetNickname(s string) *UserDetailUpdateOne {
	uduo.mutation.SetNickname(s)
	return uduo
}

// SetAvatar sets the avatar field.
func (uduo *UserDetailUpdateOne) SetAvatar(s string) *UserDetailUpdateOne {
	uduo.mutation.SetAvatar(s)
	return uduo
}

// SetCreator sets the creator field.
func (uduo *UserDetailUpdateOne) SetCreator(s string) *UserDetailUpdateOne {
	uduo.mutation.SetCreator(s)
	return uduo
}

// SetCreatedAt sets the created_at field.
func (uduo *UserDetailUpdateOne) SetCreatedAt(t time.Time) *UserDetailUpdateOne {
	uduo.mutation.SetCreatedAt(t)
	return uduo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *UserDetailUpdateOne {
	if t != nil {
		uduo.SetCreatedAt(*t)
	}
	return uduo
}

// SetUpdatedAt sets the updated_at field.
func (uduo *UserDetailUpdateOne) SetUpdatedAt(t time.Time) *UserDetailUpdateOne {
	uduo.mutation.SetUpdatedAt(t)
	return uduo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserDetailUpdateOne {
	if t != nil {
		uduo.SetUpdatedAt(*t)
	}
	return uduo
}

// SetVersion sets the version field.
func (uduo *UserDetailUpdateOne) SetVersion(i int) *UserDetailUpdateOne {
	uduo.mutation.ResetVersion()
	uduo.mutation.SetVersion(i)
	return uduo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableVersion(i *int) *UserDetailUpdateOne {
	if i != nil {
		uduo.SetVersion(*i)
	}
	return uduo
}

// AddVersion adds i to version.
func (uduo *UserDetailUpdateOne) AddVersion(i int) *UserDetailUpdateOne {
	uduo.mutation.AddVersion(i)
	return uduo
}

// SetString1 sets the string_1 field.
func (uduo *UserDetailUpdateOne) SetString1(s string) *UserDetailUpdateOne {
	uduo.mutation.SetString1(s)
	return uduo
}

// SetString2 sets the string_2 field.
func (uduo *UserDetailUpdateOne) SetString2(s string) *UserDetailUpdateOne {
	uduo.mutation.SetString2(s)
	return uduo
}

// SetString3 sets the string_3 field.
func (uduo *UserDetailUpdateOne) SetString3(s string) *UserDetailUpdateOne {
	uduo.mutation.SetString3(s)
	return uduo
}

// SetNumber1 sets the number_1 field.
func (uduo *UserDetailUpdateOne) SetNumber1(i int) *UserDetailUpdateOne {
	uduo.mutation.ResetNumber1()
	uduo.mutation.SetNumber1(i)
	return uduo
}

// AddNumber1 adds i to number_1.
func (uduo *UserDetailUpdateOne) AddNumber1(i int) *UserDetailUpdateOne {
	uduo.mutation.AddNumber1(i)
	return uduo
}

// SetNumber2 sets the number_2 field.
func (uduo *UserDetailUpdateOne) SetNumber2(i int) *UserDetailUpdateOne {
	uduo.mutation.ResetNumber2()
	uduo.mutation.SetNumber2(i)
	return uduo
}

// AddNumber2 adds i to number_2.
func (uduo *UserDetailUpdateOne) AddNumber2(i int) *UserDetailUpdateOne {
	uduo.mutation.AddNumber2(i)
	return uduo
}

// SetNumber3 sets the number_3 field.
func (uduo *UserDetailUpdateOne) SetNumber3(i int) *UserDetailUpdateOne {
	uduo.mutation.ResetNumber3()
	uduo.mutation.SetNumber3(i)
	return uduo
}

// AddNumber3 adds i to number_3.
func (uduo *UserDetailUpdateOne) AddNumber3(i int) *UserDetailUpdateOne {
	uduo.mutation.AddNumber3(i)
	return uduo
}

// Mutation returns the UserDetailMutation object of the builder.
func (uduo *UserDetailUpdateOne) Mutation() *UserDetailMutation {
	return uduo.mutation
}

// Save executes the query and returns the updated entity.
func (uduo *UserDetailUpdateOne) Save(ctx context.Context) (*UserDetail, error) {
	var (
		err  error
		node *UserDetail
	)
	if len(uduo.hooks) == 0 {
		node, err = uduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uduo.mutation = mutation
			node, err = uduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uduo.hooks) - 1; i >= 0; i-- {
			mut = uduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDetailUpdateOne) SaveX(ctx context.Context) *UserDetail {
	ud, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ud
}

// Exec executes the query on the entity.
func (uduo *UserDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDetailUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uduo *UserDetailUpdateOne) sqlSave(ctx context.Context) (ud *UserDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdetail.Table,
			Columns: userdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdetail.FieldID,
			},
		},
	}
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uduo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldUserID,
		})
	}
	if value, ok := uduo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldUserID,
		})
	}
	if value, ok := uduo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldNickname,
		})
	}
	if value, ok := uduo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldAvatar,
		})
	}
	if value, ok := uduo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldCreator,
		})
	}
	if value, ok := uduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdetail.FieldCreatedAt,
		})
	}
	if value, ok := uduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdetail.FieldUpdatedAt,
		})
	}
	if value, ok := uduo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldVersion,
		})
	}
	if value, ok := uduo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldVersion,
		})
	}
	if value, ok := uduo.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString1,
		})
	}
	if value, ok := uduo.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString2,
		})
	}
	if value, ok := uduo.mutation.String3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldString3,
		})
	}
	if value, ok := uduo.mutation.Number1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber1,
		})
	}
	if value, ok := uduo.mutation.AddedNumber1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber1,
		})
	}
	if value, ok := uduo.mutation.Number2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber2,
		})
	}
	if value, ok := uduo.mutation.AddedNumber2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber2,
		})
	}
	if value, ok := uduo.mutation.Number3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber3,
		})
	}
	if value, ok := uduo.mutation.AddedNumber3(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldNumber3,
		})
	}
	ud = &UserDetail{config: uduo.config}
	_spec.Assign = ud.assignValues
	_spec.ScanValues = ud.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ud, nil
}
