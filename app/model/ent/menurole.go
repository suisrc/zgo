// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/menurole"
)

// MenuRole is the model entity for the MenuRole schema.
type MenuRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// MenuID holds the value of the "menu_id" field.
	MenuID int `json:"menu_id,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuRole) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // role_id
		&sql.NullInt64{},  // user_id
		&sql.NullInt64{},  // menu_id
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuRole fields.
func (mr *MenuRole) assignValues(values ...interface{}) error {
	if m, n := len(values), len(menurole.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	mr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field role_id", values[0])
	} else if value.Valid {
		mr.RoleID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[1])
	} else if value.Valid {
		mr.UserID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field menu_id", values[2])
	} else if value.Valid {
		mr.MenuID = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[3])
	} else if value.Valid {
		mr.Creator = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		mr.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[5])
	} else if value.Valid {
		mr.UpdatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[6])
	} else if value.Valid {
		mr.Version = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this MenuRole.
// Note that, you need to call MenuRole.Unwrap() before calling this method, if this MenuRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MenuRole) Update() *MenuRoleUpdateOne {
	return (&MenuRoleClient{config: mr.config}).UpdateOne(mr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mr *MenuRole) Unwrap() *MenuRole {
	tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuRole is not a transactional entity")
	}
	mr.config.driver = tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MenuRole) String() string {
	var builder strings.Builder
	builder.WriteString("MenuRole(")
	builder.WriteString(fmt.Sprintf("id=%v", mr.ID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.RoleID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.UserID))
	builder.WriteString(", menu_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.MenuID))
	builder.WriteString(", creator=")
	builder.WriteString(mr.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", mr.Version))
	builder.WriteByte(')')
	return builder.String()
}

// MenuRoles is a parsable slice of MenuRole.
type MenuRoles []*MenuRole

func (mr MenuRoles) config(cfg config) {
	for _i := range mr {
		mr[_i].config = cfg
	}
}
