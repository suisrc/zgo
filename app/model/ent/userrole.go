// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/userrole"
)

// UserRole is the model entity for the UserRole schema.
type UserRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// Expired holds the value of the "expired" field.
	Expired time.Time `json:"expired,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserRole) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // user_id
		&sql.NullInt64{},  // role_id
		&sql.NullTime{},   // expired
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserRole fields.
func (ur *UserRole) assignValues(values ...interface{}) error {
	if m, n := len(values), len(userrole.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ur.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[0])
	} else if value.Valid {
		ur.UserID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field role_id", values[1])
	} else if value.Valid {
		ur.RoleID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field expired", values[2])
	} else if value.Valid {
		ur.Expired = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[3])
	} else if value.Valid {
		ur.Creator = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		ur.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[5])
	} else if value.Valid {
		ur.UpdatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[6])
	} else if value.Valid {
		ur.Version = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this UserRole.
// Note that, you need to call UserRole.Unwrap() before calling this method, if this UserRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserRole) Update() *UserRoleUpdateOne {
	return (&UserRoleClient{config: ur.config}).UpdateOne(ur)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ur *UserRole) Unwrap() *UserRole {
	tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserRole is not a transactional entity")
	}
	ur.config.driver = tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserRole) String() string {
	var builder strings.Builder
	builder.WriteString("UserRole(")
	builder.WriteString(fmt.Sprintf("id=%v", ur.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.UserID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.RoleID))
	builder.WriteString(", expired=")
	builder.WriteString(ur.Expired.Format(time.ANSIC))
	builder.WriteString(", creator=")
	builder.WriteString(ur.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(ur.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ur.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", ur.Version))
	builder.WriteByte(')')
	return builder.String()
}

// UserRoles is a parsable slice of UserRole.
type UserRoles []*UserRole

func (ur UserRoles) config(cfg config) {
	for _i := range ur {
		ur[_i].config = cfg
	}
}
