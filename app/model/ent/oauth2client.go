// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/oauth2client"
)

// Oauth2Client is the model entity for the Oauth2Client schema.
type Oauth2Client struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClientKey holds the value of the "client_key" field.
	ClientKey string `json:"client_key,omitempty"`
	// Audience holds the value of the "audience" field.
	Audience string `json:"audience,omitempty"`
	// Issuer holds the value of the "issuer" field.
	Issuer string `json:"issuer,omitempty"`
	// Expired holds the value of the "expired" field.
	Expired int `json:"expired,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType int `json:"token_type,omitempty"`
	// SMethod holds the value of the "s_method" field.
	SMethod string `json:"s_method,omitempty"`
	// SSecret holds the value of the "s_secret" field.
	SSecret string `json:"s_secret,omitempty"`
	// TokenGetter holds the value of the "token_getter" field.
	TokenGetter string `json:"token_getter,omitempty"`
	// SigninURL holds the value of the "signin_url" field.
	SigninURL string `json:"signin_url,omitempty"`
	// SigninForce holds the value of the "signin_force" field.
	SigninForce int `json:"signin_force,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// String1 holds the value of the "string_1" field.
	String1 string `json:"string_1,omitempty"`
	// String2 holds the value of the "string_2" field.
	String2 string `json:"string_2,omitempty"`
	// String3 holds the value of the "string_3" field.
	String3 string `json:"string_3,omitempty"`
	// Number1 holds the value of the "number_1" field.
	Number1 int `json:"number_1,omitempty"`
	// Number2 holds the value of the "number_2" field.
	Number2 int `json:"number_2,omitempty"`
	// Number3 holds the value of the "number_3" field.
	Number3 int `json:"number_3,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oauth2Client) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // client_key
		&sql.NullString{}, // audience
		&sql.NullString{}, // issuer
		&sql.NullInt64{},  // expired
		&sql.NullInt64{},  // token_type
		&sql.NullString{}, // s_method
		&sql.NullString{}, // s_secret
		&sql.NullString{}, // token_getter
		&sql.NullString{}, // signin_url
		&sql.NullInt64{},  // signin_force
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
		&sql.NullString{}, // string_1
		&sql.NullString{}, // string_2
		&sql.NullString{}, // string_3
		&sql.NullInt64{},  // number_1
		&sql.NullInt64{},  // number_2
		&sql.NullInt64{},  // number_3
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oauth2Client fields.
func (o *Oauth2Client) assignValues(values ...interface{}) error {
	if m, n := len(values), len(oauth2client.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field client_key", values[0])
	} else if value.Valid {
		o.ClientKey = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field audience", values[1])
	} else if value.Valid {
		o.Audience = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field issuer", values[2])
	} else if value.Valid {
		o.Issuer = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field expired", values[3])
	} else if value.Valid {
		o.Expired = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field token_type", values[4])
	} else if value.Valid {
		o.TokenType = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field s_method", values[5])
	} else if value.Valid {
		o.SMethod = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field s_secret", values[6])
	} else if value.Valid {
		o.SSecret = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field token_getter", values[7])
	} else if value.Valid {
		o.TokenGetter = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field signin_url", values[8])
	} else if value.Valid {
		o.SigninURL = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field signin_force", values[9])
	} else if value.Valid {
		o.SigninForce = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[10])
	} else if value.Valid {
		o.Creator = value.String
	}
	if value, ok := values[11].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[11])
	} else if value.Valid {
		o.CreatedAt = value.Time
	}
	if value, ok := values[12].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[12])
	} else if value.Valid {
		o.UpdatedAt = value.Time
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[13])
	} else if value.Valid {
		o.Version = int(value.Int64)
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_1", values[14])
	} else if value.Valid {
		o.String1 = value.String
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_2", values[15])
	} else if value.Valid {
		o.String2 = value.String
	}
	if value, ok := values[16].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_3", values[16])
	} else if value.Valid {
		o.String3 = value.String
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_1", values[17])
	} else if value.Valid {
		o.Number1 = int(value.Int64)
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_2", values[18])
	} else if value.Valid {
		o.Number2 = int(value.Int64)
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_3", values[19])
	} else if value.Valid {
		o.Number3 = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Oauth2Client.
// Note that, you need to call Oauth2Client.Unwrap() before calling this method, if this Oauth2Client
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oauth2Client) Update() *Oauth2ClientUpdateOne {
	return (&Oauth2ClientClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Oauth2Client) Unwrap() *Oauth2Client {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oauth2Client is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oauth2Client) String() string {
	var builder strings.Builder
	builder.WriteString("Oauth2Client(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", client_key=")
	builder.WriteString(o.ClientKey)
	builder.WriteString(", audience=")
	builder.WriteString(o.Audience)
	builder.WriteString(", issuer=")
	builder.WriteString(o.Issuer)
	builder.WriteString(", expired=")
	builder.WriteString(fmt.Sprintf("%v", o.Expired))
	builder.WriteString(", token_type=")
	builder.WriteString(fmt.Sprintf("%v", o.TokenType))
	builder.WriteString(", s_method=")
	builder.WriteString(o.SMethod)
	builder.WriteString(", s_secret=")
	builder.WriteString(o.SSecret)
	builder.WriteString(", token_getter=")
	builder.WriteString(o.TokenGetter)
	builder.WriteString(", signin_url=")
	builder.WriteString(o.SigninURL)
	builder.WriteString(", signin_force=")
	builder.WriteString(fmt.Sprintf("%v", o.SigninForce))
	builder.WriteString(", creator=")
	builder.WriteString(o.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", o.Version))
	builder.WriteString(", string_1=")
	builder.WriteString(o.String1)
	builder.WriteString(", string_2=")
	builder.WriteString(o.String2)
	builder.WriteString(", string_3=")
	builder.WriteString(o.String3)
	builder.WriteString(", number_1=")
	builder.WriteString(fmt.Sprintf("%v", o.Number1))
	builder.WriteString(", number_2=")
	builder.WriteString(fmt.Sprintf("%v", o.Number2))
	builder.WriteString(", number_3=")
	builder.WriteString(fmt.Sprintf("%v", o.Number3))
	builder.WriteByte(')')
	return builder.String()
}

// Oauth2Clients is a parsable slice of Oauth2Client.
type Oauth2Clients []*Oauth2Client

func (o Oauth2Clients) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
