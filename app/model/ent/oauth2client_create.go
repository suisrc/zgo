// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/oauth2client"
)

// Oauth2ClientCreate is the builder for creating a Oauth2Client entity.
type Oauth2ClientCreate struct {
	config
	mutation *Oauth2ClientMutation
	hooks    []Hook
}

// SetClientKey sets the client_key field.
func (oc *Oauth2ClientCreate) SetClientKey(s string) *Oauth2ClientCreate {
	oc.mutation.SetClientKey(s)
	return oc
}

// SetAudience sets the audience field.
func (oc *Oauth2ClientCreate) SetAudience(s string) *Oauth2ClientCreate {
	oc.mutation.SetAudience(s)
	return oc
}

// SetIssuer sets the issuer field.
func (oc *Oauth2ClientCreate) SetIssuer(s string) *Oauth2ClientCreate {
	oc.mutation.SetIssuer(s)
	return oc
}

// SetExpired sets the expired field.
func (oc *Oauth2ClientCreate) SetExpired(i int) *Oauth2ClientCreate {
	oc.mutation.SetExpired(i)
	return oc
}

// SetTokenType sets the token_type field.
func (oc *Oauth2ClientCreate) SetTokenType(i int) *Oauth2ClientCreate {
	oc.mutation.SetTokenType(i)
	return oc
}

// SetSMethod sets the s_method field.
func (oc *Oauth2ClientCreate) SetSMethod(s string) *Oauth2ClientCreate {
	oc.mutation.SetSMethod(s)
	return oc
}

// SetSSecret sets the s_secret field.
func (oc *Oauth2ClientCreate) SetSSecret(s string) *Oauth2ClientCreate {
	oc.mutation.SetSSecret(s)
	return oc
}

// SetTokenGetter sets the token_getter field.
func (oc *Oauth2ClientCreate) SetTokenGetter(s string) *Oauth2ClientCreate {
	oc.mutation.SetTokenGetter(s)
	return oc
}

// SetSigninURL sets the signin_url field.
func (oc *Oauth2ClientCreate) SetSigninURL(s string) *Oauth2ClientCreate {
	oc.mutation.SetSigninURL(s)
	return oc
}

// SetSigninForce sets the signin_force field.
func (oc *Oauth2ClientCreate) SetSigninForce(i int) *Oauth2ClientCreate {
	oc.mutation.SetSigninForce(i)
	return oc
}

// SetCreator sets the creator field.
func (oc *Oauth2ClientCreate) SetCreator(s string) *Oauth2ClientCreate {
	oc.mutation.SetCreator(s)
	return oc
}

// SetCreatedAt sets the created_at field.
func (oc *Oauth2ClientCreate) SetCreatedAt(t time.Time) *Oauth2ClientCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (oc *Oauth2ClientCreate) SetNillableCreatedAt(t *time.Time) *Oauth2ClientCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the updated_at field.
func (oc *Oauth2ClientCreate) SetUpdatedAt(t time.Time) *Oauth2ClientCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (oc *Oauth2ClientCreate) SetNillableUpdatedAt(t *time.Time) *Oauth2ClientCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetVersion sets the version field.
func (oc *Oauth2ClientCreate) SetVersion(i int) *Oauth2ClientCreate {
	oc.mutation.SetVersion(i)
	return oc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (oc *Oauth2ClientCreate) SetNillableVersion(i *int) *Oauth2ClientCreate {
	if i != nil {
		oc.SetVersion(*i)
	}
	return oc
}

// SetString1 sets the string_1 field.
func (oc *Oauth2ClientCreate) SetString1(s string) *Oauth2ClientCreate {
	oc.mutation.SetString1(s)
	return oc
}

// SetString2 sets the string_2 field.
func (oc *Oauth2ClientCreate) SetString2(s string) *Oauth2ClientCreate {
	oc.mutation.SetString2(s)
	return oc
}

// SetString3 sets the string_3 field.
func (oc *Oauth2ClientCreate) SetString3(s string) *Oauth2ClientCreate {
	oc.mutation.SetString3(s)
	return oc
}

// SetNumber1 sets the number_1 field.
func (oc *Oauth2ClientCreate) SetNumber1(i int) *Oauth2ClientCreate {
	oc.mutation.SetNumber1(i)
	return oc
}

// SetNumber2 sets the number_2 field.
func (oc *Oauth2ClientCreate) SetNumber2(i int) *Oauth2ClientCreate {
	oc.mutation.SetNumber2(i)
	return oc
}

// SetNumber3 sets the number_3 field.
func (oc *Oauth2ClientCreate) SetNumber3(i int) *Oauth2ClientCreate {
	oc.mutation.SetNumber3(i)
	return oc
}

// Mutation returns the Oauth2ClientMutation object of the builder.
func (oc *Oauth2ClientCreate) Mutation() *Oauth2ClientMutation {
	return oc.mutation
}

// Save creates the Oauth2Client in the database.
func (oc *Oauth2ClientCreate) Save(ctx context.Context) (*Oauth2Client, error) {
	if _, ok := oc.mutation.ClientKey(); !ok {
		return nil, &ValidationError{Name: "client_key", err: errors.New("ent: missing required field \"client_key\"")}
	}
	if _, ok := oc.mutation.Audience(); !ok {
		return nil, &ValidationError{Name: "audience", err: errors.New("ent: missing required field \"audience\"")}
	}
	if _, ok := oc.mutation.Issuer(); !ok {
		return nil, &ValidationError{Name: "issuer", err: errors.New("ent: missing required field \"issuer\"")}
	}
	if _, ok := oc.mutation.Expired(); !ok {
		return nil, &ValidationError{Name: "expired", err: errors.New("ent: missing required field \"expired\"")}
	}
	if _, ok := oc.mutation.TokenType(); !ok {
		return nil, &ValidationError{Name: "token_type", err: errors.New("ent: missing required field \"token_type\"")}
	}
	if _, ok := oc.mutation.SMethod(); !ok {
		return nil, &ValidationError{Name: "s_method", err: errors.New("ent: missing required field \"s_method\"")}
	}
	if _, ok := oc.mutation.SSecret(); !ok {
		return nil, &ValidationError{Name: "s_secret", err: errors.New("ent: missing required field \"s_secret\"")}
	}
	if _, ok := oc.mutation.TokenGetter(); !ok {
		return nil, &ValidationError{Name: "token_getter", err: errors.New("ent: missing required field \"token_getter\"")}
	}
	if _, ok := oc.mutation.SigninURL(); !ok {
		return nil, &ValidationError{Name: "signin_url", err: errors.New("ent: missing required field \"signin_url\"")}
	}
	if _, ok := oc.mutation.SigninForce(); !ok {
		return nil, &ValidationError{Name: "signin_force", err: errors.New("ent: missing required field \"signin_force\"")}
	}
	if _, ok := oc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := oauth2client.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := oauth2client.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Version(); !ok {
		v := oauth2client.DefaultVersion
		oc.mutation.SetVersion(v)
	}
	if _, ok := oc.mutation.String1(); !ok {
		return nil, &ValidationError{Name: "string_1", err: errors.New("ent: missing required field \"string_1\"")}
	}
	if _, ok := oc.mutation.String2(); !ok {
		return nil, &ValidationError{Name: "string_2", err: errors.New("ent: missing required field \"string_2\"")}
	}
	if _, ok := oc.mutation.String3(); !ok {
		return nil, &ValidationError{Name: "string_3", err: errors.New("ent: missing required field \"string_3\"")}
	}
	if _, ok := oc.mutation.Number1(); !ok {
		return nil, &ValidationError{Name: "number_1", err: errors.New("ent: missing required field \"number_1\"")}
	}
	if _, ok := oc.mutation.Number2(); !ok {
		return nil, &ValidationError{Name: "number_2", err: errors.New("ent: missing required field \"number_2\"")}
	}
	if _, ok := oc.mutation.Number3(); !ok {
		return nil, &ValidationError{Name: "number_3", err: errors.New("ent: missing required field \"number_3\"")}
	}
	var (
		err  error
		node *Oauth2Client
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Oauth2ClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *Oauth2ClientCreate) SaveX(ctx context.Context) *Oauth2Client {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *Oauth2ClientCreate) sqlSave(ctx context.Context) (*Oauth2Client, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *Oauth2ClientCreate) createSpec() (*Oauth2Client, *sqlgraph.CreateSpec) {
	var (
		o     = &Oauth2Client{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oauth2client.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth2client.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.ClientKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldClientKey,
		})
		o.ClientKey = value
	}
	if value, ok := oc.mutation.Audience(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldAudience,
		})
		o.Audience = value
	}
	if value, ok := oc.mutation.Issuer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldIssuer,
		})
		o.Issuer = value
	}
	if value, ok := oc.mutation.Expired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldExpired,
		})
		o.Expired = value
	}
	if value, ok := oc.mutation.TokenType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldTokenType,
		})
		o.TokenType = value
	}
	if value, ok := oc.mutation.SMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSMethod,
		})
		o.SMethod = value
	}
	if value, ok := oc.mutation.SSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSSecret,
		})
		o.SSecret = value
	}
	if value, ok := oc.mutation.TokenGetter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldTokenGetter,
		})
		o.TokenGetter = value
	}
	if value, ok := oc.mutation.SigninURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSigninURL,
		})
		o.SigninURL = value
	}
	if value, ok := oc.mutation.SigninForce(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldSigninForce,
		})
		o.SigninForce = value
	}
	if value, ok := oc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldCreator,
		})
		o.Creator = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2client.FieldCreatedAt,
		})
		o.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2client.FieldUpdatedAt,
		})
		o.UpdatedAt = value
	}
	if value, ok := oc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldVersion,
		})
		o.Version = value
	}
	if value, ok := oc.mutation.String1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString1,
		})
		o.String1 = value
	}
	if value, ok := oc.mutation.String2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString2,
		})
		o.String2 = value
	}
	if value, ok := oc.mutation.String3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString3,
		})
		o.String3 = value
	}
	if value, ok := oc.mutation.Number1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber1,
		})
		o.Number1 = value
	}
	if value, ok := oc.mutation.Number2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber2,
		})
		o.Number2 = value
	}
	if value, ok := oc.mutation.Number3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber3,
		})
		o.Number3 = value
	}
	return o, _spec
}
