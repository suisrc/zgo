// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/oauth2token"
)

// Oauth2Token is the model entity for the Oauth2Token schema.
type Oauth2Token struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Oauth2ID holds the value of the "oauth2_id" field.
	Oauth2ID string `json:"oauth2_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// ExpiresIn holds the value of the "expires_in" field.
	ExpiresIn string `json:"expires_in,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime string `json:"create_time,omitempty"`
	// SyncLock holds the value of the "sync_lock" field.
	SyncLock int `json:"sync_lock,omitempty"`
	// CallCount holds the value of the "call_count" field.
	CallCount int `json:"call_count,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// String1 holds the value of the "string_1" field.
	String1 string `json:"string_1,omitempty"`
	// String2 holds the value of the "string_2" field.
	String2 string `json:"string_2,omitempty"`
	// String3 holds the value of the "string_3" field.
	String3 string `json:"string_3,omitempty"`
	// Number1 holds the value of the "number_1" field.
	Number1 int `json:"number_1,omitempty"`
	// Number2 holds the value of the "number_2" field.
	Number2 int `json:"number_2,omitempty"`
	// Number3 holds the value of the "number_3" field.
	Number3 int `json:"number_3,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oauth2Token) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // oauth2_id
		&sql.NullString{}, // access_token
		&sql.NullString{}, // expires_in
		&sql.NullString{}, // create_time
		&sql.NullInt64{},  // sync_lock
		&sql.NullInt64{},  // call_count
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
		&sql.NullString{}, // string_1
		&sql.NullString{}, // string_2
		&sql.NullString{}, // string_3
		&sql.NullInt64{},  // number_1
		&sql.NullInt64{},  // number_2
		&sql.NullInt64{},  // number_3
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oauth2Token fields.
func (o *Oauth2Token) assignValues(values ...interface{}) error {
	if m, n := len(values), len(oauth2token.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field oauth2_id", values[0])
	} else if value.Valid {
		o.Oauth2ID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field access_token", values[1])
	} else if value.Valid {
		o.AccessToken = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field expires_in", values[2])
	} else if value.Valid {
		o.ExpiresIn = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[3])
	} else if value.Valid {
		o.CreateTime = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sync_lock", values[4])
	} else if value.Valid {
		o.SyncLock = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field call_count", values[5])
	} else if value.Valid {
		o.CallCount = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[6])
	} else if value.Valid {
		o.Creator = value.String
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[7])
	} else if value.Valid {
		o.CreatedAt = value.Time
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[8])
	} else if value.Valid {
		o.UpdatedAt = value.Time
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[9])
	} else if value.Valid {
		o.Version = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_1", values[10])
	} else if value.Valid {
		o.String1 = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_2", values[11])
	} else if value.Valid {
		o.String2 = value.String
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_3", values[12])
	} else if value.Valid {
		o.String3 = value.String
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_1", values[13])
	} else if value.Valid {
		o.Number1 = int(value.Int64)
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_2", values[14])
	} else if value.Valid {
		o.Number2 = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_3", values[15])
	} else if value.Valid {
		o.Number3 = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Oauth2Token.
// Note that, you need to call Oauth2Token.Unwrap() before calling this method, if this Oauth2Token
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oauth2Token) Update() *Oauth2TokenUpdateOne {
	return (&Oauth2TokenClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Oauth2Token) Unwrap() *Oauth2Token {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oauth2Token is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oauth2Token) String() string {
	var builder strings.Builder
	builder.WriteString("Oauth2Token(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", oauth2_id=")
	builder.WriteString(o.Oauth2ID)
	builder.WriteString(", access_token=")
	builder.WriteString(o.AccessToken)
	builder.WriteString(", expires_in=")
	builder.WriteString(o.ExpiresIn)
	builder.WriteString(", create_time=")
	builder.WriteString(o.CreateTime)
	builder.WriteString(", sync_lock=")
	builder.WriteString(fmt.Sprintf("%v", o.SyncLock))
	builder.WriteString(", call_count=")
	builder.WriteString(fmt.Sprintf("%v", o.CallCount))
	builder.WriteString(", creator=")
	builder.WriteString(o.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", o.Version))
	builder.WriteString(", string_1=")
	builder.WriteString(o.String1)
	builder.WriteString(", string_2=")
	builder.WriteString(o.String2)
	builder.WriteString(", string_3=")
	builder.WriteString(o.String3)
	builder.WriteString(", number_1=")
	builder.WriteString(fmt.Sprintf("%v", o.Number1))
	builder.WriteString(", number_2=")
	builder.WriteString(fmt.Sprintf("%v", o.Number2))
	builder.WriteString(", number_3=")
	builder.WriteString(fmt.Sprintf("%v", o.Number3))
	builder.WriteByte(')')
	return builder.String()
}

// Oauth2Tokens is a parsable slice of Oauth2Token.
type Oauth2Tokens []*Oauth2Token

func (o Oauth2Tokens) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
