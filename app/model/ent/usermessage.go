// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/usermessage"
)

// UserMessage is the model entity for the UserMessage schema.
type UserMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime string `json:"datetime,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Read holds the value of the "read" field.
	Read int `json:"read,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ClickClose holds the value of the "clickClose" field.
	ClickClose int `json:"clickClose,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMessage) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // uid
		&sql.NullString{}, // avatar
		&sql.NullString{}, // title
		&sql.NullString{}, // datetime
		&sql.NullString{}, // type
		&sql.NullInt64{},  // read
		&sql.NullString{}, // description
		&sql.NullInt64{},  // clickClose
		&sql.NullInt64{},  // status
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMessage fields.
func (um *UserMessage) assignValues(values ...interface{}) error {
	if m, n := len(values), len(usermessage.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	um.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field uid", values[0])
	} else if value.Valid {
		um.UID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field avatar", values[1])
	} else if value.Valid {
		um.Avatar = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[2])
	} else if value.Valid {
		um.Title = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field datetime", values[3])
	} else if value.Valid {
		um.Datetime = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[4])
	} else if value.Valid {
		um.Type = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field read", values[5])
	} else if value.Valid {
		um.Read = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[6])
	} else if value.Valid {
		um.Description = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field clickClose", values[7])
	} else if value.Valid {
		um.ClickClose = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[8])
	} else if value.Valid {
		um.Status = int(value.Int64)
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[9])
	} else if value.Valid {
		um.Creator = value.String
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[10])
	} else if value.Valid {
		um.CreatedAt = value.Time
	}
	if value, ok := values[11].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[11])
	} else if value.Valid {
		um.UpdatedAt = value.Time
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[12])
	} else if value.Valid {
		um.Version = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this UserMessage.
// Note that, you need to call UserMessage.Unwrap() before calling this method, if this UserMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMessage) Update() *UserMessageUpdateOne {
	return (&UserMessageClient{config: um.config}).UpdateOne(um)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (um *UserMessage) Unwrap() *UserMessage {
	tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMessage is not a transactional entity")
	}
	um.config.driver = tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMessage) String() string {
	var builder strings.Builder
	builder.WriteString("UserMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", um.ID))
	builder.WriteString(", uid=")
	builder.WriteString(um.UID)
	builder.WriteString(", avatar=")
	builder.WriteString(um.Avatar)
	builder.WriteString(", title=")
	builder.WriteString(um.Title)
	builder.WriteString(", datetime=")
	builder.WriteString(um.Datetime)
	builder.WriteString(", type=")
	builder.WriteString(um.Type)
	builder.WriteString(", read=")
	builder.WriteString(fmt.Sprintf("%v", um.Read))
	builder.WriteString(", description=")
	builder.WriteString(um.Description)
	builder.WriteString(", clickClose=")
	builder.WriteString(fmt.Sprintf("%v", um.ClickClose))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", um.Status))
	builder.WriteString(", creator=")
	builder.WriteString(um.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(um.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(um.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", um.Version))
	builder.WriteByte(')')
	return builder.String()
}

// UserMessages is a parsable slice of UserMessage.
type UserMessages []*UserMessage

func (um UserMessages) config(cfg config) {
	for _i := range um {
		um[_i].config = cfg
	}
}
