// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/oauth2token"
)

// Oauth2TokenCreate is the builder for creating a Oauth2Token entity.
type Oauth2TokenCreate struct {
	config
	mutation *Oauth2TokenMutation
	hooks    []Hook
}

// SetOauth2ID sets the oauth2_id field.
func (oc *Oauth2TokenCreate) SetOauth2ID(s string) *Oauth2TokenCreate {
	oc.mutation.SetOauth2ID(s)
	return oc
}

// SetAccessToken sets the access_token field.
func (oc *Oauth2TokenCreate) SetAccessToken(s string) *Oauth2TokenCreate {
	oc.mutation.SetAccessToken(s)
	return oc
}

// SetExpiresIn sets the expires_in field.
func (oc *Oauth2TokenCreate) SetExpiresIn(s string) *Oauth2TokenCreate {
	oc.mutation.SetExpiresIn(s)
	return oc
}

// SetCreateTime sets the create_time field.
func (oc *Oauth2TokenCreate) SetCreateTime(s string) *Oauth2TokenCreate {
	oc.mutation.SetCreateTime(s)
	return oc
}

// SetSyncLock sets the sync_lock field.
func (oc *Oauth2TokenCreate) SetSyncLock(i int) *Oauth2TokenCreate {
	oc.mutation.SetSyncLock(i)
	return oc
}

// SetCallCount sets the call_count field.
func (oc *Oauth2TokenCreate) SetCallCount(i int) *Oauth2TokenCreate {
	oc.mutation.SetCallCount(i)
	return oc
}

// SetCreator sets the creator field.
func (oc *Oauth2TokenCreate) SetCreator(s string) *Oauth2TokenCreate {
	oc.mutation.SetCreator(s)
	return oc
}

// SetCreatedAt sets the created_at field.
func (oc *Oauth2TokenCreate) SetCreatedAt(t time.Time) *Oauth2TokenCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableCreatedAt(t *time.Time) *Oauth2TokenCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the updated_at field.
func (oc *Oauth2TokenCreate) SetUpdatedAt(t time.Time) *Oauth2TokenCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableUpdatedAt(t *time.Time) *Oauth2TokenCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetVersion sets the version field.
func (oc *Oauth2TokenCreate) SetVersion(i int) *Oauth2TokenCreate {
	oc.mutation.SetVersion(i)
	return oc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableVersion(i *int) *Oauth2TokenCreate {
	if i != nil {
		oc.SetVersion(*i)
	}
	return oc
}

// SetString1 sets the string_1 field.
func (oc *Oauth2TokenCreate) SetString1(s string) *Oauth2TokenCreate {
	oc.mutation.SetString1(s)
	return oc
}

// SetString2 sets the string_2 field.
func (oc *Oauth2TokenCreate) SetString2(s string) *Oauth2TokenCreate {
	oc.mutation.SetString2(s)
	return oc
}

// SetString3 sets the string_3 field.
func (oc *Oauth2TokenCreate) SetString3(s string) *Oauth2TokenCreate {
	oc.mutation.SetString3(s)
	return oc
}

// SetNumber1 sets the number_1 field.
func (oc *Oauth2TokenCreate) SetNumber1(i int) *Oauth2TokenCreate {
	oc.mutation.SetNumber1(i)
	return oc
}

// SetNumber2 sets the number_2 field.
func (oc *Oauth2TokenCreate) SetNumber2(i int) *Oauth2TokenCreate {
	oc.mutation.SetNumber2(i)
	return oc
}

// SetNumber3 sets the number_3 field.
func (oc *Oauth2TokenCreate) SetNumber3(i int) *Oauth2TokenCreate {
	oc.mutation.SetNumber3(i)
	return oc
}

// Mutation returns the Oauth2TokenMutation object of the builder.
func (oc *Oauth2TokenCreate) Mutation() *Oauth2TokenMutation {
	return oc.mutation
}

// Save creates the Oauth2Token in the database.
func (oc *Oauth2TokenCreate) Save(ctx context.Context) (*Oauth2Token, error) {
	if _, ok := oc.mutation.Oauth2ID(); !ok {
		return nil, &ValidationError{Name: "oauth2_id", err: errors.New("ent: missing required field \"oauth2_id\"")}
	}
	if _, ok := oc.mutation.AccessToken(); !ok {
		return nil, &ValidationError{Name: "access_token", err: errors.New("ent: missing required field \"access_token\"")}
	}
	if _, ok := oc.mutation.ExpiresIn(); !ok {
		return nil, &ValidationError{Name: "expires_in", err: errors.New("ent: missing required field \"expires_in\"")}
	}
	if _, ok := oc.mutation.CreateTime(); !ok {
		return nil, &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := oc.mutation.SyncLock(); !ok {
		return nil, &ValidationError{Name: "sync_lock", err: errors.New("ent: missing required field \"sync_lock\"")}
	}
	if _, ok := oc.mutation.CallCount(); !ok {
		return nil, &ValidationError{Name: "call_count", err: errors.New("ent: missing required field \"call_count\"")}
	}
	if _, ok := oc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := oauth2token.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := oauth2token.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Version(); !ok {
		v := oauth2token.DefaultVersion
		oc.mutation.SetVersion(v)
	}
	if _, ok := oc.mutation.String1(); !ok {
		return nil, &ValidationError{Name: "string_1", err: errors.New("ent: missing required field \"string_1\"")}
	}
	if _, ok := oc.mutation.String2(); !ok {
		return nil, &ValidationError{Name: "string_2", err: errors.New("ent: missing required field \"string_2\"")}
	}
	if _, ok := oc.mutation.String3(); !ok {
		return nil, &ValidationError{Name: "string_3", err: errors.New("ent: missing required field \"string_3\"")}
	}
	if _, ok := oc.mutation.Number1(); !ok {
		return nil, &ValidationError{Name: "number_1", err: errors.New("ent: missing required field \"number_1\"")}
	}
	if _, ok := oc.mutation.Number2(); !ok {
		return nil, &ValidationError{Name: "number_2", err: errors.New("ent: missing required field \"number_2\"")}
	}
	if _, ok := oc.mutation.Number3(); !ok {
		return nil, &ValidationError{Name: "number_3", err: errors.New("ent: missing required field \"number_3\"")}
	}
	var (
		err  error
		node *Oauth2Token
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Oauth2TokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *Oauth2TokenCreate) SaveX(ctx context.Context) *Oauth2Token {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *Oauth2TokenCreate) sqlSave(ctx context.Context) (*Oauth2Token, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *Oauth2TokenCreate) createSpec() (*Oauth2Token, *sqlgraph.CreateSpec) {
	var (
		o     = &Oauth2Token{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oauth2token.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth2token.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Oauth2ID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldOauth2ID,
		})
		o.Oauth2ID = value
	}
	if value, ok := oc.mutation.AccessToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldAccessToken,
		})
		o.AccessToken = value
	}
	if value, ok := oc.mutation.ExpiresIn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldExpiresIn,
		})
		o.ExpiresIn = value
	}
	if value, ok := oc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldCreateTime,
		})
		o.CreateTime = value
	}
	if value, ok := oc.mutation.SyncLock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldSyncLock,
		})
		o.SyncLock = value
	}
	if value, ok := oc.mutation.CallCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldCallCount,
		})
		o.CallCount = value
	}
	if value, ok := oc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldCreator,
		})
		o.Creator = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2token.FieldCreatedAt,
		})
		o.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2token.FieldUpdatedAt,
		})
		o.UpdatedAt = value
	}
	if value, ok := oc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldVersion,
		})
		o.Version = value
	}
	if value, ok := oc.mutation.String1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString1,
		})
		o.String1 = value
	}
	if value, ok := oc.mutation.String2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString2,
		})
		o.String2 = value
	}
	if value, ok := oc.mutation.String3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString3,
		})
		o.String3 = value
	}
	if value, ok := oc.mutation.Number1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber1,
		})
		o.Number1 = value
	}
	if value, ok := oc.mutation.Number2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber2,
		})
		o.Number2 = value
	}
	if value, ok := oc.mutation.Number3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber3,
		})
		o.Number3 = value
	}
	return o, _spec
}
