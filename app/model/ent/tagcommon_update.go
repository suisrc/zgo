// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/predicate"
	"github.com/suisrc/zgo/app/model/ent/tagcommon"
)

// TagCommonUpdate is the builder for updating TagCommon entities.
type TagCommonUpdate struct {
	config
	hooks      []Hook
	mutation   *TagCommonMutation
	predicates []predicate.TagCommon
}

// Where adds a new predicate for the builder.
func (tcu *TagCommonUpdate) Where(ps ...predicate.TagCommon) *TagCommonUpdate {
	tcu.predicates = append(tcu.predicates, ps...)
	return tcu
}

// SetOwnerID sets the owner_id field.
func (tcu *TagCommonUpdate) SetOwnerID(i int) *TagCommonUpdate {
	tcu.mutation.ResetOwnerID()
	tcu.mutation.SetOwnerID(i)
	return tcu
}

// AddOwnerID adds i to owner_id.
func (tcu *TagCommonUpdate) AddOwnerID(i int) *TagCommonUpdate {
	tcu.mutation.AddOwnerID(i)
	return tcu
}

// SetType sets the type field.
func (tcu *TagCommonUpdate) SetType(i int) *TagCommonUpdate {
	tcu.mutation.ResetType()
	tcu.mutation.SetType(i)
	return tcu
}

// AddType adds i to type.
func (tcu *TagCommonUpdate) AddType(i int) *TagCommonUpdate {
	tcu.mutation.AddType(i)
	return tcu
}

// SetCreator sets the creator field.
func (tcu *TagCommonUpdate) SetCreator(s string) *TagCommonUpdate {
	tcu.mutation.SetCreator(s)
	return tcu
}

// SetCreatedAt sets the created_at field.
func (tcu *TagCommonUpdate) SetCreatedAt(t time.Time) *TagCommonUpdate {
	tcu.mutation.SetCreatedAt(t)
	return tcu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tcu *TagCommonUpdate) SetNillableCreatedAt(t *time.Time) *TagCommonUpdate {
	if t != nil {
		tcu.SetCreatedAt(*t)
	}
	return tcu
}

// SetUpdatedAt sets the updated_at field.
func (tcu *TagCommonUpdate) SetUpdatedAt(t time.Time) *TagCommonUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tcu *TagCommonUpdate) SetNillableUpdatedAt(t *time.Time) *TagCommonUpdate {
	if t != nil {
		tcu.SetUpdatedAt(*t)
	}
	return tcu
}

// SetVersion sets the version field.
func (tcu *TagCommonUpdate) SetVersion(i int) *TagCommonUpdate {
	tcu.mutation.ResetVersion()
	tcu.mutation.SetVersion(i)
	return tcu
}

// SetNillableVersion sets the version field if the given value is not nil.
func (tcu *TagCommonUpdate) SetNillableVersion(i *int) *TagCommonUpdate {
	if i != nil {
		tcu.SetVersion(*i)
	}
	return tcu
}

// AddVersion adds i to version.
func (tcu *TagCommonUpdate) AddVersion(i int) *TagCommonUpdate {
	tcu.mutation.AddVersion(i)
	return tcu
}

// Mutation returns the TagCommonMutation object of the builder.
func (tcu *TagCommonUpdate) Mutation() *TagCommonMutation {
	return tcu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tcu *TagCommonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tcu.hooks) == 0 {
		affected, err = tcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagCommonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcu.mutation = mutation
			affected, err = tcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tcu.hooks) - 1; i >= 0; i-- {
			mut = tcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TagCommonUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TagCommonUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TagCommonUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcu *TagCommonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tagcommon.Table,
			Columns: tagcommon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tagcommon.FieldID,
			},
		},
	}
	if ps := tcu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldOwnerID,
		})
	}
	if value, ok := tcu.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldOwnerID,
		})
	}
	if value, ok := tcu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldType,
		})
	}
	if value, ok := tcu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldType,
		})
	}
	if value, ok := tcu.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tagcommon.FieldCreator,
		})
	}
	if value, ok := tcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tagcommon.FieldCreatedAt,
		})
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tagcommon.FieldUpdatedAt,
		})
	}
	if value, ok := tcu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldVersion,
		})
	}
	if value, ok := tcu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagcommon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TagCommonUpdateOne is the builder for updating a single TagCommon entity.
type TagCommonUpdateOne struct {
	config
	hooks    []Hook
	mutation *TagCommonMutation
}

// SetOwnerID sets the owner_id field.
func (tcuo *TagCommonUpdateOne) SetOwnerID(i int) *TagCommonUpdateOne {
	tcuo.mutation.ResetOwnerID()
	tcuo.mutation.SetOwnerID(i)
	return tcuo
}

// AddOwnerID adds i to owner_id.
func (tcuo *TagCommonUpdateOne) AddOwnerID(i int) *TagCommonUpdateOne {
	tcuo.mutation.AddOwnerID(i)
	return tcuo
}

// SetType sets the type field.
func (tcuo *TagCommonUpdateOne) SetType(i int) *TagCommonUpdateOne {
	tcuo.mutation.ResetType()
	tcuo.mutation.SetType(i)
	return tcuo
}

// AddType adds i to type.
func (tcuo *TagCommonUpdateOne) AddType(i int) *TagCommonUpdateOne {
	tcuo.mutation.AddType(i)
	return tcuo
}

// SetCreator sets the creator field.
func (tcuo *TagCommonUpdateOne) SetCreator(s string) *TagCommonUpdateOne {
	tcuo.mutation.SetCreator(s)
	return tcuo
}

// SetCreatedAt sets the created_at field.
func (tcuo *TagCommonUpdateOne) SetCreatedAt(t time.Time) *TagCommonUpdateOne {
	tcuo.mutation.SetCreatedAt(t)
	return tcuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tcuo *TagCommonUpdateOne) SetNillableCreatedAt(t *time.Time) *TagCommonUpdateOne {
	if t != nil {
		tcuo.SetCreatedAt(*t)
	}
	return tcuo
}

// SetUpdatedAt sets the updated_at field.
func (tcuo *TagCommonUpdateOne) SetUpdatedAt(t time.Time) *TagCommonUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tcuo *TagCommonUpdateOne) SetNillableUpdatedAt(t *time.Time) *TagCommonUpdateOne {
	if t != nil {
		tcuo.SetUpdatedAt(*t)
	}
	return tcuo
}

// SetVersion sets the version field.
func (tcuo *TagCommonUpdateOne) SetVersion(i int) *TagCommonUpdateOne {
	tcuo.mutation.ResetVersion()
	tcuo.mutation.SetVersion(i)
	return tcuo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (tcuo *TagCommonUpdateOne) SetNillableVersion(i *int) *TagCommonUpdateOne {
	if i != nil {
		tcuo.SetVersion(*i)
	}
	return tcuo
}

// AddVersion adds i to version.
func (tcuo *TagCommonUpdateOne) AddVersion(i int) *TagCommonUpdateOne {
	tcuo.mutation.AddVersion(i)
	return tcuo
}

// Mutation returns the TagCommonMutation object of the builder.
func (tcuo *TagCommonUpdateOne) Mutation() *TagCommonMutation {
	return tcuo.mutation
}

// Save executes the query and returns the updated entity.
func (tcuo *TagCommonUpdateOne) Save(ctx context.Context) (*TagCommon, error) {
	var (
		err  error
		node *TagCommon
	)
	if len(tcuo.hooks) == 0 {
		node, err = tcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagCommonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcuo.mutation = mutation
			node, err = tcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcuo.hooks) - 1; i >= 0; i-- {
			mut = tcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TagCommonUpdateOne) SaveX(ctx context.Context) *TagCommon {
	tc, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tc
}

// Exec executes the query on the entity.
func (tcuo *TagCommonUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TagCommonUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcuo *TagCommonUpdateOne) sqlSave(ctx context.Context) (tc *TagCommon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tagcommon.Table,
			Columns: tagcommon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tagcommon.FieldID,
			},
		},
	}
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TagCommon.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tcuo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldOwnerID,
		})
	}
	if value, ok := tcuo.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldOwnerID,
		})
	}
	if value, ok := tcuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldType,
		})
	}
	if value, ok := tcuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldType,
		})
	}
	if value, ok := tcuo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tagcommon.FieldCreator,
		})
	}
	if value, ok := tcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tagcommon.FieldCreatedAt,
		})
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tagcommon.FieldUpdatedAt,
		})
	}
	if value, ok := tcuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldVersion,
		})
	}
	if value, ok := tcuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldVersion,
		})
	}
	tc = &TagCommon{config: tcuo.config}
	_spec.Assign = tc.assignValues
	_spec.ScanValues = tc.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagcommon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tc, nil
}
