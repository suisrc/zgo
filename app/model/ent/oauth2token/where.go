// Code generated by entc, DO NOT EDIT.

package oauth2token

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Oauth2ID applies equality check predicate on the "oauth2_id" field. It's identical to Oauth2IDEQ.
func Oauth2ID(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauth2ID), v))
	})
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessToken), v))
	})
}

// ExpiresIn applies equality check predicate on the "expires_in" field. It's identical to ExpiresInEQ.
func ExpiresIn(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresIn), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// SyncLock applies equality check predicate on the "sync_lock" field. It's identical to SyncLockEQ.
func SyncLock(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncLock), v))
	})
}

// CallCount applies equality check predicate on the "call_count" field. It's identical to CallCountEQ.
func CallCount(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallCount), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// String1 applies equality check predicate on the "string_1" field. It's identical to String1EQ.
func String1(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String2 applies equality check predicate on the "string_2" field. It's identical to String2EQ.
func String2(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String3 applies equality check predicate on the "string_3" field. It's identical to String3EQ.
func String3(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString3), v))
	})
}

// Number1 applies equality check predicate on the "number_1" field. It's identical to Number1EQ.
func Number1(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber1), v))
	})
}

// Number2 applies equality check predicate on the "number_2" field. It's identical to Number2EQ.
func Number2(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber2), v))
	})
}

// Number3 applies equality check predicate on the "number_3" field. It's identical to Number3EQ.
func Number3(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber3), v))
	})
}

// Oauth2IDEQ applies the EQ predicate on the "oauth2_id" field.
func Oauth2IDEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDNEQ applies the NEQ predicate on the "oauth2_id" field.
func Oauth2IDNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDIn applies the In predicate on the "oauth2_id" field.
func Oauth2IDIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOauth2ID), v...))
	})
}

// Oauth2IDNotIn applies the NotIn predicate on the "oauth2_id" field.
func Oauth2IDNotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOauth2ID), v...))
	})
}

// Oauth2IDGT applies the GT predicate on the "oauth2_id" field.
func Oauth2IDGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDGTE applies the GTE predicate on the "oauth2_id" field.
func Oauth2IDGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDLT applies the LT predicate on the "oauth2_id" field.
func Oauth2IDLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDLTE applies the LTE predicate on the "oauth2_id" field.
func Oauth2IDLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDContains applies the Contains predicate on the "oauth2_id" field.
func Oauth2IDContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDHasPrefix applies the HasPrefix predicate on the "oauth2_id" field.
func Oauth2IDHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDHasSuffix applies the HasSuffix predicate on the "oauth2_id" field.
func Oauth2IDHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDEqualFold applies the EqualFold predicate on the "oauth2_id" field.
func Oauth2IDEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauth2ID), v))
	})
}

// Oauth2IDContainsFold applies the ContainsFold predicate on the "oauth2_id" field.
func Oauth2IDContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauth2ID), v))
	})
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessToken), v))
	})
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessToken), v))
	})
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessToken), v...))
	})
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessToken), v...))
	})
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessToken), v))
	})
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessToken), v))
	})
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessToken), v))
	})
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessToken), v))
	})
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessToken), v))
	})
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessToken), v))
	})
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessToken), v))
	})
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessToken), v))
	})
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessToken), v))
	})
}

// ExpiresInEQ applies the EQ predicate on the "expires_in" field.
func ExpiresInEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInNEQ applies the NEQ predicate on the "expires_in" field.
func ExpiresInNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInIn applies the In predicate on the "expires_in" field.
func ExpiresInIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiresIn), v...))
	})
}

// ExpiresInNotIn applies the NotIn predicate on the "expires_in" field.
func ExpiresInNotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiresIn), v...))
	})
}

// ExpiresInGT applies the GT predicate on the "expires_in" field.
func ExpiresInGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInGTE applies the GTE predicate on the "expires_in" field.
func ExpiresInGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInLT applies the LT predicate on the "expires_in" field.
func ExpiresInLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInLTE applies the LTE predicate on the "expires_in" field.
func ExpiresInLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInContains applies the Contains predicate on the "expires_in" field.
func ExpiresInContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInHasPrefix applies the HasPrefix predicate on the "expires_in" field.
func ExpiresInHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInHasSuffix applies the HasSuffix predicate on the "expires_in" field.
func ExpiresInHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInEqualFold applies the EqualFold predicate on the "expires_in" field.
func ExpiresInEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExpiresIn), v))
	})
}

// ExpiresInContainsFold applies the ContainsFold predicate on the "expires_in" field.
func ExpiresInContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExpiresIn), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeContains applies the Contains predicate on the "create_time" field.
func CreateTimeContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreateTime), v))
	})
}

// CreateTimeHasPrefix applies the HasPrefix predicate on the "create_time" field.
func CreateTimeHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreateTime), v))
	})
}

// CreateTimeHasSuffix applies the HasSuffix predicate on the "create_time" field.
func CreateTimeHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreateTime), v))
	})
}

// CreateTimeEqualFold applies the EqualFold predicate on the "create_time" field.
func CreateTimeEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreateTime), v))
	})
}

// CreateTimeContainsFold applies the ContainsFold predicate on the "create_time" field.
func CreateTimeContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreateTime), v))
	})
}

// SyncLockEQ applies the EQ predicate on the "sync_lock" field.
func SyncLockEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncLock), v))
	})
}

// SyncLockNEQ applies the NEQ predicate on the "sync_lock" field.
func SyncLockNEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSyncLock), v))
	})
}

// SyncLockIn applies the In predicate on the "sync_lock" field.
func SyncLockIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSyncLock), v...))
	})
}

// SyncLockNotIn applies the NotIn predicate on the "sync_lock" field.
func SyncLockNotIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSyncLock), v...))
	})
}

// SyncLockGT applies the GT predicate on the "sync_lock" field.
func SyncLockGT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSyncLock), v))
	})
}

// SyncLockGTE applies the GTE predicate on the "sync_lock" field.
func SyncLockGTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSyncLock), v))
	})
}

// SyncLockLT applies the LT predicate on the "sync_lock" field.
func SyncLockLT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSyncLock), v))
	})
}

// SyncLockLTE applies the LTE predicate on the "sync_lock" field.
func SyncLockLTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSyncLock), v))
	})
}

// CallCountEQ applies the EQ predicate on the "call_count" field.
func CallCountEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallCount), v))
	})
}

// CallCountNEQ applies the NEQ predicate on the "call_count" field.
func CallCountNEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCallCount), v))
	})
}

// CallCountIn applies the In predicate on the "call_count" field.
func CallCountIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCallCount), v...))
	})
}

// CallCountNotIn applies the NotIn predicate on the "call_count" field.
func CallCountNotIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCallCount), v...))
	})
}

// CallCountGT applies the GT predicate on the "call_count" field.
func CallCountGT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCallCount), v))
	})
}

// CallCountGTE applies the GTE predicate on the "call_count" field.
func CallCountGTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCallCount), v))
	})
}

// CallCountLT applies the LT predicate on the "call_count" field.
func CallCountLT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCallCount), v))
	})
}

// CallCountLTE applies the LTE predicate on the "call_count" field.
func CallCountLTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCallCount), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// String1EQ applies the EQ predicate on the "string_1" field.
func String1EQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String1NEQ applies the NEQ predicate on the "string_1" field.
func String1NEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString1), v))
	})
}

// String1In applies the In predicate on the "string_1" field.
func String1In(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString1), v...))
	})
}

// String1NotIn applies the NotIn predicate on the "string_1" field.
func String1NotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString1), v...))
	})
}

// String1GT applies the GT predicate on the "string_1" field.
func String1GT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString1), v))
	})
}

// String1GTE applies the GTE predicate on the "string_1" field.
func String1GTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString1), v))
	})
}

// String1LT applies the LT predicate on the "string_1" field.
func String1LT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString1), v))
	})
}

// String1LTE applies the LTE predicate on the "string_1" field.
func String1LTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString1), v))
	})
}

// String1Contains applies the Contains predicate on the "string_1" field.
func String1Contains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString1), v))
	})
}

// String1HasPrefix applies the HasPrefix predicate on the "string_1" field.
func String1HasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString1), v))
	})
}

// String1HasSuffix applies the HasSuffix predicate on the "string_1" field.
func String1HasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString1), v))
	})
}

// String1EqualFold applies the EqualFold predicate on the "string_1" field.
func String1EqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString1), v))
	})
}

// String1ContainsFold applies the ContainsFold predicate on the "string_1" field.
func String1ContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString1), v))
	})
}

// String2EQ applies the EQ predicate on the "string_2" field.
func String2EQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String2NEQ applies the NEQ predicate on the "string_2" field.
func String2NEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString2), v))
	})
}

// String2In applies the In predicate on the "string_2" field.
func String2In(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString2), v...))
	})
}

// String2NotIn applies the NotIn predicate on the "string_2" field.
func String2NotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString2), v...))
	})
}

// String2GT applies the GT predicate on the "string_2" field.
func String2GT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString2), v))
	})
}

// String2GTE applies the GTE predicate on the "string_2" field.
func String2GTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString2), v))
	})
}

// String2LT applies the LT predicate on the "string_2" field.
func String2LT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString2), v))
	})
}

// String2LTE applies the LTE predicate on the "string_2" field.
func String2LTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString2), v))
	})
}

// String2Contains applies the Contains predicate on the "string_2" field.
func String2Contains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString2), v))
	})
}

// String2HasPrefix applies the HasPrefix predicate on the "string_2" field.
func String2HasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString2), v))
	})
}

// String2HasSuffix applies the HasSuffix predicate on the "string_2" field.
func String2HasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString2), v))
	})
}

// String2EqualFold applies the EqualFold predicate on the "string_2" field.
func String2EqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString2), v))
	})
}

// String2ContainsFold applies the ContainsFold predicate on the "string_2" field.
func String2ContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString2), v))
	})
}

// String3EQ applies the EQ predicate on the "string_3" field.
func String3EQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString3), v))
	})
}

// String3NEQ applies the NEQ predicate on the "string_3" field.
func String3NEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString3), v))
	})
}

// String3In applies the In predicate on the "string_3" field.
func String3In(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString3), v...))
	})
}

// String3NotIn applies the NotIn predicate on the "string_3" field.
func String3NotIn(vs ...string) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString3), v...))
	})
}

// String3GT applies the GT predicate on the "string_3" field.
func String3GT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString3), v))
	})
}

// String3GTE applies the GTE predicate on the "string_3" field.
func String3GTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString3), v))
	})
}

// String3LT applies the LT predicate on the "string_3" field.
func String3LT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString3), v))
	})
}

// String3LTE applies the LTE predicate on the "string_3" field.
func String3LTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString3), v))
	})
}

// String3Contains applies the Contains predicate on the "string_3" field.
func String3Contains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString3), v))
	})
}

// String3HasPrefix applies the HasPrefix predicate on the "string_3" field.
func String3HasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString3), v))
	})
}

// String3HasSuffix applies the HasSuffix predicate on the "string_3" field.
func String3HasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString3), v))
	})
}

// String3EqualFold applies the EqualFold predicate on the "string_3" field.
func String3EqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString3), v))
	})
}

// String3ContainsFold applies the ContainsFold predicate on the "string_3" field.
func String3ContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString3), v))
	})
}

// Number1EQ applies the EQ predicate on the "number_1" field.
func Number1EQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber1), v))
	})
}

// Number1NEQ applies the NEQ predicate on the "number_1" field.
func Number1NEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber1), v))
	})
}

// Number1In applies the In predicate on the "number_1" field.
func Number1In(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber1), v...))
	})
}

// Number1NotIn applies the NotIn predicate on the "number_1" field.
func Number1NotIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber1), v...))
	})
}

// Number1GT applies the GT predicate on the "number_1" field.
func Number1GT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber1), v))
	})
}

// Number1GTE applies the GTE predicate on the "number_1" field.
func Number1GTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber1), v))
	})
}

// Number1LT applies the LT predicate on the "number_1" field.
func Number1LT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber1), v))
	})
}

// Number1LTE applies the LTE predicate on the "number_1" field.
func Number1LTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber1), v))
	})
}

// Number2EQ applies the EQ predicate on the "number_2" field.
func Number2EQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber2), v))
	})
}

// Number2NEQ applies the NEQ predicate on the "number_2" field.
func Number2NEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber2), v))
	})
}

// Number2In applies the In predicate on the "number_2" field.
func Number2In(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber2), v...))
	})
}

// Number2NotIn applies the NotIn predicate on the "number_2" field.
func Number2NotIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber2), v...))
	})
}

// Number2GT applies the GT predicate on the "number_2" field.
func Number2GT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber2), v))
	})
}

// Number2GTE applies the GTE predicate on the "number_2" field.
func Number2GTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber2), v))
	})
}

// Number2LT applies the LT predicate on the "number_2" field.
func Number2LT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber2), v))
	})
}

// Number2LTE applies the LTE predicate on the "number_2" field.
func Number2LTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber2), v))
	})
}

// Number3EQ applies the EQ predicate on the "number_3" field.
func Number3EQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber3), v))
	})
}

// Number3NEQ applies the NEQ predicate on the "number_3" field.
func Number3NEQ(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber3), v))
	})
}

// Number3In applies the In predicate on the "number_3" field.
func Number3In(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber3), v...))
	})
}

// Number3NotIn applies the NotIn predicate on the "number_3" field.
func Number3NotIn(vs ...int) predicate.Oauth2Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber3), v...))
	})
}

// Number3GT applies the GT predicate on the "number_3" field.
func Number3GT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber3), v))
	})
}

// Number3GTE applies the GTE predicate on the "number_3" field.
func Number3GTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber3), v))
	})
}

// Number3LT applies the LT predicate on the "number_3" field.
func Number3LT(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber3), v))
	})
}

// Number3LTE applies the LTE predicate on the "number_3" field.
func Number3LTE(v int) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber3), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Oauth2Token) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth2Token) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth2Token) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		p(s.Not())
	})
}
