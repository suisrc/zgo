// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/resourcerole"
)

// ResourceRole is the model entity for the ResourceRole schema.
type ResourceRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceRole) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // role_id
		&sql.NullString{}, // resource
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceRole fields.
func (rr *ResourceRole) assignValues(values ...interface{}) error {
	if m, n := len(values), len(resourcerole.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field role_id", values[0])
	} else if value.Valid {
		rr.RoleID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field resource", values[1])
	} else if value.Valid {
		rr.Resource = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[2])
	} else if value.Valid {
		rr.Creator = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		rr.CreatedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[4])
	} else if value.Valid {
		rr.UpdatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[5])
	} else if value.Valid {
		rr.Version = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this ResourceRole.
// Note that, you need to call ResourceRole.Unwrap() before calling this method, if this ResourceRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *ResourceRole) Update() *ResourceRoleUpdateOne {
	return (&ResourceRoleClient{config: rr.config}).UpdateOne(rr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rr *ResourceRole) Unwrap() *ResourceRole {
	tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceRole is not a transactional entity")
	}
	rr.config.driver = tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *ResourceRole) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceRole(")
	builder.WriteString(fmt.Sprintf("id=%v", rr.ID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.RoleID))
	builder.WriteString(", resource=")
	builder.WriteString(rr.Resource)
	builder.WriteString(", creator=")
	builder.WriteString(rr.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(rr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(rr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", rr.Version))
	builder.WriteByte(')')
	return builder.String()
}

// ResourceRoles is a parsable slice of ResourceRole.
type ResourceRoles []*ResourceRole

func (rr ResourceRoles) config(cfg config) {
	for _i := range rr {
		rr[_i].config = cfg
	}
}
