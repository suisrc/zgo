// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/predicate"
	"github.com/suisrc/zgo/app/model/ent/resourceuser"
)

// ResourceUserUpdate is the builder for updating ResourceUser entities.
type ResourceUserUpdate struct {
	config
	hooks      []Hook
	mutation   *ResourceUserMutation
	predicates []predicate.ResourceUser
}

// Where adds a new predicate for the builder.
func (ruu *ResourceUserUpdate) Where(ps ...predicate.ResourceUser) *ResourceUserUpdate {
	ruu.predicates = append(ruu.predicates, ps...)
	return ruu
}

// SetUserID sets the user_id field.
func (ruu *ResourceUserUpdate) SetUserID(i int) *ResourceUserUpdate {
	ruu.mutation.ResetUserID()
	ruu.mutation.SetUserID(i)
	return ruu
}

// AddUserID adds i to user_id.
func (ruu *ResourceUserUpdate) AddUserID(i int) *ResourceUserUpdate {
	ruu.mutation.AddUserID(i)
	return ruu
}

// SetResource sets the resource field.
func (ruu *ResourceUserUpdate) SetResource(s string) *ResourceUserUpdate {
	ruu.mutation.SetResource(s)
	return ruu
}

// SetCreator sets the creator field.
func (ruu *ResourceUserUpdate) SetCreator(s string) *ResourceUserUpdate {
	ruu.mutation.SetCreator(s)
	return ruu
}

// SetCreatedAt sets the created_at field.
func (ruu *ResourceUserUpdate) SetCreatedAt(t time.Time) *ResourceUserUpdate {
	ruu.mutation.SetCreatedAt(t)
	return ruu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ruu *ResourceUserUpdate) SetNillableCreatedAt(t *time.Time) *ResourceUserUpdate {
	if t != nil {
		ruu.SetCreatedAt(*t)
	}
	return ruu
}

// SetUpdatedAt sets the updated_at field.
func (ruu *ResourceUserUpdate) SetUpdatedAt(t time.Time) *ResourceUserUpdate {
	ruu.mutation.SetUpdatedAt(t)
	return ruu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ruu *ResourceUserUpdate) SetNillableUpdatedAt(t *time.Time) *ResourceUserUpdate {
	if t != nil {
		ruu.SetUpdatedAt(*t)
	}
	return ruu
}

// SetVersion sets the version field.
func (ruu *ResourceUserUpdate) SetVersion(i int) *ResourceUserUpdate {
	ruu.mutation.ResetVersion()
	ruu.mutation.SetVersion(i)
	return ruu
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ruu *ResourceUserUpdate) SetNillableVersion(i *int) *ResourceUserUpdate {
	if i != nil {
		ruu.SetVersion(*i)
	}
	return ruu
}

// AddVersion adds i to version.
func (ruu *ResourceUserUpdate) AddVersion(i int) *ResourceUserUpdate {
	ruu.mutation.AddVersion(i)
	return ruu
}

// Mutation returns the ResourceUserMutation object of the builder.
func (ruu *ResourceUserUpdate) Mutation() *ResourceUserMutation {
	return ruu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ruu *ResourceUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ruu.hooks) == 0 {
		affected, err = ruu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruu.mutation = mutation
			affected, err = ruu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ruu.hooks) - 1; i >= 0; i-- {
			mut = ruu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *ResourceUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *ResourceUserUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *ResourceUserUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruu *ResourceUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourceuser.Table,
			Columns: resourceuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourceuser.FieldID,
			},
		},
	}
	if ps := ruu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldUserID,
		})
	}
	if value, ok := ruu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldUserID,
		})
	}
	if value, ok := ruu.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourceuser.FieldResource,
		})
	}
	if value, ok := ruu.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourceuser.FieldCreator,
		})
	}
	if value, ok := ruu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourceuser.FieldCreatedAt,
		})
	}
	if value, ok := ruu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourceuser.FieldUpdatedAt,
		})
	}
	if value, ok := ruu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldVersion,
		})
	}
	if value, ok := ruu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourceuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ResourceUserUpdateOne is the builder for updating a single ResourceUser entity.
type ResourceUserUpdateOne struct {
	config
	hooks    []Hook
	mutation *ResourceUserMutation
}

// SetUserID sets the user_id field.
func (ruuo *ResourceUserUpdateOne) SetUserID(i int) *ResourceUserUpdateOne {
	ruuo.mutation.ResetUserID()
	ruuo.mutation.SetUserID(i)
	return ruuo
}

// AddUserID adds i to user_id.
func (ruuo *ResourceUserUpdateOne) AddUserID(i int) *ResourceUserUpdateOne {
	ruuo.mutation.AddUserID(i)
	return ruuo
}

// SetResource sets the resource field.
func (ruuo *ResourceUserUpdateOne) SetResource(s string) *ResourceUserUpdateOne {
	ruuo.mutation.SetResource(s)
	return ruuo
}

// SetCreator sets the creator field.
func (ruuo *ResourceUserUpdateOne) SetCreator(s string) *ResourceUserUpdateOne {
	ruuo.mutation.SetCreator(s)
	return ruuo
}

// SetCreatedAt sets the created_at field.
func (ruuo *ResourceUserUpdateOne) SetCreatedAt(t time.Time) *ResourceUserUpdateOne {
	ruuo.mutation.SetCreatedAt(t)
	return ruuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ruuo *ResourceUserUpdateOne) SetNillableCreatedAt(t *time.Time) *ResourceUserUpdateOne {
	if t != nil {
		ruuo.SetCreatedAt(*t)
	}
	return ruuo
}

// SetUpdatedAt sets the updated_at field.
func (ruuo *ResourceUserUpdateOne) SetUpdatedAt(t time.Time) *ResourceUserUpdateOne {
	ruuo.mutation.SetUpdatedAt(t)
	return ruuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ruuo *ResourceUserUpdateOne) SetNillableUpdatedAt(t *time.Time) *ResourceUserUpdateOne {
	if t != nil {
		ruuo.SetUpdatedAt(*t)
	}
	return ruuo
}

// SetVersion sets the version field.
func (ruuo *ResourceUserUpdateOne) SetVersion(i int) *ResourceUserUpdateOne {
	ruuo.mutation.ResetVersion()
	ruuo.mutation.SetVersion(i)
	return ruuo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ruuo *ResourceUserUpdateOne) SetNillableVersion(i *int) *ResourceUserUpdateOne {
	if i != nil {
		ruuo.SetVersion(*i)
	}
	return ruuo
}

// AddVersion adds i to version.
func (ruuo *ResourceUserUpdateOne) AddVersion(i int) *ResourceUserUpdateOne {
	ruuo.mutation.AddVersion(i)
	return ruuo
}

// Mutation returns the ResourceUserMutation object of the builder.
func (ruuo *ResourceUserUpdateOne) Mutation() *ResourceUserMutation {
	return ruuo.mutation
}

// Save executes the query and returns the updated entity.
func (ruuo *ResourceUserUpdateOne) Save(ctx context.Context) (*ResourceUser, error) {
	var (
		err  error
		node *ResourceUser
	)
	if len(ruuo.hooks) == 0 {
		node, err = ruuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruuo.mutation = mutation
			node, err = ruuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruuo.hooks) - 1; i >= 0; i-- {
			mut = ruuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *ResourceUserUpdateOne) SaveX(ctx context.Context) *ResourceUser {
	ru, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ru
}

// Exec executes the query on the entity.
func (ruuo *ResourceUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *ResourceUserUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruuo *ResourceUserUpdateOne) sqlSave(ctx context.Context) (ru *ResourceUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourceuser.Table,
			Columns: resourceuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resourceuser.FieldID,
			},
		},
	}
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldUserID,
		})
	}
	if value, ok := ruuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldUserID,
		})
	}
	if value, ok := ruuo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourceuser.FieldResource,
		})
	}
	if value, ok := ruuo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourceuser.FieldCreator,
		})
	}
	if value, ok := ruuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourceuser.FieldCreatedAt,
		})
	}
	if value, ok := ruuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourceuser.FieldUpdatedAt,
		})
	}
	if value, ok := ruuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldVersion,
		})
	}
	if value, ok := ruuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: resourceuser.FieldVersion,
		})
	}
	ru = &ResourceUser{config: ruuo.config}
	_spec.Assign = ru.assignValues
	_spec.ScanValues = ru.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourceuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ru, nil
}
