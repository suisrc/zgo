// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/tagcommon"
)

// TagCommonCreate is the builder for creating a TagCommon entity.
type TagCommonCreate struct {
	config
	mutation *TagCommonMutation
	hooks    []Hook
}

// SetOwnerID sets the owner_id field.
func (tcc *TagCommonCreate) SetOwnerID(i int) *TagCommonCreate {
	tcc.mutation.SetOwnerID(i)
	return tcc
}

// SetType sets the type field.
func (tcc *TagCommonCreate) SetType(i int) *TagCommonCreate {
	tcc.mutation.SetType(i)
	return tcc
}

// SetCreator sets the creator field.
func (tcc *TagCommonCreate) SetCreator(s string) *TagCommonCreate {
	tcc.mutation.SetCreator(s)
	return tcc
}

// SetCreatedAt sets the created_at field.
func (tcc *TagCommonCreate) SetCreatedAt(t time.Time) *TagCommonCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tcc *TagCommonCreate) SetNillableCreatedAt(t *time.Time) *TagCommonCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the updated_at field.
func (tcc *TagCommonCreate) SetUpdatedAt(t time.Time) *TagCommonCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tcc *TagCommonCreate) SetNillableUpdatedAt(t *time.Time) *TagCommonCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetVersion sets the version field.
func (tcc *TagCommonCreate) SetVersion(i int) *TagCommonCreate {
	tcc.mutation.SetVersion(i)
	return tcc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (tcc *TagCommonCreate) SetNillableVersion(i *int) *TagCommonCreate {
	if i != nil {
		tcc.SetVersion(*i)
	}
	return tcc
}

// Mutation returns the TagCommonMutation object of the builder.
func (tcc *TagCommonCreate) Mutation() *TagCommonMutation {
	return tcc.mutation
}

// Save creates the TagCommon in the database.
func (tcc *TagCommonCreate) Save(ctx context.Context) (*TagCommon, error) {
	if _, ok := tcc.mutation.OwnerID(); !ok {
		return nil, &ValidationError{Name: "owner_id", err: errors.New("ent: missing required field \"owner_id\"")}
	}
	if _, ok := tcc.mutation.GetType(); !ok {
		return nil, &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := tcc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := tagcommon.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := tagcommon.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.Version(); !ok {
		v := tagcommon.DefaultVersion
		tcc.mutation.SetVersion(v)
	}
	var (
		err  error
		node *TagCommon
	)
	if len(tcc.hooks) == 0 {
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagCommonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcc.mutation = mutation
			node, err = tcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TagCommonCreate) SaveX(ctx context.Context) *TagCommon {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tcc *TagCommonCreate) sqlSave(ctx context.Context) (*TagCommon, error) {
	tc, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	tc.ID = int(id)
	return tc, nil
}

func (tcc *TagCommonCreate) createSpec() (*TagCommon, *sqlgraph.CreateSpec) {
	var (
		tc    = &TagCommon{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tagcommon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tagcommon.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.OwnerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldOwnerID,
		})
		tc.OwnerID = value
	}
	if value, ok := tcc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldType,
		})
		tc.Type = value
	}
	if value, ok := tcc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tagcommon.FieldCreator,
		})
		tc.Creator = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tagcommon.FieldCreatedAt,
		})
		tc.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tagcommon.FieldUpdatedAt,
		})
		tc.UpdatedAt = value
	}
	if value, ok := tcc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagcommon.FieldVersion,
		})
		tc.Version = value
	}
	return tc, _spec
}
