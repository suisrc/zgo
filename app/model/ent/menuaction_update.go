// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/menuaction"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// MenuActionUpdate is the builder for updating MenuAction entities.
type MenuActionUpdate struct {
	config
	hooks      []Hook
	mutation   *MenuActionMutation
	predicates []predicate.MenuAction
}

// Where adds a new predicate for the builder.
func (mau *MenuActionUpdate) Where(ps ...predicate.MenuAction) *MenuActionUpdate {
	mau.predicates = append(mau.predicates, ps...)
	return mau
}

// SetMenuID sets the menu_id field.
func (mau *MenuActionUpdate) SetMenuID(i int) *MenuActionUpdate {
	mau.mutation.ResetMenuID()
	mau.mutation.SetMenuID(i)
	return mau
}

// AddMenuID adds i to menu_id.
func (mau *MenuActionUpdate) AddMenuID(i int) *MenuActionUpdate {
	mau.mutation.AddMenuID(i)
	return mau
}

// SetRoleID sets the role_id field.
func (mau *MenuActionUpdate) SetRoleID(i int) *MenuActionUpdate {
	mau.mutation.ResetRoleID()
	mau.mutation.SetRoleID(i)
	return mau
}

// AddRoleID adds i to role_id.
func (mau *MenuActionUpdate) AddRoleID(i int) *MenuActionUpdate {
	mau.mutation.AddRoleID(i)
	return mau
}

// SetCode sets the code field.
func (mau *MenuActionUpdate) SetCode(s string) *MenuActionUpdate {
	mau.mutation.SetCode(s)
	return mau
}

// SetName sets the name field.
func (mau *MenuActionUpdate) SetName(s string) *MenuActionUpdate {
	mau.mutation.SetName(s)
	return mau
}

// SetDisable sets the disable field.
func (mau *MenuActionUpdate) SetDisable(i int) *MenuActionUpdate {
	mau.mutation.ResetDisable()
	mau.mutation.SetDisable(i)
	return mau
}

// AddDisable adds i to disable.
func (mau *MenuActionUpdate) AddDisable(i int) *MenuActionUpdate {
	mau.mutation.AddDisable(i)
	return mau
}

// SetCreator sets the creator field.
func (mau *MenuActionUpdate) SetCreator(s string) *MenuActionUpdate {
	mau.mutation.SetCreator(s)
	return mau
}

// SetCreatedAt sets the created_at field.
func (mau *MenuActionUpdate) SetCreatedAt(t time.Time) *MenuActionUpdate {
	mau.mutation.SetCreatedAt(t)
	return mau
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mau *MenuActionUpdate) SetNillableCreatedAt(t *time.Time) *MenuActionUpdate {
	if t != nil {
		mau.SetCreatedAt(*t)
	}
	return mau
}

// SetUpdatedAt sets the updated_at field.
func (mau *MenuActionUpdate) SetUpdatedAt(t time.Time) *MenuActionUpdate {
	mau.mutation.SetUpdatedAt(t)
	return mau
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mau *MenuActionUpdate) SetNillableUpdatedAt(t *time.Time) *MenuActionUpdate {
	if t != nil {
		mau.SetUpdatedAt(*t)
	}
	return mau
}

// SetVersion sets the version field.
func (mau *MenuActionUpdate) SetVersion(i int) *MenuActionUpdate {
	mau.mutation.ResetVersion()
	mau.mutation.SetVersion(i)
	return mau
}

// SetNillableVersion sets the version field if the given value is not nil.
func (mau *MenuActionUpdate) SetNillableVersion(i *int) *MenuActionUpdate {
	if i != nil {
		mau.SetVersion(*i)
	}
	return mau
}

// AddVersion adds i to version.
func (mau *MenuActionUpdate) AddVersion(i int) *MenuActionUpdate {
	mau.mutation.AddVersion(i)
	return mau
}

// Mutation returns the MenuActionMutation object of the builder.
func (mau *MenuActionUpdate) Mutation() *MenuActionMutation {
	return mau.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mau *MenuActionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mau.hooks) == 0 {
		affected, err = mau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mau.mutation = mutation
			affected, err = mau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mau.hooks) - 1; i >= 0; i-- {
			mut = mau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mau *MenuActionUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *MenuActionUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *MenuActionUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mau *MenuActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menuaction.Table,
			Columns: menuaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menuaction.FieldID,
			},
		},
	}
	if ps := mau.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.MenuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldMenuID,
		})
	}
	if value, ok := mau.mutation.AddedMenuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldMenuID,
		})
	}
	if value, ok := mau.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldRoleID,
		})
	}
	if value, ok := mau.mutation.AddedRoleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldRoleID,
		})
	}
	if value, ok := mau.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldCode,
		})
	}
	if value, ok := mau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldName,
		})
	}
	if value, ok := mau.mutation.Disable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldDisable,
		})
	}
	if value, ok := mau.mutation.AddedDisable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldDisable,
		})
	}
	if value, ok := mau.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldCreator,
		})
	}
	if value, ok := mau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menuaction.FieldCreatedAt,
		})
	}
	if value, ok := mau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menuaction.FieldUpdatedAt,
		})
	}
	if value, ok := mau.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldVersion,
		})
	}
	if value, ok := mau.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menuaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MenuActionUpdateOne is the builder for updating a single MenuAction entity.
type MenuActionUpdateOne struct {
	config
	hooks    []Hook
	mutation *MenuActionMutation
}

// SetMenuID sets the menu_id field.
func (mauo *MenuActionUpdateOne) SetMenuID(i int) *MenuActionUpdateOne {
	mauo.mutation.ResetMenuID()
	mauo.mutation.SetMenuID(i)
	return mauo
}

// AddMenuID adds i to menu_id.
func (mauo *MenuActionUpdateOne) AddMenuID(i int) *MenuActionUpdateOne {
	mauo.mutation.AddMenuID(i)
	return mauo
}

// SetRoleID sets the role_id field.
func (mauo *MenuActionUpdateOne) SetRoleID(i int) *MenuActionUpdateOne {
	mauo.mutation.ResetRoleID()
	mauo.mutation.SetRoleID(i)
	return mauo
}

// AddRoleID adds i to role_id.
func (mauo *MenuActionUpdateOne) AddRoleID(i int) *MenuActionUpdateOne {
	mauo.mutation.AddRoleID(i)
	return mauo
}

// SetCode sets the code field.
func (mauo *MenuActionUpdateOne) SetCode(s string) *MenuActionUpdateOne {
	mauo.mutation.SetCode(s)
	return mauo
}

// SetName sets the name field.
func (mauo *MenuActionUpdateOne) SetName(s string) *MenuActionUpdateOne {
	mauo.mutation.SetName(s)
	return mauo
}

// SetDisable sets the disable field.
func (mauo *MenuActionUpdateOne) SetDisable(i int) *MenuActionUpdateOne {
	mauo.mutation.ResetDisable()
	mauo.mutation.SetDisable(i)
	return mauo
}

// AddDisable adds i to disable.
func (mauo *MenuActionUpdateOne) AddDisable(i int) *MenuActionUpdateOne {
	mauo.mutation.AddDisable(i)
	return mauo
}

// SetCreator sets the creator field.
func (mauo *MenuActionUpdateOne) SetCreator(s string) *MenuActionUpdateOne {
	mauo.mutation.SetCreator(s)
	return mauo
}

// SetCreatedAt sets the created_at field.
func (mauo *MenuActionUpdateOne) SetCreatedAt(t time.Time) *MenuActionUpdateOne {
	mauo.mutation.SetCreatedAt(t)
	return mauo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mauo *MenuActionUpdateOne) SetNillableCreatedAt(t *time.Time) *MenuActionUpdateOne {
	if t != nil {
		mauo.SetCreatedAt(*t)
	}
	return mauo
}

// SetUpdatedAt sets the updated_at field.
func (mauo *MenuActionUpdateOne) SetUpdatedAt(t time.Time) *MenuActionUpdateOne {
	mauo.mutation.SetUpdatedAt(t)
	return mauo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mauo *MenuActionUpdateOne) SetNillableUpdatedAt(t *time.Time) *MenuActionUpdateOne {
	if t != nil {
		mauo.SetUpdatedAt(*t)
	}
	return mauo
}

// SetVersion sets the version field.
func (mauo *MenuActionUpdateOne) SetVersion(i int) *MenuActionUpdateOne {
	mauo.mutation.ResetVersion()
	mauo.mutation.SetVersion(i)
	return mauo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (mauo *MenuActionUpdateOne) SetNillableVersion(i *int) *MenuActionUpdateOne {
	if i != nil {
		mauo.SetVersion(*i)
	}
	return mauo
}

// AddVersion adds i to version.
func (mauo *MenuActionUpdateOne) AddVersion(i int) *MenuActionUpdateOne {
	mauo.mutation.AddVersion(i)
	return mauo
}

// Mutation returns the MenuActionMutation object of the builder.
func (mauo *MenuActionUpdateOne) Mutation() *MenuActionMutation {
	return mauo.mutation
}

// Save executes the query and returns the updated entity.
func (mauo *MenuActionUpdateOne) Save(ctx context.Context) (*MenuAction, error) {
	var (
		err  error
		node *MenuAction
	)
	if len(mauo.hooks) == 0 {
		node, err = mauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mauo.mutation = mutation
			node, err = mauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mauo.hooks) - 1; i >= 0; i-- {
			mut = mauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *MenuActionUpdateOne) SaveX(ctx context.Context) *MenuAction {
	ma, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ma
}

// Exec executes the query on the entity.
func (mauo *MenuActionUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *MenuActionUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mauo *MenuActionUpdateOne) sqlSave(ctx context.Context) (ma *MenuAction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menuaction.Table,
			Columns: menuaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menuaction.FieldID,
			},
		},
	}
	id, ok := mauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MenuAction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mauo.mutation.MenuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldMenuID,
		})
	}
	if value, ok := mauo.mutation.AddedMenuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldMenuID,
		})
	}
	if value, ok := mauo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldRoleID,
		})
	}
	if value, ok := mauo.mutation.AddedRoleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldRoleID,
		})
	}
	if value, ok := mauo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldCode,
		})
	}
	if value, ok := mauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldName,
		})
	}
	if value, ok := mauo.mutation.Disable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldDisable,
		})
	}
	if value, ok := mauo.mutation.AddedDisable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldDisable,
		})
	}
	if value, ok := mauo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuaction.FieldCreator,
		})
	}
	if value, ok := mauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menuaction.FieldCreatedAt,
		})
	}
	if value, ok := mauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menuaction.FieldUpdatedAt,
		})
	}
	if value, ok := mauo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldVersion,
		})
	}
	if value, ok := mauo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuaction.FieldVersion,
		})
	}
	ma = &MenuAction{config: mauo.config}
	_spec.Assign = ma.assignValues
	_spec.ScanValues = ma.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menuaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ma, nil
}
