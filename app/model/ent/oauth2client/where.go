// Code generated by entc, DO NOT EDIT.

package oauth2client

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClientKey applies equality check predicate on the "client_key" field. It's identical to ClientKeyEQ.
func ClientKey(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientKey), v))
	})
}

// Audience applies equality check predicate on the "audience" field. It's identical to AudienceEQ.
func Audience(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudience), v))
	})
}

// Issuer applies equality check predicate on the "issuer" field. It's identical to IssuerEQ.
func Issuer(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuer), v))
	})
}

// Expired applies equality check predicate on the "expired" field. It's identical to ExpiredEQ.
func Expired(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenType), v))
	})
}

// SMethod applies equality check predicate on the "s_method" field. It's identical to SMethodEQ.
func SMethod(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSMethod), v))
	})
}

// SSecret applies equality check predicate on the "s_secret" field. It's identical to SSecretEQ.
func SSecret(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSSecret), v))
	})
}

// TokenGetter applies equality check predicate on the "token_getter" field. It's identical to TokenGetterEQ.
func TokenGetter(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenGetter), v))
	})
}

// SigninURL applies equality check predicate on the "signin_url" field. It's identical to SigninURLEQ.
func SigninURL(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSigninURL), v))
	})
}

// SigninForce applies equality check predicate on the "signin_force" field. It's identical to SigninForceEQ.
func SigninForce(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSigninForce), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// String1 applies equality check predicate on the "string_1" field. It's identical to String1EQ.
func String1(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String2 applies equality check predicate on the "string_2" field. It's identical to String2EQ.
func String2(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String3 applies equality check predicate on the "string_3" field. It's identical to String3EQ.
func String3(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString3), v))
	})
}

// Number1 applies equality check predicate on the "number_1" field. It's identical to Number1EQ.
func Number1(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber1), v))
	})
}

// Number2 applies equality check predicate on the "number_2" field. It's identical to Number2EQ.
func Number2(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber2), v))
	})
}

// Number3 applies equality check predicate on the "number_3" field. It's identical to Number3EQ.
func Number3(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber3), v))
	})
}

// ClientKeyEQ applies the EQ predicate on the "client_key" field.
func ClientKeyEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientKey), v))
	})
}

// ClientKeyNEQ applies the NEQ predicate on the "client_key" field.
func ClientKeyNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientKey), v))
	})
}

// ClientKeyIn applies the In predicate on the "client_key" field.
func ClientKeyIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientKey), v...))
	})
}

// ClientKeyNotIn applies the NotIn predicate on the "client_key" field.
func ClientKeyNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientKey), v...))
	})
}

// ClientKeyGT applies the GT predicate on the "client_key" field.
func ClientKeyGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientKey), v))
	})
}

// ClientKeyGTE applies the GTE predicate on the "client_key" field.
func ClientKeyGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientKey), v))
	})
}

// ClientKeyLT applies the LT predicate on the "client_key" field.
func ClientKeyLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientKey), v))
	})
}

// ClientKeyLTE applies the LTE predicate on the "client_key" field.
func ClientKeyLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientKey), v))
	})
}

// ClientKeyContains applies the Contains predicate on the "client_key" field.
func ClientKeyContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientKey), v))
	})
}

// ClientKeyHasPrefix applies the HasPrefix predicate on the "client_key" field.
func ClientKeyHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientKey), v))
	})
}

// ClientKeyHasSuffix applies the HasSuffix predicate on the "client_key" field.
func ClientKeyHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientKey), v))
	})
}

// ClientKeyEqualFold applies the EqualFold predicate on the "client_key" field.
func ClientKeyEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientKey), v))
	})
}

// ClientKeyContainsFold applies the ContainsFold predicate on the "client_key" field.
func ClientKeyContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientKey), v))
	})
}

// AudienceEQ applies the EQ predicate on the "audience" field.
func AudienceEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudience), v))
	})
}

// AudienceNEQ applies the NEQ predicate on the "audience" field.
func AudienceNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAudience), v))
	})
}

// AudienceIn applies the In predicate on the "audience" field.
func AudienceIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAudience), v...))
	})
}

// AudienceNotIn applies the NotIn predicate on the "audience" field.
func AudienceNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAudience), v...))
	})
}

// AudienceGT applies the GT predicate on the "audience" field.
func AudienceGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAudience), v))
	})
}

// AudienceGTE applies the GTE predicate on the "audience" field.
func AudienceGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAudience), v))
	})
}

// AudienceLT applies the LT predicate on the "audience" field.
func AudienceLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAudience), v))
	})
}

// AudienceLTE applies the LTE predicate on the "audience" field.
func AudienceLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAudience), v))
	})
}

// AudienceContains applies the Contains predicate on the "audience" field.
func AudienceContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAudience), v))
	})
}

// AudienceHasPrefix applies the HasPrefix predicate on the "audience" field.
func AudienceHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAudience), v))
	})
}

// AudienceHasSuffix applies the HasSuffix predicate on the "audience" field.
func AudienceHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAudience), v))
	})
}

// AudienceEqualFold applies the EqualFold predicate on the "audience" field.
func AudienceEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAudience), v))
	})
}

// AudienceContainsFold applies the ContainsFold predicate on the "audience" field.
func AudienceContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAudience), v))
	})
}

// IssuerEQ applies the EQ predicate on the "issuer" field.
func IssuerEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuer), v))
	})
}

// IssuerNEQ applies the NEQ predicate on the "issuer" field.
func IssuerNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIssuer), v))
	})
}

// IssuerIn applies the In predicate on the "issuer" field.
func IssuerIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIssuer), v...))
	})
}

// IssuerNotIn applies the NotIn predicate on the "issuer" field.
func IssuerNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIssuer), v...))
	})
}

// IssuerGT applies the GT predicate on the "issuer" field.
func IssuerGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIssuer), v))
	})
}

// IssuerGTE applies the GTE predicate on the "issuer" field.
func IssuerGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIssuer), v))
	})
}

// IssuerLT applies the LT predicate on the "issuer" field.
func IssuerLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIssuer), v))
	})
}

// IssuerLTE applies the LTE predicate on the "issuer" field.
func IssuerLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIssuer), v))
	})
}

// IssuerContains applies the Contains predicate on the "issuer" field.
func IssuerContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIssuer), v))
	})
}

// IssuerHasPrefix applies the HasPrefix predicate on the "issuer" field.
func IssuerHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIssuer), v))
	})
}

// IssuerHasSuffix applies the HasSuffix predicate on the "issuer" field.
func IssuerHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIssuer), v))
	})
}

// IssuerEqualFold applies the EqualFold predicate on the "issuer" field.
func IssuerEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIssuer), v))
	})
}

// IssuerContainsFold applies the ContainsFold predicate on the "issuer" field.
func IssuerContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIssuer), v))
	})
}

// ExpiredEQ applies the EQ predicate on the "expired" field.
func ExpiredEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// ExpiredNEQ applies the NEQ predicate on the "expired" field.
func ExpiredNEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpired), v))
	})
}

// ExpiredIn applies the In predicate on the "expired" field.
func ExpiredIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpired), v...))
	})
}

// ExpiredNotIn applies the NotIn predicate on the "expired" field.
func ExpiredNotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpired), v...))
	})
}

// ExpiredGT applies the GT predicate on the "expired" field.
func ExpiredGT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpired), v))
	})
}

// ExpiredGTE applies the GTE predicate on the "expired" field.
func ExpiredGTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpired), v))
	})
}

// ExpiredLT applies the LT predicate on the "expired" field.
func ExpiredLT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpired), v))
	})
}

// ExpiredLTE applies the LTE predicate on the "expired" field.
func ExpiredLTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpired), v))
	})
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenType), v))
	})
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenType), v))
	})
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTokenType), v...))
	})
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTokenType), v...))
	})
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenType), v))
	})
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenType), v))
	})
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenType), v))
	})
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenType), v))
	})
}

// SMethodEQ applies the EQ predicate on the "s_method" field.
func SMethodEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSMethod), v))
	})
}

// SMethodNEQ applies the NEQ predicate on the "s_method" field.
func SMethodNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSMethod), v))
	})
}

// SMethodIn applies the In predicate on the "s_method" field.
func SMethodIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSMethod), v...))
	})
}

// SMethodNotIn applies the NotIn predicate on the "s_method" field.
func SMethodNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSMethod), v...))
	})
}

// SMethodGT applies the GT predicate on the "s_method" field.
func SMethodGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSMethod), v))
	})
}

// SMethodGTE applies the GTE predicate on the "s_method" field.
func SMethodGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSMethod), v))
	})
}

// SMethodLT applies the LT predicate on the "s_method" field.
func SMethodLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSMethod), v))
	})
}

// SMethodLTE applies the LTE predicate on the "s_method" field.
func SMethodLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSMethod), v))
	})
}

// SMethodContains applies the Contains predicate on the "s_method" field.
func SMethodContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSMethod), v))
	})
}

// SMethodHasPrefix applies the HasPrefix predicate on the "s_method" field.
func SMethodHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSMethod), v))
	})
}

// SMethodHasSuffix applies the HasSuffix predicate on the "s_method" field.
func SMethodHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSMethod), v))
	})
}

// SMethodEqualFold applies the EqualFold predicate on the "s_method" field.
func SMethodEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSMethod), v))
	})
}

// SMethodContainsFold applies the ContainsFold predicate on the "s_method" field.
func SMethodContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSMethod), v))
	})
}

// SSecretEQ applies the EQ predicate on the "s_secret" field.
func SSecretEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSSecret), v))
	})
}

// SSecretNEQ applies the NEQ predicate on the "s_secret" field.
func SSecretNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSSecret), v))
	})
}

// SSecretIn applies the In predicate on the "s_secret" field.
func SSecretIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSSecret), v...))
	})
}

// SSecretNotIn applies the NotIn predicate on the "s_secret" field.
func SSecretNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSSecret), v...))
	})
}

// SSecretGT applies the GT predicate on the "s_secret" field.
func SSecretGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSSecret), v))
	})
}

// SSecretGTE applies the GTE predicate on the "s_secret" field.
func SSecretGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSSecret), v))
	})
}

// SSecretLT applies the LT predicate on the "s_secret" field.
func SSecretLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSSecret), v))
	})
}

// SSecretLTE applies the LTE predicate on the "s_secret" field.
func SSecretLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSSecret), v))
	})
}

// SSecretContains applies the Contains predicate on the "s_secret" field.
func SSecretContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSSecret), v))
	})
}

// SSecretHasPrefix applies the HasPrefix predicate on the "s_secret" field.
func SSecretHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSSecret), v))
	})
}

// SSecretHasSuffix applies the HasSuffix predicate on the "s_secret" field.
func SSecretHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSSecret), v))
	})
}

// SSecretEqualFold applies the EqualFold predicate on the "s_secret" field.
func SSecretEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSSecret), v))
	})
}

// SSecretContainsFold applies the ContainsFold predicate on the "s_secret" field.
func SSecretContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSSecret), v))
	})
}

// TokenGetterEQ applies the EQ predicate on the "token_getter" field.
func TokenGetterEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterNEQ applies the NEQ predicate on the "token_getter" field.
func TokenGetterNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterIn applies the In predicate on the "token_getter" field.
func TokenGetterIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTokenGetter), v...))
	})
}

// TokenGetterNotIn applies the NotIn predicate on the "token_getter" field.
func TokenGetterNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTokenGetter), v...))
	})
}

// TokenGetterGT applies the GT predicate on the "token_getter" field.
func TokenGetterGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterGTE applies the GTE predicate on the "token_getter" field.
func TokenGetterGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterLT applies the LT predicate on the "token_getter" field.
func TokenGetterLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterLTE applies the LTE predicate on the "token_getter" field.
func TokenGetterLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterContains applies the Contains predicate on the "token_getter" field.
func TokenGetterContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterHasPrefix applies the HasPrefix predicate on the "token_getter" field.
func TokenGetterHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterHasSuffix applies the HasSuffix predicate on the "token_getter" field.
func TokenGetterHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterEqualFold applies the EqualFold predicate on the "token_getter" field.
func TokenGetterEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenGetter), v))
	})
}

// TokenGetterContainsFold applies the ContainsFold predicate on the "token_getter" field.
func TokenGetterContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenGetter), v))
	})
}

// SigninURLEQ applies the EQ predicate on the "signin_url" field.
func SigninURLEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSigninURL), v))
	})
}

// SigninURLNEQ applies the NEQ predicate on the "signin_url" field.
func SigninURLNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSigninURL), v))
	})
}

// SigninURLIn applies the In predicate on the "signin_url" field.
func SigninURLIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSigninURL), v...))
	})
}

// SigninURLNotIn applies the NotIn predicate on the "signin_url" field.
func SigninURLNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSigninURL), v...))
	})
}

// SigninURLGT applies the GT predicate on the "signin_url" field.
func SigninURLGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSigninURL), v))
	})
}

// SigninURLGTE applies the GTE predicate on the "signin_url" field.
func SigninURLGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSigninURL), v))
	})
}

// SigninURLLT applies the LT predicate on the "signin_url" field.
func SigninURLLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSigninURL), v))
	})
}

// SigninURLLTE applies the LTE predicate on the "signin_url" field.
func SigninURLLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSigninURL), v))
	})
}

// SigninURLContains applies the Contains predicate on the "signin_url" field.
func SigninURLContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSigninURL), v))
	})
}

// SigninURLHasPrefix applies the HasPrefix predicate on the "signin_url" field.
func SigninURLHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSigninURL), v))
	})
}

// SigninURLHasSuffix applies the HasSuffix predicate on the "signin_url" field.
func SigninURLHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSigninURL), v))
	})
}

// SigninURLEqualFold applies the EqualFold predicate on the "signin_url" field.
func SigninURLEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSigninURL), v))
	})
}

// SigninURLContainsFold applies the ContainsFold predicate on the "signin_url" field.
func SigninURLContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSigninURL), v))
	})
}

// SigninForceEQ applies the EQ predicate on the "signin_force" field.
func SigninForceEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSigninForce), v))
	})
}

// SigninForceNEQ applies the NEQ predicate on the "signin_force" field.
func SigninForceNEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSigninForce), v))
	})
}

// SigninForceIn applies the In predicate on the "signin_force" field.
func SigninForceIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSigninForce), v...))
	})
}

// SigninForceNotIn applies the NotIn predicate on the "signin_force" field.
func SigninForceNotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSigninForce), v...))
	})
}

// SigninForceGT applies the GT predicate on the "signin_force" field.
func SigninForceGT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSigninForce), v))
	})
}

// SigninForceGTE applies the GTE predicate on the "signin_force" field.
func SigninForceGTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSigninForce), v))
	})
}

// SigninForceLT applies the LT predicate on the "signin_force" field.
func SigninForceLT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSigninForce), v))
	})
}

// SigninForceLTE applies the LTE predicate on the "signin_force" field.
func SigninForceLTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSigninForce), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// String1EQ applies the EQ predicate on the "string_1" field.
func String1EQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String1NEQ applies the NEQ predicate on the "string_1" field.
func String1NEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString1), v))
	})
}

// String1In applies the In predicate on the "string_1" field.
func String1In(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString1), v...))
	})
}

// String1NotIn applies the NotIn predicate on the "string_1" field.
func String1NotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString1), v...))
	})
}

// String1GT applies the GT predicate on the "string_1" field.
func String1GT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString1), v))
	})
}

// String1GTE applies the GTE predicate on the "string_1" field.
func String1GTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString1), v))
	})
}

// String1LT applies the LT predicate on the "string_1" field.
func String1LT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString1), v))
	})
}

// String1LTE applies the LTE predicate on the "string_1" field.
func String1LTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString1), v))
	})
}

// String1Contains applies the Contains predicate on the "string_1" field.
func String1Contains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString1), v))
	})
}

// String1HasPrefix applies the HasPrefix predicate on the "string_1" field.
func String1HasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString1), v))
	})
}

// String1HasSuffix applies the HasSuffix predicate on the "string_1" field.
func String1HasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString1), v))
	})
}

// String1EqualFold applies the EqualFold predicate on the "string_1" field.
func String1EqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString1), v))
	})
}

// String1ContainsFold applies the ContainsFold predicate on the "string_1" field.
func String1ContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString1), v))
	})
}

// String2EQ applies the EQ predicate on the "string_2" field.
func String2EQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String2NEQ applies the NEQ predicate on the "string_2" field.
func String2NEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString2), v))
	})
}

// String2In applies the In predicate on the "string_2" field.
func String2In(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString2), v...))
	})
}

// String2NotIn applies the NotIn predicate on the "string_2" field.
func String2NotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString2), v...))
	})
}

// String2GT applies the GT predicate on the "string_2" field.
func String2GT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString2), v))
	})
}

// String2GTE applies the GTE predicate on the "string_2" field.
func String2GTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString2), v))
	})
}

// String2LT applies the LT predicate on the "string_2" field.
func String2LT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString2), v))
	})
}

// String2LTE applies the LTE predicate on the "string_2" field.
func String2LTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString2), v))
	})
}

// String2Contains applies the Contains predicate on the "string_2" field.
func String2Contains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString2), v))
	})
}

// String2HasPrefix applies the HasPrefix predicate on the "string_2" field.
func String2HasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString2), v))
	})
}

// String2HasSuffix applies the HasSuffix predicate on the "string_2" field.
func String2HasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString2), v))
	})
}

// String2EqualFold applies the EqualFold predicate on the "string_2" field.
func String2EqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString2), v))
	})
}

// String2ContainsFold applies the ContainsFold predicate on the "string_2" field.
func String2ContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString2), v))
	})
}

// String3EQ applies the EQ predicate on the "string_3" field.
func String3EQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString3), v))
	})
}

// String3NEQ applies the NEQ predicate on the "string_3" field.
func String3NEQ(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString3), v))
	})
}

// String3In applies the In predicate on the "string_3" field.
func String3In(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString3), v...))
	})
}

// String3NotIn applies the NotIn predicate on the "string_3" field.
func String3NotIn(vs ...string) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString3), v...))
	})
}

// String3GT applies the GT predicate on the "string_3" field.
func String3GT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString3), v))
	})
}

// String3GTE applies the GTE predicate on the "string_3" field.
func String3GTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString3), v))
	})
}

// String3LT applies the LT predicate on the "string_3" field.
func String3LT(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString3), v))
	})
}

// String3LTE applies the LTE predicate on the "string_3" field.
func String3LTE(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString3), v))
	})
}

// String3Contains applies the Contains predicate on the "string_3" field.
func String3Contains(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString3), v))
	})
}

// String3HasPrefix applies the HasPrefix predicate on the "string_3" field.
func String3HasPrefix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString3), v))
	})
}

// String3HasSuffix applies the HasSuffix predicate on the "string_3" field.
func String3HasSuffix(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString3), v))
	})
}

// String3EqualFold applies the EqualFold predicate on the "string_3" field.
func String3EqualFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString3), v))
	})
}

// String3ContainsFold applies the ContainsFold predicate on the "string_3" field.
func String3ContainsFold(v string) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString3), v))
	})
}

// Number1EQ applies the EQ predicate on the "number_1" field.
func Number1EQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber1), v))
	})
}

// Number1NEQ applies the NEQ predicate on the "number_1" field.
func Number1NEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber1), v))
	})
}

// Number1In applies the In predicate on the "number_1" field.
func Number1In(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber1), v...))
	})
}

// Number1NotIn applies the NotIn predicate on the "number_1" field.
func Number1NotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber1), v...))
	})
}

// Number1GT applies the GT predicate on the "number_1" field.
func Number1GT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber1), v))
	})
}

// Number1GTE applies the GTE predicate on the "number_1" field.
func Number1GTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber1), v))
	})
}

// Number1LT applies the LT predicate on the "number_1" field.
func Number1LT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber1), v))
	})
}

// Number1LTE applies the LTE predicate on the "number_1" field.
func Number1LTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber1), v))
	})
}

// Number2EQ applies the EQ predicate on the "number_2" field.
func Number2EQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber2), v))
	})
}

// Number2NEQ applies the NEQ predicate on the "number_2" field.
func Number2NEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber2), v))
	})
}

// Number2In applies the In predicate on the "number_2" field.
func Number2In(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber2), v...))
	})
}

// Number2NotIn applies the NotIn predicate on the "number_2" field.
func Number2NotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber2), v...))
	})
}

// Number2GT applies the GT predicate on the "number_2" field.
func Number2GT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber2), v))
	})
}

// Number2GTE applies the GTE predicate on the "number_2" field.
func Number2GTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber2), v))
	})
}

// Number2LT applies the LT predicate on the "number_2" field.
func Number2LT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber2), v))
	})
}

// Number2LTE applies the LTE predicate on the "number_2" field.
func Number2LTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber2), v))
	})
}

// Number3EQ applies the EQ predicate on the "number_3" field.
func Number3EQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber3), v))
	})
}

// Number3NEQ applies the NEQ predicate on the "number_3" field.
func Number3NEQ(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber3), v))
	})
}

// Number3In applies the In predicate on the "number_3" field.
func Number3In(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber3), v...))
	})
}

// Number3NotIn applies the NotIn predicate on the "number_3" field.
func Number3NotIn(vs ...int) predicate.Oauth2Client {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Client(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber3), v...))
	})
}

// Number3GT applies the GT predicate on the "number_3" field.
func Number3GT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber3), v))
	})
}

// Number3GTE applies the GTE predicate on the "number_3" field.
func Number3GTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber3), v))
	})
}

// Number3LT applies the LT predicate on the "number_3" field.
func Number3LT(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber3), v))
	})
}

// Number3LTE applies the LTE predicate on the "number_3" field.
func Number3LTE(v int) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber3), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Oauth2Client) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth2Client) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth2Client) predicate.Oauth2Client {
	return predicate.Oauth2Client(func(s *sql.Selector) {
		p(s.Not())
	})
}
