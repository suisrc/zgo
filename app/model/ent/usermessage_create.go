// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/usermessage"
)

// UserMessageCreate is the builder for creating a UserMessage entity.
type UserMessageCreate struct {
	config
	mutation *UserMessageMutation
	hooks    []Hook
}

// SetUID sets the uid field.
func (umc *UserMessageCreate) SetUID(s string) *UserMessageCreate {
	umc.mutation.SetUID(s)
	return umc
}

// SetAvatar sets the avatar field.
func (umc *UserMessageCreate) SetAvatar(s string) *UserMessageCreate {
	umc.mutation.SetAvatar(s)
	return umc
}

// SetTitle sets the title field.
func (umc *UserMessageCreate) SetTitle(s string) *UserMessageCreate {
	umc.mutation.SetTitle(s)
	return umc
}

// SetDatetime sets the datetime field.
func (umc *UserMessageCreate) SetDatetime(s string) *UserMessageCreate {
	umc.mutation.SetDatetime(s)
	return umc
}

// SetType sets the type field.
func (umc *UserMessageCreate) SetType(s string) *UserMessageCreate {
	umc.mutation.SetType(s)
	return umc
}

// SetRead sets the read field.
func (umc *UserMessageCreate) SetRead(i int) *UserMessageCreate {
	umc.mutation.SetRead(i)
	return umc
}

// SetDescription sets the description field.
func (umc *UserMessageCreate) SetDescription(s string) *UserMessageCreate {
	umc.mutation.SetDescription(s)
	return umc
}

// SetClickClose sets the clickClose field.
func (umc *UserMessageCreate) SetClickClose(i int) *UserMessageCreate {
	umc.mutation.SetClickClose(i)
	return umc
}

// SetStatus sets the status field.
func (umc *UserMessageCreate) SetStatus(i int) *UserMessageCreate {
	umc.mutation.SetStatus(i)
	return umc
}

// SetCreator sets the creator field.
func (umc *UserMessageCreate) SetCreator(s string) *UserMessageCreate {
	umc.mutation.SetCreator(s)
	return umc
}

// SetCreatedAt sets the created_at field.
func (umc *UserMessageCreate) SetCreatedAt(t time.Time) *UserMessageCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (umc *UserMessageCreate) SetNillableCreatedAt(t *time.Time) *UserMessageCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetUpdatedAt sets the updated_at field.
func (umc *UserMessageCreate) SetUpdatedAt(t time.Time) *UserMessageCreate {
	umc.mutation.SetUpdatedAt(t)
	return umc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (umc *UserMessageCreate) SetNillableUpdatedAt(t *time.Time) *UserMessageCreate {
	if t != nil {
		umc.SetUpdatedAt(*t)
	}
	return umc
}

// SetVersion sets the version field.
func (umc *UserMessageCreate) SetVersion(i int) *UserMessageCreate {
	umc.mutation.SetVersion(i)
	return umc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (umc *UserMessageCreate) SetNillableVersion(i *int) *UserMessageCreate {
	if i != nil {
		umc.SetVersion(*i)
	}
	return umc
}

// Mutation returns the UserMessageMutation object of the builder.
func (umc *UserMessageCreate) Mutation() *UserMessageMutation {
	return umc.mutation
}

// Save creates the UserMessage in the database.
func (umc *UserMessageCreate) Save(ctx context.Context) (*UserMessage, error) {
	if _, ok := umc.mutation.UID(); !ok {
		return nil, &ValidationError{Name: "uid", err: errors.New("ent: missing required field \"uid\"")}
	}
	if _, ok := umc.mutation.Avatar(); !ok {
		return nil, &ValidationError{Name: "avatar", err: errors.New("ent: missing required field \"avatar\"")}
	}
	if _, ok := umc.mutation.Title(); !ok {
		return nil, &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if _, ok := umc.mutation.Datetime(); !ok {
		return nil, &ValidationError{Name: "datetime", err: errors.New("ent: missing required field \"datetime\"")}
	}
	if _, ok := umc.mutation.GetType(); !ok {
		return nil, &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := umc.mutation.Read(); !ok {
		return nil, &ValidationError{Name: "read", err: errors.New("ent: missing required field \"read\"")}
	}
	if _, ok := umc.mutation.Description(); !ok {
		return nil, &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if _, ok := umc.mutation.ClickClose(); !ok {
		return nil, &ValidationError{Name: "clickClose", err: errors.New("ent: missing required field \"clickClose\"")}
	}
	if _, ok := umc.mutation.Status(); !ok {
		return nil, &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := umc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		v := usermessage.DefaultCreatedAt()
		umc.mutation.SetCreatedAt(v)
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		v := usermessage.DefaultUpdatedAt()
		umc.mutation.SetUpdatedAt(v)
	}
	if _, ok := umc.mutation.Version(); !ok {
		v := usermessage.DefaultVersion
		umc.mutation.SetVersion(v)
	}
	var (
		err  error
		node *UserMessage
	)
	if len(umc.hooks) == 0 {
		node, err = umc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			umc.mutation = mutation
			node, err = umc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(umc.hooks) - 1; i >= 0; i-- {
			mut = umc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserMessageCreate) SaveX(ctx context.Context) *UserMessage {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (umc *UserMessageCreate) sqlSave(ctx context.Context) (*UserMessage, error) {
	um, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	um.ID = int(id)
	return um, nil
}

func (umc *UserMessageCreate) createSpec() (*UserMessage, *sqlgraph.CreateSpec) {
	var (
		um    = &UserMessage{config: umc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usermessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usermessage.FieldID,
			},
		}
	)
	if value, ok := umc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldUID,
		})
		um.UID = value
	}
	if value, ok := umc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldAvatar,
		})
		um.Avatar = value
	}
	if value, ok := umc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldTitle,
		})
		um.Title = value
	}
	if value, ok := umc.mutation.Datetime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldDatetime,
		})
		um.Datetime = value
	}
	if value, ok := umc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldType,
		})
		um.Type = value
	}
	if value, ok := umc.mutation.Read(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usermessage.FieldRead,
		})
		um.Read = value
	}
	if value, ok := umc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldDescription,
		})
		um.Description = value
	}
	if value, ok := umc.mutation.ClickClose(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usermessage.FieldClickClose,
		})
		um.ClickClose = value
	}
	if value, ok := umc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usermessage.FieldStatus,
		})
		um.Status = value
	}
	if value, ok := umc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldCreator,
		})
		um.Creator = value
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermessage.FieldCreatedAt,
		})
		um.CreatedAt = value
	}
	if value, ok := umc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermessage.FieldUpdatedAt,
		})
		um.UpdatedAt = value
	}
	if value, ok := umc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usermessage.FieldVersion,
		})
		um.Version = value
	}
	return um, _spec
}
