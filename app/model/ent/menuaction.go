// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/menuaction"
)

// MenuAction is the model entity for the MenuAction schema.
type MenuAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MenuID holds the value of the "menu_id" field.
	MenuID int `json:"menu_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Disable holds the value of the "disable" field.
	Disable int `json:"disable,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuAction) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // menu_id
		&sql.NullInt64{},  // role_id
		&sql.NullString{}, // code
		&sql.NullString{}, // name
		&sql.NullInt64{},  // disable
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuAction fields.
func (ma *MenuAction) assignValues(values ...interface{}) error {
	if m, n := len(values), len(menuaction.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ma.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field menu_id", values[0])
	} else if value.Valid {
		ma.MenuID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field role_id", values[1])
	} else if value.Valid {
		ma.RoleID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[2])
	} else if value.Valid {
		ma.Code = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		ma.Name = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field disable", values[4])
	} else if value.Valid {
		ma.Disable = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[5])
	} else if value.Valid {
		ma.Creator = value.String
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[6])
	} else if value.Valid {
		ma.CreatedAt = value.Time
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[7])
	} else if value.Valid {
		ma.UpdatedAt = value.Time
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[8])
	} else if value.Valid {
		ma.Version = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this MenuAction.
// Note that, you need to call MenuAction.Unwrap() before calling this method, if this MenuAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MenuAction) Update() *MenuActionUpdateOne {
	return (&MenuActionClient{config: ma.config}).UpdateOne(ma)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ma *MenuAction) Unwrap() *MenuAction {
	tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuAction is not a transactional entity")
	}
	ma.config.driver = tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MenuAction) String() string {
	var builder strings.Builder
	builder.WriteString("MenuAction(")
	builder.WriteString(fmt.Sprintf("id=%v", ma.ID))
	builder.WriteString(", menu_id=")
	builder.WriteString(fmt.Sprintf("%v", ma.MenuID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", ma.RoleID))
	builder.WriteString(", code=")
	builder.WriteString(ma.Code)
	builder.WriteString(", name=")
	builder.WriteString(ma.Name)
	builder.WriteString(", disable=")
	builder.WriteString(fmt.Sprintf("%v", ma.Disable))
	builder.WriteString(", creator=")
	builder.WriteString(ma.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(ma.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ma.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", ma.Version))
	builder.WriteByte(')')
	return builder.String()
}

// MenuActions is a parsable slice of MenuAction.
type MenuActions []*MenuAction

func (ma MenuActions) config(cfg config) {
	for _i := range ma {
		ma[_i].config = cfg
	}
}
