// Code generated by entc, DO NOT EDIT.

package oauth2third

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentID), v))
	})
}

// SuiteID applies equality check predicate on the "suite_id" field. It's identical to SuiteIDEQ.
func SuiteID(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuiteID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppSecret applies equality check predicate on the "app_secret" field. It's identical to AppSecretEQ.
func AppSecret(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppSecret), v))
	})
}

// AuthorizeURL applies equality check predicate on the "authorize_url" field. It's identical to AuthorizeURLEQ.
func AuthorizeURL(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizeURL), v))
	})
}

// TokenURL applies equality check predicate on the "token_url" field. It's identical to TokenURLEQ.
func TokenURL(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenURL), v))
	})
}

// ProfileURL applies equality check predicate on the "profile_url" field. It's identical to ProfileURLEQ.
func ProfileURL(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileURL), v))
	})
}

// DomainDef applies equality check predicate on the "domain_def" field. It's identical to DomainDefEQ.
func DomainDef(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainDef), v))
	})
}

// DomainCheck applies equality check predicate on the "domain_check" field. It's identical to DomainCheckEQ.
func DomainCheck(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainCheck), v))
	})
}

// JsSecret applies equality check predicate on the "js_secret" field. It's identical to JsSecretEQ.
func JsSecret(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJsSecret), v))
	})
}

// StateSecret applies equality check predicate on the "state_secret" field. It's identical to StateSecretEQ.
func StateSecret(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateSecret), v))
	})
}

// Callback applies equality check predicate on the "callback" field. It's identical to CallbackEQ.
func Callback(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallback), v))
	})
}

// CbEncrypt applies equality check predicate on the "cb_encrypt" field. It's identical to CbEncryptEQ.
func CbEncrypt(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCbEncrypt), v))
	})
}

// CbToken applies equality check predicate on the "cb_token" field. It's identical to CbTokenEQ.
func CbToken(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCbToken), v))
	})
}

// CbEncoding applies equality check predicate on the "cb_encoding" field. It's identical to CbEncodingEQ.
func CbEncoding(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCbEncoding), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// String1 applies equality check predicate on the "string_1" field. It's identical to String1EQ.
func String1(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String2 applies equality check predicate on the "string_2" field. It's identical to String2EQ.
func String2(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String3 applies equality check predicate on the "string_3" field. It's identical to String3EQ.
func String3(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString3), v))
	})
}

// Number1 applies equality check predicate on the "number_1" field. It's identical to Number1EQ.
func Number1(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber1), v))
	})
}

// Number2 applies equality check predicate on the "number_2" field. It's identical to Number2EQ.
func Number2(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber2), v))
	})
}

// Number3 applies equality check predicate on the "number_3" field. It's identical to Number3EQ.
func Number3(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber3), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentID), v))
	})
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentID), v))
	})
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentID), v...))
	})
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentID), v...))
	})
}

// AgentIDGT applies the GT predicate on the "agent_id" field.
func AgentIDGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentID), v))
	})
}

// AgentIDGTE applies the GTE predicate on the "agent_id" field.
func AgentIDGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentID), v))
	})
}

// AgentIDLT applies the LT predicate on the "agent_id" field.
func AgentIDLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentID), v))
	})
}

// AgentIDLTE applies the LTE predicate on the "agent_id" field.
func AgentIDLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentID), v))
	})
}

// AgentIDContains applies the Contains predicate on the "agent_id" field.
func AgentIDContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentID), v))
	})
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "agent_id" field.
func AgentIDHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentID), v))
	})
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "agent_id" field.
func AgentIDHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentID), v))
	})
}

// AgentIDEqualFold applies the EqualFold predicate on the "agent_id" field.
func AgentIDEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentID), v))
	})
}

// AgentIDContainsFold applies the ContainsFold predicate on the "agent_id" field.
func AgentIDContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentID), v))
	})
}

// SuiteIDEQ applies the EQ predicate on the "suite_id" field.
func SuiteIDEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuiteID), v))
	})
}

// SuiteIDNEQ applies the NEQ predicate on the "suite_id" field.
func SuiteIDNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuiteID), v))
	})
}

// SuiteIDIn applies the In predicate on the "suite_id" field.
func SuiteIDIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuiteID), v...))
	})
}

// SuiteIDNotIn applies the NotIn predicate on the "suite_id" field.
func SuiteIDNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuiteID), v...))
	})
}

// SuiteIDGT applies the GT predicate on the "suite_id" field.
func SuiteIDGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuiteID), v))
	})
}

// SuiteIDGTE applies the GTE predicate on the "suite_id" field.
func SuiteIDGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuiteID), v))
	})
}

// SuiteIDLT applies the LT predicate on the "suite_id" field.
func SuiteIDLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuiteID), v))
	})
}

// SuiteIDLTE applies the LTE predicate on the "suite_id" field.
func SuiteIDLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuiteID), v))
	})
}

// SuiteIDContains applies the Contains predicate on the "suite_id" field.
func SuiteIDContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuiteID), v))
	})
}

// SuiteIDHasPrefix applies the HasPrefix predicate on the "suite_id" field.
func SuiteIDHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuiteID), v))
	})
}

// SuiteIDHasSuffix applies the HasSuffix predicate on the "suite_id" field.
func SuiteIDHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuiteID), v))
	})
}

// SuiteIDEqualFold applies the EqualFold predicate on the "suite_id" field.
func SuiteIDEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuiteID), v))
	})
}

// SuiteIDContainsFold applies the ContainsFold predicate on the "suite_id" field.
func SuiteIDContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuiteID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppID), v))
	})
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppID), v))
	})
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppID), v))
	})
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppID), v))
	})
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppID), v))
	})
}

// AppSecretEQ applies the EQ predicate on the "app_secret" field.
func AppSecretEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppSecret), v))
	})
}

// AppSecretNEQ applies the NEQ predicate on the "app_secret" field.
func AppSecretNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppSecret), v))
	})
}

// AppSecretIn applies the In predicate on the "app_secret" field.
func AppSecretIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppSecret), v...))
	})
}

// AppSecretNotIn applies the NotIn predicate on the "app_secret" field.
func AppSecretNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppSecret), v...))
	})
}

// AppSecretGT applies the GT predicate on the "app_secret" field.
func AppSecretGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppSecret), v))
	})
}

// AppSecretGTE applies the GTE predicate on the "app_secret" field.
func AppSecretGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppSecret), v))
	})
}

// AppSecretLT applies the LT predicate on the "app_secret" field.
func AppSecretLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppSecret), v))
	})
}

// AppSecretLTE applies the LTE predicate on the "app_secret" field.
func AppSecretLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppSecret), v))
	})
}

// AppSecretContains applies the Contains predicate on the "app_secret" field.
func AppSecretContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppSecret), v))
	})
}

// AppSecretHasPrefix applies the HasPrefix predicate on the "app_secret" field.
func AppSecretHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppSecret), v))
	})
}

// AppSecretHasSuffix applies the HasSuffix predicate on the "app_secret" field.
func AppSecretHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppSecret), v))
	})
}

// AppSecretEqualFold applies the EqualFold predicate on the "app_secret" field.
func AppSecretEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppSecret), v))
	})
}

// AppSecretContainsFold applies the ContainsFold predicate on the "app_secret" field.
func AppSecretContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppSecret), v))
	})
}

// AuthorizeURLEQ applies the EQ predicate on the "authorize_url" field.
func AuthorizeURLEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLNEQ applies the NEQ predicate on the "authorize_url" field.
func AuthorizeURLNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLIn applies the In predicate on the "authorize_url" field.
func AuthorizeURLIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthorizeURL), v...))
	})
}

// AuthorizeURLNotIn applies the NotIn predicate on the "authorize_url" field.
func AuthorizeURLNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthorizeURL), v...))
	})
}

// AuthorizeURLGT applies the GT predicate on the "authorize_url" field.
func AuthorizeURLGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLGTE applies the GTE predicate on the "authorize_url" field.
func AuthorizeURLGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLLT applies the LT predicate on the "authorize_url" field.
func AuthorizeURLLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLLTE applies the LTE predicate on the "authorize_url" field.
func AuthorizeURLLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLContains applies the Contains predicate on the "authorize_url" field.
func AuthorizeURLContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLHasPrefix applies the HasPrefix predicate on the "authorize_url" field.
func AuthorizeURLHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLHasSuffix applies the HasSuffix predicate on the "authorize_url" field.
func AuthorizeURLHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLEqualFold applies the EqualFold predicate on the "authorize_url" field.
func AuthorizeURLEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthorizeURL), v))
	})
}

// AuthorizeURLContainsFold applies the ContainsFold predicate on the "authorize_url" field.
func AuthorizeURLContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthorizeURL), v))
	})
}

// TokenURLEQ applies the EQ predicate on the "token_url" field.
func TokenURLEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenURL), v))
	})
}

// TokenURLNEQ applies the NEQ predicate on the "token_url" field.
func TokenURLNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenURL), v))
	})
}

// TokenURLIn applies the In predicate on the "token_url" field.
func TokenURLIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTokenURL), v...))
	})
}

// TokenURLNotIn applies the NotIn predicate on the "token_url" field.
func TokenURLNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTokenURL), v...))
	})
}

// TokenURLGT applies the GT predicate on the "token_url" field.
func TokenURLGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenURL), v))
	})
}

// TokenURLGTE applies the GTE predicate on the "token_url" field.
func TokenURLGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenURL), v))
	})
}

// TokenURLLT applies the LT predicate on the "token_url" field.
func TokenURLLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenURL), v))
	})
}

// TokenURLLTE applies the LTE predicate on the "token_url" field.
func TokenURLLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenURL), v))
	})
}

// TokenURLContains applies the Contains predicate on the "token_url" field.
func TokenURLContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenURL), v))
	})
}

// TokenURLHasPrefix applies the HasPrefix predicate on the "token_url" field.
func TokenURLHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenURL), v))
	})
}

// TokenURLHasSuffix applies the HasSuffix predicate on the "token_url" field.
func TokenURLHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenURL), v))
	})
}

// TokenURLEqualFold applies the EqualFold predicate on the "token_url" field.
func TokenURLEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenURL), v))
	})
}

// TokenURLContainsFold applies the ContainsFold predicate on the "token_url" field.
func TokenURLContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenURL), v))
	})
}

// ProfileURLEQ applies the EQ predicate on the "profile_url" field.
func ProfileURLEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileURL), v))
	})
}

// ProfileURLNEQ applies the NEQ predicate on the "profile_url" field.
func ProfileURLNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileURL), v))
	})
}

// ProfileURLIn applies the In predicate on the "profile_url" field.
func ProfileURLIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProfileURL), v...))
	})
}

// ProfileURLNotIn applies the NotIn predicate on the "profile_url" field.
func ProfileURLNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProfileURL), v...))
	})
}

// ProfileURLGT applies the GT predicate on the "profile_url" field.
func ProfileURLGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfileURL), v))
	})
}

// ProfileURLGTE applies the GTE predicate on the "profile_url" field.
func ProfileURLGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfileURL), v))
	})
}

// ProfileURLLT applies the LT predicate on the "profile_url" field.
func ProfileURLLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfileURL), v))
	})
}

// ProfileURLLTE applies the LTE predicate on the "profile_url" field.
func ProfileURLLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfileURL), v))
	})
}

// ProfileURLContains applies the Contains predicate on the "profile_url" field.
func ProfileURLContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfileURL), v))
	})
}

// ProfileURLHasPrefix applies the HasPrefix predicate on the "profile_url" field.
func ProfileURLHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfileURL), v))
	})
}

// ProfileURLHasSuffix applies the HasSuffix predicate on the "profile_url" field.
func ProfileURLHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfileURL), v))
	})
}

// ProfileURLEqualFold applies the EqualFold predicate on the "profile_url" field.
func ProfileURLEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfileURL), v))
	})
}

// ProfileURLContainsFold applies the ContainsFold predicate on the "profile_url" field.
func ProfileURLContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfileURL), v))
	})
}

// DomainDefEQ applies the EQ predicate on the "domain_def" field.
func DomainDefEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainDef), v))
	})
}

// DomainDefNEQ applies the NEQ predicate on the "domain_def" field.
func DomainDefNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainDef), v))
	})
}

// DomainDefIn applies the In predicate on the "domain_def" field.
func DomainDefIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDomainDef), v...))
	})
}

// DomainDefNotIn applies the NotIn predicate on the "domain_def" field.
func DomainDefNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDomainDef), v...))
	})
}

// DomainDefGT applies the GT predicate on the "domain_def" field.
func DomainDefGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainDef), v))
	})
}

// DomainDefGTE applies the GTE predicate on the "domain_def" field.
func DomainDefGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainDef), v))
	})
}

// DomainDefLT applies the LT predicate on the "domain_def" field.
func DomainDefLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainDef), v))
	})
}

// DomainDefLTE applies the LTE predicate on the "domain_def" field.
func DomainDefLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainDef), v))
	})
}

// DomainDefContains applies the Contains predicate on the "domain_def" field.
func DomainDefContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomainDef), v))
	})
}

// DomainDefHasPrefix applies the HasPrefix predicate on the "domain_def" field.
func DomainDefHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomainDef), v))
	})
}

// DomainDefHasSuffix applies the HasSuffix predicate on the "domain_def" field.
func DomainDefHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomainDef), v))
	})
}

// DomainDefEqualFold applies the EqualFold predicate on the "domain_def" field.
func DomainDefEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomainDef), v))
	})
}

// DomainDefContainsFold applies the ContainsFold predicate on the "domain_def" field.
func DomainDefContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomainDef), v))
	})
}

// DomainCheckEQ applies the EQ predicate on the "domain_check" field.
func DomainCheckEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckNEQ applies the NEQ predicate on the "domain_check" field.
func DomainCheckNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckIn applies the In predicate on the "domain_check" field.
func DomainCheckIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDomainCheck), v...))
	})
}

// DomainCheckNotIn applies the NotIn predicate on the "domain_check" field.
func DomainCheckNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDomainCheck), v...))
	})
}

// DomainCheckGT applies the GT predicate on the "domain_check" field.
func DomainCheckGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckGTE applies the GTE predicate on the "domain_check" field.
func DomainCheckGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckLT applies the LT predicate on the "domain_check" field.
func DomainCheckLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckLTE applies the LTE predicate on the "domain_check" field.
func DomainCheckLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckContains applies the Contains predicate on the "domain_check" field.
func DomainCheckContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckHasPrefix applies the HasPrefix predicate on the "domain_check" field.
func DomainCheckHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckHasSuffix applies the HasSuffix predicate on the "domain_check" field.
func DomainCheckHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckEqualFold applies the EqualFold predicate on the "domain_check" field.
func DomainCheckEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomainCheck), v))
	})
}

// DomainCheckContainsFold applies the ContainsFold predicate on the "domain_check" field.
func DomainCheckContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomainCheck), v))
	})
}

// JsSecretEQ applies the EQ predicate on the "js_secret" field.
func JsSecretEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJsSecret), v))
	})
}

// JsSecretNEQ applies the NEQ predicate on the "js_secret" field.
func JsSecretNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJsSecret), v))
	})
}

// JsSecretIn applies the In predicate on the "js_secret" field.
func JsSecretIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJsSecret), v...))
	})
}

// JsSecretNotIn applies the NotIn predicate on the "js_secret" field.
func JsSecretNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJsSecret), v...))
	})
}

// JsSecretGT applies the GT predicate on the "js_secret" field.
func JsSecretGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJsSecret), v))
	})
}

// JsSecretGTE applies the GTE predicate on the "js_secret" field.
func JsSecretGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJsSecret), v))
	})
}

// JsSecretLT applies the LT predicate on the "js_secret" field.
func JsSecretLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJsSecret), v))
	})
}

// JsSecretLTE applies the LTE predicate on the "js_secret" field.
func JsSecretLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJsSecret), v))
	})
}

// JsSecretContains applies the Contains predicate on the "js_secret" field.
func JsSecretContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJsSecret), v))
	})
}

// JsSecretHasPrefix applies the HasPrefix predicate on the "js_secret" field.
func JsSecretHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJsSecret), v))
	})
}

// JsSecretHasSuffix applies the HasSuffix predicate on the "js_secret" field.
func JsSecretHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJsSecret), v))
	})
}

// JsSecretEqualFold applies the EqualFold predicate on the "js_secret" field.
func JsSecretEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJsSecret), v))
	})
}

// JsSecretContainsFold applies the ContainsFold predicate on the "js_secret" field.
func JsSecretContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJsSecret), v))
	})
}

// StateSecretEQ applies the EQ predicate on the "state_secret" field.
func StateSecretEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateSecret), v))
	})
}

// StateSecretNEQ applies the NEQ predicate on the "state_secret" field.
func StateSecretNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStateSecret), v))
	})
}

// StateSecretIn applies the In predicate on the "state_secret" field.
func StateSecretIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStateSecret), v...))
	})
}

// StateSecretNotIn applies the NotIn predicate on the "state_secret" field.
func StateSecretNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStateSecret), v...))
	})
}

// StateSecretGT applies the GT predicate on the "state_secret" field.
func StateSecretGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStateSecret), v))
	})
}

// StateSecretGTE applies the GTE predicate on the "state_secret" field.
func StateSecretGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStateSecret), v))
	})
}

// StateSecretLT applies the LT predicate on the "state_secret" field.
func StateSecretLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStateSecret), v))
	})
}

// StateSecretLTE applies the LTE predicate on the "state_secret" field.
func StateSecretLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStateSecret), v))
	})
}

// StateSecretContains applies the Contains predicate on the "state_secret" field.
func StateSecretContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStateSecret), v))
	})
}

// StateSecretHasPrefix applies the HasPrefix predicate on the "state_secret" field.
func StateSecretHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStateSecret), v))
	})
}

// StateSecretHasSuffix applies the HasSuffix predicate on the "state_secret" field.
func StateSecretHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStateSecret), v))
	})
}

// StateSecretEqualFold applies the EqualFold predicate on the "state_secret" field.
func StateSecretEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStateSecret), v))
	})
}

// StateSecretContainsFold applies the ContainsFold predicate on the "state_secret" field.
func StateSecretContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStateSecret), v))
	})
}

// CallbackEQ applies the EQ predicate on the "callback" field.
func CallbackEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallback), v))
	})
}

// CallbackNEQ applies the NEQ predicate on the "callback" field.
func CallbackNEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCallback), v))
	})
}

// CallbackIn applies the In predicate on the "callback" field.
func CallbackIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCallback), v...))
	})
}

// CallbackNotIn applies the NotIn predicate on the "callback" field.
func CallbackNotIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCallback), v...))
	})
}

// CallbackGT applies the GT predicate on the "callback" field.
func CallbackGT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCallback), v))
	})
}

// CallbackGTE applies the GTE predicate on the "callback" field.
func CallbackGTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCallback), v))
	})
}

// CallbackLT applies the LT predicate on the "callback" field.
func CallbackLT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCallback), v))
	})
}

// CallbackLTE applies the LTE predicate on the "callback" field.
func CallbackLTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCallback), v))
	})
}

// CbEncryptEQ applies the EQ predicate on the "cb_encrypt" field.
func CbEncryptEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCbEncrypt), v))
	})
}

// CbEncryptNEQ applies the NEQ predicate on the "cb_encrypt" field.
func CbEncryptNEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCbEncrypt), v))
	})
}

// CbEncryptIn applies the In predicate on the "cb_encrypt" field.
func CbEncryptIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCbEncrypt), v...))
	})
}

// CbEncryptNotIn applies the NotIn predicate on the "cb_encrypt" field.
func CbEncryptNotIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCbEncrypt), v...))
	})
}

// CbEncryptGT applies the GT predicate on the "cb_encrypt" field.
func CbEncryptGT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCbEncrypt), v))
	})
}

// CbEncryptGTE applies the GTE predicate on the "cb_encrypt" field.
func CbEncryptGTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCbEncrypt), v))
	})
}

// CbEncryptLT applies the LT predicate on the "cb_encrypt" field.
func CbEncryptLT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCbEncrypt), v))
	})
}

// CbEncryptLTE applies the LTE predicate on the "cb_encrypt" field.
func CbEncryptLTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCbEncrypt), v))
	})
}

// CbTokenEQ applies the EQ predicate on the "cb_token" field.
func CbTokenEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCbToken), v))
	})
}

// CbTokenNEQ applies the NEQ predicate on the "cb_token" field.
func CbTokenNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCbToken), v))
	})
}

// CbTokenIn applies the In predicate on the "cb_token" field.
func CbTokenIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCbToken), v...))
	})
}

// CbTokenNotIn applies the NotIn predicate on the "cb_token" field.
func CbTokenNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCbToken), v...))
	})
}

// CbTokenGT applies the GT predicate on the "cb_token" field.
func CbTokenGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCbToken), v))
	})
}

// CbTokenGTE applies the GTE predicate on the "cb_token" field.
func CbTokenGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCbToken), v))
	})
}

// CbTokenLT applies the LT predicate on the "cb_token" field.
func CbTokenLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCbToken), v))
	})
}

// CbTokenLTE applies the LTE predicate on the "cb_token" field.
func CbTokenLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCbToken), v))
	})
}

// CbTokenContains applies the Contains predicate on the "cb_token" field.
func CbTokenContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCbToken), v))
	})
}

// CbTokenHasPrefix applies the HasPrefix predicate on the "cb_token" field.
func CbTokenHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCbToken), v))
	})
}

// CbTokenHasSuffix applies the HasSuffix predicate on the "cb_token" field.
func CbTokenHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCbToken), v))
	})
}

// CbTokenEqualFold applies the EqualFold predicate on the "cb_token" field.
func CbTokenEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCbToken), v))
	})
}

// CbTokenContainsFold applies the ContainsFold predicate on the "cb_token" field.
func CbTokenContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCbToken), v))
	})
}

// CbEncodingEQ applies the EQ predicate on the "cb_encoding" field.
func CbEncodingEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingNEQ applies the NEQ predicate on the "cb_encoding" field.
func CbEncodingNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingIn applies the In predicate on the "cb_encoding" field.
func CbEncodingIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCbEncoding), v...))
	})
}

// CbEncodingNotIn applies the NotIn predicate on the "cb_encoding" field.
func CbEncodingNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCbEncoding), v...))
	})
}

// CbEncodingGT applies the GT predicate on the "cb_encoding" field.
func CbEncodingGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingGTE applies the GTE predicate on the "cb_encoding" field.
func CbEncodingGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingLT applies the LT predicate on the "cb_encoding" field.
func CbEncodingLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingLTE applies the LTE predicate on the "cb_encoding" field.
func CbEncodingLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingContains applies the Contains predicate on the "cb_encoding" field.
func CbEncodingContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingHasPrefix applies the HasPrefix predicate on the "cb_encoding" field.
func CbEncodingHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingHasSuffix applies the HasSuffix predicate on the "cb_encoding" field.
func CbEncodingHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingEqualFold applies the EqualFold predicate on the "cb_encoding" field.
func CbEncodingEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCbEncoding), v))
	})
}

// CbEncodingContainsFold applies the ContainsFold predicate on the "cb_encoding" field.
func CbEncodingContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCbEncoding), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// String1EQ applies the EQ predicate on the "string_1" field.
func String1EQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String1NEQ applies the NEQ predicate on the "string_1" field.
func String1NEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString1), v))
	})
}

// String1In applies the In predicate on the "string_1" field.
func String1In(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString1), v...))
	})
}

// String1NotIn applies the NotIn predicate on the "string_1" field.
func String1NotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString1), v...))
	})
}

// String1GT applies the GT predicate on the "string_1" field.
func String1GT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString1), v))
	})
}

// String1GTE applies the GTE predicate on the "string_1" field.
func String1GTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString1), v))
	})
}

// String1LT applies the LT predicate on the "string_1" field.
func String1LT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString1), v))
	})
}

// String1LTE applies the LTE predicate on the "string_1" field.
func String1LTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString1), v))
	})
}

// String1Contains applies the Contains predicate on the "string_1" field.
func String1Contains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString1), v))
	})
}

// String1HasPrefix applies the HasPrefix predicate on the "string_1" field.
func String1HasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString1), v))
	})
}

// String1HasSuffix applies the HasSuffix predicate on the "string_1" field.
func String1HasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString1), v))
	})
}

// String1EqualFold applies the EqualFold predicate on the "string_1" field.
func String1EqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString1), v))
	})
}

// String1ContainsFold applies the ContainsFold predicate on the "string_1" field.
func String1ContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString1), v))
	})
}

// String2EQ applies the EQ predicate on the "string_2" field.
func String2EQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String2NEQ applies the NEQ predicate on the "string_2" field.
func String2NEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString2), v))
	})
}

// String2In applies the In predicate on the "string_2" field.
func String2In(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString2), v...))
	})
}

// String2NotIn applies the NotIn predicate on the "string_2" field.
func String2NotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString2), v...))
	})
}

// String2GT applies the GT predicate on the "string_2" field.
func String2GT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString2), v))
	})
}

// String2GTE applies the GTE predicate on the "string_2" field.
func String2GTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString2), v))
	})
}

// String2LT applies the LT predicate on the "string_2" field.
func String2LT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString2), v))
	})
}

// String2LTE applies the LTE predicate on the "string_2" field.
func String2LTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString2), v))
	})
}

// String2Contains applies the Contains predicate on the "string_2" field.
func String2Contains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString2), v))
	})
}

// String2HasPrefix applies the HasPrefix predicate on the "string_2" field.
func String2HasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString2), v))
	})
}

// String2HasSuffix applies the HasSuffix predicate on the "string_2" field.
func String2HasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString2), v))
	})
}

// String2EqualFold applies the EqualFold predicate on the "string_2" field.
func String2EqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString2), v))
	})
}

// String2ContainsFold applies the ContainsFold predicate on the "string_2" field.
func String2ContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString2), v))
	})
}

// String3EQ applies the EQ predicate on the "string_3" field.
func String3EQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString3), v))
	})
}

// String3NEQ applies the NEQ predicate on the "string_3" field.
func String3NEQ(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString3), v))
	})
}

// String3In applies the In predicate on the "string_3" field.
func String3In(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString3), v...))
	})
}

// String3NotIn applies the NotIn predicate on the "string_3" field.
func String3NotIn(vs ...string) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString3), v...))
	})
}

// String3GT applies the GT predicate on the "string_3" field.
func String3GT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString3), v))
	})
}

// String3GTE applies the GTE predicate on the "string_3" field.
func String3GTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString3), v))
	})
}

// String3LT applies the LT predicate on the "string_3" field.
func String3LT(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString3), v))
	})
}

// String3LTE applies the LTE predicate on the "string_3" field.
func String3LTE(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString3), v))
	})
}

// String3Contains applies the Contains predicate on the "string_3" field.
func String3Contains(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldString3), v))
	})
}

// String3HasPrefix applies the HasPrefix predicate on the "string_3" field.
func String3HasPrefix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldString3), v))
	})
}

// String3HasSuffix applies the HasSuffix predicate on the "string_3" field.
func String3HasSuffix(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldString3), v))
	})
}

// String3EqualFold applies the EqualFold predicate on the "string_3" field.
func String3EqualFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldString3), v))
	})
}

// String3ContainsFold applies the ContainsFold predicate on the "string_3" field.
func String3ContainsFold(v string) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldString3), v))
	})
}

// Number1EQ applies the EQ predicate on the "number_1" field.
func Number1EQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber1), v))
	})
}

// Number1NEQ applies the NEQ predicate on the "number_1" field.
func Number1NEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber1), v))
	})
}

// Number1In applies the In predicate on the "number_1" field.
func Number1In(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber1), v...))
	})
}

// Number1NotIn applies the NotIn predicate on the "number_1" field.
func Number1NotIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber1), v...))
	})
}

// Number1GT applies the GT predicate on the "number_1" field.
func Number1GT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber1), v))
	})
}

// Number1GTE applies the GTE predicate on the "number_1" field.
func Number1GTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber1), v))
	})
}

// Number1LT applies the LT predicate on the "number_1" field.
func Number1LT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber1), v))
	})
}

// Number1LTE applies the LTE predicate on the "number_1" field.
func Number1LTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber1), v))
	})
}

// Number2EQ applies the EQ predicate on the "number_2" field.
func Number2EQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber2), v))
	})
}

// Number2NEQ applies the NEQ predicate on the "number_2" field.
func Number2NEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber2), v))
	})
}

// Number2In applies the In predicate on the "number_2" field.
func Number2In(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber2), v...))
	})
}

// Number2NotIn applies the NotIn predicate on the "number_2" field.
func Number2NotIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber2), v...))
	})
}

// Number2GT applies the GT predicate on the "number_2" field.
func Number2GT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber2), v))
	})
}

// Number2GTE applies the GTE predicate on the "number_2" field.
func Number2GTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber2), v))
	})
}

// Number2LT applies the LT predicate on the "number_2" field.
func Number2LT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber2), v))
	})
}

// Number2LTE applies the LTE predicate on the "number_2" field.
func Number2LTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber2), v))
	})
}

// Number3EQ applies the EQ predicate on the "number_3" field.
func Number3EQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber3), v))
	})
}

// Number3NEQ applies the NEQ predicate on the "number_3" field.
func Number3NEQ(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber3), v))
	})
}

// Number3In applies the In predicate on the "number_3" field.
func Number3In(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber3), v...))
	})
}

// Number3NotIn applies the NotIn predicate on the "number_3" field.
func Number3NotIn(vs ...int) predicate.Oauth2Third {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth2Third(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber3), v...))
	})
}

// Number3GT applies the GT predicate on the "number_3" field.
func Number3GT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber3), v))
	})
}

// Number3GTE applies the GTE predicate on the "number_3" field.
func Number3GTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber3), v))
	})
}

// Number3LT applies the LT predicate on the "number_3" field.
func Number3LT(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber3), v))
	})
}

// Number3LTE applies the LTE predicate on the "number_3" field.
func Number3LTE(v int) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber3), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Oauth2Third) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth2Third) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth2Third) predicate.Oauth2Third {
	return predicate.Oauth2Third(func(s *sql.Selector) {
		p(s.Not())
	})
}
