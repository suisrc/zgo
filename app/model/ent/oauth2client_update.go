// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/oauth2client"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// Oauth2ClientUpdate is the builder for updating Oauth2Client entities.
type Oauth2ClientUpdate struct {
	config
	hooks      []Hook
	mutation   *Oauth2ClientMutation
	predicates []predicate.Oauth2Client
}

// Where adds a new predicate for the builder.
func (ou *Oauth2ClientUpdate) Where(ps ...predicate.Oauth2Client) *Oauth2ClientUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetClientKey sets the client_key field.
func (ou *Oauth2ClientUpdate) SetClientKey(s string) *Oauth2ClientUpdate {
	ou.mutation.SetClientKey(s)
	return ou
}

// SetAudience sets the audience field.
func (ou *Oauth2ClientUpdate) SetAudience(s string) *Oauth2ClientUpdate {
	ou.mutation.SetAudience(s)
	return ou
}

// SetIssuer sets the issuer field.
func (ou *Oauth2ClientUpdate) SetIssuer(s string) *Oauth2ClientUpdate {
	ou.mutation.SetIssuer(s)
	return ou
}

// SetExpired sets the expired field.
func (ou *Oauth2ClientUpdate) SetExpired(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetExpired()
	ou.mutation.SetExpired(i)
	return ou
}

// AddExpired adds i to expired.
func (ou *Oauth2ClientUpdate) AddExpired(i int) *Oauth2ClientUpdate {
	ou.mutation.AddExpired(i)
	return ou
}

// SetTokenType sets the token_type field.
func (ou *Oauth2ClientUpdate) SetTokenType(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetTokenType()
	ou.mutation.SetTokenType(i)
	return ou
}

// AddTokenType adds i to token_type.
func (ou *Oauth2ClientUpdate) AddTokenType(i int) *Oauth2ClientUpdate {
	ou.mutation.AddTokenType(i)
	return ou
}

// SetSMethod sets the s_method field.
func (ou *Oauth2ClientUpdate) SetSMethod(s string) *Oauth2ClientUpdate {
	ou.mutation.SetSMethod(s)
	return ou
}

// SetSSecret sets the s_secret field.
func (ou *Oauth2ClientUpdate) SetSSecret(s string) *Oauth2ClientUpdate {
	ou.mutation.SetSSecret(s)
	return ou
}

// SetTokenGetter sets the token_getter field.
func (ou *Oauth2ClientUpdate) SetTokenGetter(s string) *Oauth2ClientUpdate {
	ou.mutation.SetTokenGetter(s)
	return ou
}

// SetSigninURL sets the signin_url field.
func (ou *Oauth2ClientUpdate) SetSigninURL(s string) *Oauth2ClientUpdate {
	ou.mutation.SetSigninURL(s)
	return ou
}

// SetSigninForce sets the signin_force field.
func (ou *Oauth2ClientUpdate) SetSigninForce(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetSigninForce()
	ou.mutation.SetSigninForce(i)
	return ou
}

// AddSigninForce adds i to signin_force.
func (ou *Oauth2ClientUpdate) AddSigninForce(i int) *Oauth2ClientUpdate {
	ou.mutation.AddSigninForce(i)
	return ou
}

// SetCreator sets the creator field.
func (ou *Oauth2ClientUpdate) SetCreator(s string) *Oauth2ClientUpdate {
	ou.mutation.SetCreator(s)
	return ou
}

// SetCreatedAt sets the created_at field.
func (ou *Oauth2ClientUpdate) SetCreatedAt(t time.Time) *Oauth2ClientUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ou *Oauth2ClientUpdate) SetNillableCreatedAt(t *time.Time) *Oauth2ClientUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the updated_at field.
func (ou *Oauth2ClientUpdate) SetUpdatedAt(t time.Time) *Oauth2ClientUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ou *Oauth2ClientUpdate) SetNillableUpdatedAt(t *time.Time) *Oauth2ClientUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// SetVersion sets the version field.
func (ou *Oauth2ClientUpdate) SetVersion(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetVersion()
	ou.mutation.SetVersion(i)
	return ou
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ou *Oauth2ClientUpdate) SetNillableVersion(i *int) *Oauth2ClientUpdate {
	if i != nil {
		ou.SetVersion(*i)
	}
	return ou
}

// AddVersion adds i to version.
func (ou *Oauth2ClientUpdate) AddVersion(i int) *Oauth2ClientUpdate {
	ou.mutation.AddVersion(i)
	return ou
}

// SetString1 sets the string_1 field.
func (ou *Oauth2ClientUpdate) SetString1(s string) *Oauth2ClientUpdate {
	ou.mutation.SetString1(s)
	return ou
}

// SetString2 sets the string_2 field.
func (ou *Oauth2ClientUpdate) SetString2(s string) *Oauth2ClientUpdate {
	ou.mutation.SetString2(s)
	return ou
}

// SetString3 sets the string_3 field.
func (ou *Oauth2ClientUpdate) SetString3(s string) *Oauth2ClientUpdate {
	ou.mutation.SetString3(s)
	return ou
}

// SetNumber1 sets the number_1 field.
func (ou *Oauth2ClientUpdate) SetNumber1(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetNumber1()
	ou.mutation.SetNumber1(i)
	return ou
}

// AddNumber1 adds i to number_1.
func (ou *Oauth2ClientUpdate) AddNumber1(i int) *Oauth2ClientUpdate {
	ou.mutation.AddNumber1(i)
	return ou
}

// SetNumber2 sets the number_2 field.
func (ou *Oauth2ClientUpdate) SetNumber2(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetNumber2()
	ou.mutation.SetNumber2(i)
	return ou
}

// AddNumber2 adds i to number_2.
func (ou *Oauth2ClientUpdate) AddNumber2(i int) *Oauth2ClientUpdate {
	ou.mutation.AddNumber2(i)
	return ou
}

// SetNumber3 sets the number_3 field.
func (ou *Oauth2ClientUpdate) SetNumber3(i int) *Oauth2ClientUpdate {
	ou.mutation.ResetNumber3()
	ou.mutation.SetNumber3(i)
	return ou
}

// AddNumber3 adds i to number_3.
func (ou *Oauth2ClientUpdate) AddNumber3(i int) *Oauth2ClientUpdate {
	ou.mutation.AddNumber3(i)
	return ou
}

// Mutation returns the Oauth2ClientMutation object of the builder.
func (ou *Oauth2ClientUpdate) Mutation() *Oauth2ClientMutation {
	return ou.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *Oauth2ClientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Oauth2ClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *Oauth2ClientUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *Oauth2ClientUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *Oauth2ClientUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *Oauth2ClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauth2client.Table,
			Columns: oauth2client.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth2client.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.ClientKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldClientKey,
		})
	}
	if value, ok := ou.mutation.Audience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldAudience,
		})
	}
	if value, ok := ou.mutation.Issuer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldIssuer,
		})
	}
	if value, ok := ou.mutation.Expired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldExpired,
		})
	}
	if value, ok := ou.mutation.AddedExpired(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldExpired,
		})
	}
	if value, ok := ou.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldTokenType,
		})
	}
	if value, ok := ou.mutation.AddedTokenType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldTokenType,
		})
	}
	if value, ok := ou.mutation.SMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSMethod,
		})
	}
	if value, ok := ou.mutation.SSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSSecret,
		})
	}
	if value, ok := ou.mutation.TokenGetter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldTokenGetter,
		})
	}
	if value, ok := ou.mutation.SigninURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSigninURL,
		})
	}
	if value, ok := ou.mutation.SigninForce(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldSigninForce,
		})
	}
	if value, ok := ou.mutation.AddedSigninForce(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldSigninForce,
		})
	}
	if value, ok := ou.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldCreator,
		})
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2client.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2client.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldVersion,
		})
	}
	if value, ok := ou.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldVersion,
		})
	}
	if value, ok := ou.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString1,
		})
	}
	if value, ok := ou.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString2,
		})
	}
	if value, ok := ou.mutation.String3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString3,
		})
	}
	if value, ok := ou.mutation.Number1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber1,
		})
	}
	if value, ok := ou.mutation.AddedNumber1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber1,
		})
	}
	if value, ok := ou.mutation.Number2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber2,
		})
	}
	if value, ok := ou.mutation.AddedNumber2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber2,
		})
	}
	if value, ok := ou.mutation.Number3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber3,
		})
	}
	if value, ok := ou.mutation.AddedNumber3(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber3,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2client.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// Oauth2ClientUpdateOne is the builder for updating a single Oauth2Client entity.
type Oauth2ClientUpdateOne struct {
	config
	hooks    []Hook
	mutation *Oauth2ClientMutation
}

// SetClientKey sets the client_key field.
func (ouo *Oauth2ClientUpdateOne) SetClientKey(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetClientKey(s)
	return ouo
}

// SetAudience sets the audience field.
func (ouo *Oauth2ClientUpdateOne) SetAudience(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetAudience(s)
	return ouo
}

// SetIssuer sets the issuer field.
func (ouo *Oauth2ClientUpdateOne) SetIssuer(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetIssuer(s)
	return ouo
}

// SetExpired sets the expired field.
func (ouo *Oauth2ClientUpdateOne) SetExpired(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetExpired()
	ouo.mutation.SetExpired(i)
	return ouo
}

// AddExpired adds i to expired.
func (ouo *Oauth2ClientUpdateOne) AddExpired(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddExpired(i)
	return ouo
}

// SetTokenType sets the token_type field.
func (ouo *Oauth2ClientUpdateOne) SetTokenType(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetTokenType()
	ouo.mutation.SetTokenType(i)
	return ouo
}

// AddTokenType adds i to token_type.
func (ouo *Oauth2ClientUpdateOne) AddTokenType(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddTokenType(i)
	return ouo
}

// SetSMethod sets the s_method field.
func (ouo *Oauth2ClientUpdateOne) SetSMethod(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetSMethod(s)
	return ouo
}

// SetSSecret sets the s_secret field.
func (ouo *Oauth2ClientUpdateOne) SetSSecret(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetSSecret(s)
	return ouo
}

// SetTokenGetter sets the token_getter field.
func (ouo *Oauth2ClientUpdateOne) SetTokenGetter(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetTokenGetter(s)
	return ouo
}

// SetSigninURL sets the signin_url field.
func (ouo *Oauth2ClientUpdateOne) SetSigninURL(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetSigninURL(s)
	return ouo
}

// SetSigninForce sets the signin_force field.
func (ouo *Oauth2ClientUpdateOne) SetSigninForce(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetSigninForce()
	ouo.mutation.SetSigninForce(i)
	return ouo
}

// AddSigninForce adds i to signin_force.
func (ouo *Oauth2ClientUpdateOne) AddSigninForce(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddSigninForce(i)
	return ouo
}

// SetCreator sets the creator field.
func (ouo *Oauth2ClientUpdateOne) SetCreator(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetCreator(s)
	return ouo
}

// SetCreatedAt sets the created_at field.
func (ouo *Oauth2ClientUpdateOne) SetCreatedAt(t time.Time) *Oauth2ClientUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ouo *Oauth2ClientUpdateOne) SetNillableCreatedAt(t *time.Time) *Oauth2ClientUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the updated_at field.
func (ouo *Oauth2ClientUpdateOne) SetUpdatedAt(t time.Time) *Oauth2ClientUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ouo *Oauth2ClientUpdateOne) SetNillableUpdatedAt(t *time.Time) *Oauth2ClientUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// SetVersion sets the version field.
func (ouo *Oauth2ClientUpdateOne) SetVersion(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetVersion()
	ouo.mutation.SetVersion(i)
	return ouo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ouo *Oauth2ClientUpdateOne) SetNillableVersion(i *int) *Oauth2ClientUpdateOne {
	if i != nil {
		ouo.SetVersion(*i)
	}
	return ouo
}

// AddVersion adds i to version.
func (ouo *Oauth2ClientUpdateOne) AddVersion(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddVersion(i)
	return ouo
}

// SetString1 sets the string_1 field.
func (ouo *Oauth2ClientUpdateOne) SetString1(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetString1(s)
	return ouo
}

// SetString2 sets the string_2 field.
func (ouo *Oauth2ClientUpdateOne) SetString2(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetString2(s)
	return ouo
}

// SetString3 sets the string_3 field.
func (ouo *Oauth2ClientUpdateOne) SetString3(s string) *Oauth2ClientUpdateOne {
	ouo.mutation.SetString3(s)
	return ouo
}

// SetNumber1 sets the number_1 field.
func (ouo *Oauth2ClientUpdateOne) SetNumber1(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetNumber1()
	ouo.mutation.SetNumber1(i)
	return ouo
}

// AddNumber1 adds i to number_1.
func (ouo *Oauth2ClientUpdateOne) AddNumber1(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddNumber1(i)
	return ouo
}

// SetNumber2 sets the number_2 field.
func (ouo *Oauth2ClientUpdateOne) SetNumber2(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetNumber2()
	ouo.mutation.SetNumber2(i)
	return ouo
}

// AddNumber2 adds i to number_2.
func (ouo *Oauth2ClientUpdateOne) AddNumber2(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddNumber2(i)
	return ouo
}

// SetNumber3 sets the number_3 field.
func (ouo *Oauth2ClientUpdateOne) SetNumber3(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.ResetNumber3()
	ouo.mutation.SetNumber3(i)
	return ouo
}

// AddNumber3 adds i to number_3.
func (ouo *Oauth2ClientUpdateOne) AddNumber3(i int) *Oauth2ClientUpdateOne {
	ouo.mutation.AddNumber3(i)
	return ouo
}

// Mutation returns the Oauth2ClientMutation object of the builder.
func (ouo *Oauth2ClientUpdateOne) Mutation() *Oauth2ClientMutation {
	return ouo.mutation
}

// Save executes the query and returns the updated entity.
func (ouo *Oauth2ClientUpdateOne) Save(ctx context.Context) (*Oauth2Client, error) {
	var (
		err  error
		node *Oauth2Client
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Oauth2ClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *Oauth2ClientUpdateOne) SaveX(ctx context.Context) *Oauth2Client {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *Oauth2ClientUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *Oauth2ClientUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *Oauth2ClientUpdateOne) sqlSave(ctx context.Context) (o *Oauth2Client, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauth2client.Table,
			Columns: oauth2client.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth2client.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Oauth2Client.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.ClientKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldClientKey,
		})
	}
	if value, ok := ouo.mutation.Audience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldAudience,
		})
	}
	if value, ok := ouo.mutation.Issuer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldIssuer,
		})
	}
	if value, ok := ouo.mutation.Expired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldExpired,
		})
	}
	if value, ok := ouo.mutation.AddedExpired(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldExpired,
		})
	}
	if value, ok := ouo.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldTokenType,
		})
	}
	if value, ok := ouo.mutation.AddedTokenType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldTokenType,
		})
	}
	if value, ok := ouo.mutation.SMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSMethod,
		})
	}
	if value, ok := ouo.mutation.SSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSSecret,
		})
	}
	if value, ok := ouo.mutation.TokenGetter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldTokenGetter,
		})
	}
	if value, ok := ouo.mutation.SigninURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldSigninURL,
		})
	}
	if value, ok := ouo.mutation.SigninForce(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldSigninForce,
		})
	}
	if value, ok := ouo.mutation.AddedSigninForce(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldSigninForce,
		})
	}
	if value, ok := ouo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldCreator,
		})
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2client.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2client.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldVersion,
		})
	}
	if value, ok := ouo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldVersion,
		})
	}
	if value, ok := ouo.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString1,
		})
	}
	if value, ok := ouo.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString2,
		})
	}
	if value, ok := ouo.mutation.String3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2client.FieldString3,
		})
	}
	if value, ok := ouo.mutation.Number1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber1,
		})
	}
	if value, ok := ouo.mutation.AddedNumber1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber1,
		})
	}
	if value, ok := ouo.mutation.Number2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber2,
		})
	}
	if value, ok := ouo.mutation.AddedNumber2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber2,
		})
	}
	if value, ok := ouo.mutation.Number3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber3,
		})
	}
	if value, ok := ouo.mutation.AddedNumber3(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2client.FieldNumber3,
		})
	}
	o = &Oauth2Client{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2client.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
