// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/rolerole"
)

// RoleRole is the model entity for the RoleRole schema.
type RoleRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID int `json:"owner_id,omitempty"`
	// ChildID holds the value of the "child_id" field.
	ChildID int `json:"child_id,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleRole) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // owner_id
		&sql.NullInt64{},  // child_id
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleRole fields.
func (rr *RoleRole) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rolerole.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field owner_id", values[0])
	} else if value.Valid {
		rr.OwnerID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field child_id", values[1])
	} else if value.Valid {
		rr.ChildID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[2])
	} else if value.Valid {
		rr.Creator = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		rr.CreatedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[4])
	} else if value.Valid {
		rr.UpdatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[5])
	} else if value.Valid {
		rr.Version = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this RoleRole.
// Note that, you need to call RoleRole.Unwrap() before calling this method, if this RoleRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *RoleRole) Update() *RoleRoleUpdateOne {
	return (&RoleRoleClient{config: rr.config}).UpdateOne(rr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rr *RoleRole) Unwrap() *RoleRole {
	tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleRole is not a transactional entity")
	}
	rr.config.driver = tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *RoleRole) String() string {
	var builder strings.Builder
	builder.WriteString("RoleRole(")
	builder.WriteString(fmt.Sprintf("id=%v", rr.ID))
	builder.WriteString(", owner_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.OwnerID))
	builder.WriteString(", child_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.ChildID))
	builder.WriteString(", creator=")
	builder.WriteString(rr.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(rr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(rr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", rr.Version))
	builder.WriteByte(')')
	return builder.String()
}

// RoleRoles is a parsable slice of RoleRole.
type RoleRoles []*RoleRole

func (rr RoleRoles) config(cfg config) {
	for _i := range rr {
		rr[_i].config = cfg
	}
}
