// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/suisrc/zgo/app/model/ent"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type decisionCtxKey struct{}

// DecisionContext creates a decision context.
func DecisionContext(parent context.Context, decision error) context.Context {
	if decision == nil || errors.Is(decision, Skip) {
		return parent
	}
	return context.WithValue(parent, decisionCtxKey{}, decision)
}

func decisionFromContext(ctx context.Context) (error, bool) {
	decision, ok := ctx.Value(decisionCtxKey{}).(error)
	if ok && errors.Is(decision, Allow) {
		decision = nil
	}
	return decision, ok
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalQuery(ctx, q); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalMutation(ctx, m); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AccountQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccountQueryRuleFunc func(context.Context, *ent.AccountQuery) error

// EvalQuery return f(ctx, q).
func (f AccountQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccountQuery", q)
}

// The AccountMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccountMutationRuleFunc func(context.Context, *ent.AccountMutation) error

// EvalMutation calls f(ctx, m).
func (f AccountMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccountMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccountMutation", m)
}

// The MenuQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MenuQueryRuleFunc func(context.Context, *ent.MenuQuery) error

// EvalQuery return f(ctx, q).
func (f MenuQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MenuQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MenuQuery", q)
}

// The MenuMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MenuMutationRuleFunc func(context.Context, *ent.MenuMutation) error

// EvalMutation calls f(ctx, m).
func (f MenuMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MenuMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MenuMutation", m)
}

// The MenuActionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MenuActionQueryRuleFunc func(context.Context, *ent.MenuActionQuery) error

// EvalQuery return f(ctx, q).
func (f MenuActionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MenuActionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MenuActionQuery", q)
}

// The MenuActionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MenuActionMutationRuleFunc func(context.Context, *ent.MenuActionMutation) error

// EvalMutation calls f(ctx, m).
func (f MenuActionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MenuActionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MenuActionMutation", m)
}

// The MenuRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MenuRoleQueryRuleFunc func(context.Context, *ent.MenuRoleQuery) error

// EvalQuery return f(ctx, q).
func (f MenuRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MenuRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MenuRoleQuery", q)
}

// The MenuRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MenuRoleMutationRuleFunc func(context.Context, *ent.MenuRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f MenuRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MenuRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MenuRoleMutation", m)
}

// The Oauth2AccountQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type Oauth2AccountQueryRuleFunc func(context.Context, *ent.Oauth2AccountQuery) error

// EvalQuery return f(ctx, q).
func (f Oauth2AccountQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.Oauth2AccountQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.Oauth2AccountQuery", q)
}

// The Oauth2AccountMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type Oauth2AccountMutationRuleFunc func(context.Context, *ent.Oauth2AccountMutation) error

// EvalMutation calls f(ctx, m).
func (f Oauth2AccountMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.Oauth2AccountMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.Oauth2AccountMutation", m)
}

// The Oauth2ClientQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type Oauth2ClientQueryRuleFunc func(context.Context, *ent.Oauth2ClientQuery) error

// EvalQuery return f(ctx, q).
func (f Oauth2ClientQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.Oauth2ClientQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.Oauth2ClientQuery", q)
}

// The Oauth2ClientMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type Oauth2ClientMutationRuleFunc func(context.Context, *ent.Oauth2ClientMutation) error

// EvalMutation calls f(ctx, m).
func (f Oauth2ClientMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.Oauth2ClientMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.Oauth2ClientMutation", m)
}

// The Oauth2ThirdQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type Oauth2ThirdQueryRuleFunc func(context.Context, *ent.Oauth2ThirdQuery) error

// EvalQuery return f(ctx, q).
func (f Oauth2ThirdQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.Oauth2ThirdQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.Oauth2ThirdQuery", q)
}

// The Oauth2ThirdMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type Oauth2ThirdMutationRuleFunc func(context.Context, *ent.Oauth2ThirdMutation) error

// EvalMutation calls f(ctx, m).
func (f Oauth2ThirdMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.Oauth2ThirdMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.Oauth2ThirdMutation", m)
}

// The Oauth2TokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type Oauth2TokenQueryRuleFunc func(context.Context, *ent.Oauth2TokenQuery) error

// EvalQuery return f(ctx, q).
func (f Oauth2TokenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.Oauth2TokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.Oauth2TokenQuery", q)
}

// The Oauth2TokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type Oauth2TokenMutationRuleFunc func(context.Context, *ent.Oauth2TokenMutation) error

// EvalMutation calls f(ctx, m).
func (f Oauth2TokenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.Oauth2TokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.Oauth2TokenMutation", m)
}

// The ResourceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ResourceQueryRuleFunc func(context.Context, *ent.ResourceQuery) error

// EvalQuery return f(ctx, q).
func (f ResourceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ResourceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ResourceQuery", q)
}

// The ResourceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ResourceMutationRuleFunc func(context.Context, *ent.ResourceMutation) error

// EvalMutation calls f(ctx, m).
func (f ResourceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ResourceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ResourceMutation", m)
}

// The ResourceRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ResourceRoleQueryRuleFunc func(context.Context, *ent.ResourceRoleQuery) error

// EvalQuery return f(ctx, q).
func (f ResourceRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ResourceRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ResourceRoleQuery", q)
}

// The ResourceRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ResourceRoleMutationRuleFunc func(context.Context, *ent.ResourceRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f ResourceRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ResourceRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ResourceRoleMutation", m)
}

// The ResourceUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ResourceUserQueryRuleFunc func(context.Context, *ent.ResourceUserQuery) error

// EvalQuery return f(ctx, q).
func (f ResourceUserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ResourceUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ResourceUserQuery", q)
}

// The ResourceUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ResourceUserMutationRuleFunc func(context.Context, *ent.ResourceUserMutation) error

// EvalMutation calls f(ctx, m).
func (f ResourceUserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ResourceUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ResourceUserMutation", m)
}

// The RoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoleQueryRuleFunc func(context.Context, *ent.RoleQuery) error

// EvalQuery return f(ctx, q).
func (f RoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoleQuery", q)
}

// The RoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoleMutationRuleFunc func(context.Context, *ent.RoleMutation) error

// EvalMutation calls f(ctx, m).
func (f RoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoleMutation", m)
}

// The RoleRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoleRoleQueryRuleFunc func(context.Context, *ent.RoleRoleQuery) error

// EvalQuery return f(ctx, q).
func (f RoleRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoleRoleQuery", q)
}

// The RoleRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoleRoleMutationRuleFunc func(context.Context, *ent.RoleRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f RoleRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoleRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoleRoleMutation", m)
}

// The TagCommonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TagCommonQueryRuleFunc func(context.Context, *ent.TagCommonQuery) error

// EvalQuery return f(ctx, q).
func (f TagCommonQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TagCommonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TagCommonQuery", q)
}

// The TagCommonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TagCommonMutationRuleFunc func(context.Context, *ent.TagCommonMutation) error

// EvalMutation calls f(ctx, m).
func (f TagCommonMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TagCommonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TagCommonMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserDetailQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserDetailQueryRuleFunc func(context.Context, *ent.UserDetailQuery) error

// EvalQuery return f(ctx, q).
func (f UserDetailQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserDetailQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserDetailQuery", q)
}

// The UserDetailMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserDetailMutationRuleFunc func(context.Context, *ent.UserDetailMutation) error

// EvalMutation calls f(ctx, m).
func (f UserDetailMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserDetailMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserDetailMutation", m)
}

// The UserMessageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserMessageQueryRuleFunc func(context.Context, *ent.UserMessageQuery) error

// EvalQuery return f(ctx, q).
func (f UserMessageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserMessageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserMessageQuery", q)
}

// The UserMessageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMessageMutationRuleFunc func(context.Context, *ent.UserMessageMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMessageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMessageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMessageMutation", m)
}

// The UserRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserRoleQueryRuleFunc func(context.Context, *ent.UserRoleQuery) error

// EvalQuery return f(ctx, q).
func (f UserRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserRoleQuery", q)
}

// The UserRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserRoleMutationRuleFunc func(context.Context, *ent.UserRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f UserRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserRoleMutation", m)
}
