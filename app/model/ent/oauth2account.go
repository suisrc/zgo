// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/oauth2account"
)

// Oauth2Account is the model entity for the Oauth2Account schema.
type Oauth2Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID int `json:"client_id,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// Expired holds the value of the "expired" field.
	Expired time.Time `json:"expired,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// String1 holds the value of the "string_1" field.
	String1 string `json:"string_1,omitempty"`
	// String2 holds the value of the "string_2" field.
	String2 string `json:"string_2,omitempty"`
	// String3 holds the value of the "string_3" field.
	String3 string `json:"string_3,omitempty"`
	// Number1 holds the value of the "number_1" field.
	Number1 int `json:"number_1,omitempty"`
	// Number2 holds the value of the "number_2" field.
	Number2 int `json:"number_2,omitempty"`
	// Number3 holds the value of the "number_3" field.
	Number3 int `json:"number_3,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oauth2Account) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // client_id
		&sql.NullString{}, // secret
		&sql.NullTime{},   // expired
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
		&sql.NullString{}, // string_1
		&sql.NullString{}, // string_2
		&sql.NullString{}, // string_3
		&sql.NullInt64{},  // number_1
		&sql.NullInt64{},  // number_2
		&sql.NullInt64{},  // number_3
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oauth2Account fields.
func (o *Oauth2Account) assignValues(values ...interface{}) error {
	if m, n := len(values), len(oauth2account.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field client_id", values[0])
	} else if value.Valid {
		o.ClientID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field secret", values[1])
	} else if value.Valid {
		o.Secret = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field expired", values[2])
	} else if value.Valid {
		o.Expired = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[3])
	} else if value.Valid {
		o.Creator = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		o.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[5])
	} else if value.Valid {
		o.UpdatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[6])
	} else if value.Valid {
		o.Version = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_1", values[7])
	} else if value.Valid {
		o.String1 = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_2", values[8])
	} else if value.Valid {
		o.String2 = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_3", values[9])
	} else if value.Valid {
		o.String3 = value.String
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_1", values[10])
	} else if value.Valid {
		o.Number1 = int(value.Int64)
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_2", values[11])
	} else if value.Valid {
		o.Number2 = int(value.Int64)
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_3", values[12])
	} else if value.Valid {
		o.Number3 = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Oauth2Account.
// Note that, you need to call Oauth2Account.Unwrap() before calling this method, if this Oauth2Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oauth2Account) Update() *Oauth2AccountUpdateOne {
	return (&Oauth2AccountClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Oauth2Account) Unwrap() *Oauth2Account {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oauth2Account is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oauth2Account) String() string {
	var builder strings.Builder
	builder.WriteString("Oauth2Account(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", client_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ClientID))
	builder.WriteString(", secret=")
	builder.WriteString(o.Secret)
	builder.WriteString(", expired=")
	builder.WriteString(o.Expired.Format(time.ANSIC))
	builder.WriteString(", creator=")
	builder.WriteString(o.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", o.Version))
	builder.WriteString(", string_1=")
	builder.WriteString(o.String1)
	builder.WriteString(", string_2=")
	builder.WriteString(o.String2)
	builder.WriteString(", string_3=")
	builder.WriteString(o.String3)
	builder.WriteString(", number_1=")
	builder.WriteString(fmt.Sprintf("%v", o.Number1))
	builder.WriteString(", number_2=")
	builder.WriteString(fmt.Sprintf("%v", o.Number2))
	builder.WriteString(", number_3=")
	builder.WriteString(fmt.Sprintf("%v", o.Number3))
	builder.WriteByte(')')
	return builder.String()
}

// Oauth2Accounts is a parsable slice of Oauth2Account.
type Oauth2Accounts []*Oauth2Account

func (o Oauth2Accounts) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
