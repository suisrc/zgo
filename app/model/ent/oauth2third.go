// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/suisrc/zgo/app/model/ent/oauth2third"
)

// Oauth2Third is the model entity for the Oauth2Third schema.
type Oauth2Third struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID string `json:"agent_id,omitempty"`
	// SuiteID holds the value of the "suite_id" field.
	SuiteID string `json:"suite_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// AppSecret holds the value of the "app_secret" field.
	AppSecret string `json:"app_secret,omitempty"`
	// AuthorizeURL holds the value of the "authorize_url" field.
	AuthorizeURL string `json:"authorize_url,omitempty"`
	// TokenURL holds the value of the "token_url" field.
	TokenURL string `json:"token_url,omitempty"`
	// ProfileURL holds the value of the "profile_url" field.
	ProfileURL string `json:"profile_url,omitempty"`
	// DomainDef holds the value of the "domain_def" field.
	DomainDef string `json:"domain_def,omitempty"`
	// DomainCheck holds the value of the "domain_check" field.
	DomainCheck string `json:"domain_check,omitempty"`
	// JsSecret holds the value of the "js_secret" field.
	JsSecret string `json:"js_secret,omitempty"`
	// StateSecret holds the value of the "state_secret" field.
	StateSecret string `json:"state_secret,omitempty"`
	// Callback holds the value of the "callback" field.
	Callback int `json:"callback,omitempty"`
	// CbEncrypt holds the value of the "cb_encrypt" field.
	CbEncrypt int `json:"cb_encrypt,omitempty"`
	// CbToken holds the value of the "cb_token" field.
	CbToken string `json:"cb_token,omitempty"`
	// CbEncoding holds the value of the "cb_encoding" field.
	CbEncoding string `json:"cb_encoding,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// String1 holds the value of the "string_1" field.
	String1 string `json:"string_1,omitempty"`
	// String2 holds the value of the "string_2" field.
	String2 string `json:"string_2,omitempty"`
	// String3 holds the value of the "string_3" field.
	String3 string `json:"string_3,omitempty"`
	// Number1 holds the value of the "number_1" field.
	Number1 int `json:"number_1,omitempty"`
	// Number2 holds the value of the "number_2" field.
	Number2 int `json:"number_2,omitempty"`
	// Number3 holds the value of the "number_3" field.
	Number3 int `json:"number_3,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oauth2Third) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // platform
		&sql.NullString{}, // agent_id
		&sql.NullString{}, // suite_id
		&sql.NullString{}, // app_id
		&sql.NullString{}, // app_secret
		&sql.NullString{}, // authorize_url
		&sql.NullString{}, // token_url
		&sql.NullString{}, // profile_url
		&sql.NullString{}, // domain_def
		&sql.NullString{}, // domain_check
		&sql.NullString{}, // js_secret
		&sql.NullString{}, // state_secret
		&sql.NullInt64{},  // callback
		&sql.NullInt64{},  // cb_encrypt
		&sql.NullString{}, // cb_token
		&sql.NullString{}, // cb_encoding
		&sql.NullString{}, // creator
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // version
		&sql.NullString{}, // string_1
		&sql.NullString{}, // string_2
		&sql.NullString{}, // string_3
		&sql.NullInt64{},  // number_1
		&sql.NullInt64{},  // number_2
		&sql.NullInt64{},  // number_3
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oauth2Third fields.
func (o *Oauth2Third) assignValues(values ...interface{}) error {
	if m, n := len(values), len(oauth2third.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field platform", values[0])
	} else if value.Valid {
		o.Platform = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field agent_id", values[1])
	} else if value.Valid {
		o.AgentID = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field suite_id", values[2])
	} else if value.Valid {
		o.SuiteID = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field app_id", values[3])
	} else if value.Valid {
		o.AppID = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field app_secret", values[4])
	} else if value.Valid {
		o.AppSecret = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field authorize_url", values[5])
	} else if value.Valid {
		o.AuthorizeURL = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field token_url", values[6])
	} else if value.Valid {
		o.TokenURL = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field profile_url", values[7])
	} else if value.Valid {
		o.ProfileURL = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field domain_def", values[8])
	} else if value.Valid {
		o.DomainDef = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field domain_check", values[9])
	} else if value.Valid {
		o.DomainCheck = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field js_secret", values[10])
	} else if value.Valid {
		o.JsSecret = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field state_secret", values[11])
	} else if value.Valid {
		o.StateSecret = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field callback", values[12])
	} else if value.Valid {
		o.Callback = int(value.Int64)
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cb_encrypt", values[13])
	} else if value.Valid {
		o.CbEncrypt = int(value.Int64)
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cb_token", values[14])
	} else if value.Valid {
		o.CbToken = value.String
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cb_encoding", values[15])
	} else if value.Valid {
		o.CbEncoding = value.String
	}
	if value, ok := values[16].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[16])
	} else if value.Valid {
		o.Creator = value.String
	}
	if value, ok := values[17].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[17])
	} else if value.Valid {
		o.CreatedAt = value.Time
	}
	if value, ok := values[18].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[18])
	} else if value.Valid {
		o.UpdatedAt = value.Time
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[19])
	} else if value.Valid {
		o.Version = int(value.Int64)
	}
	if value, ok := values[20].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_1", values[20])
	} else if value.Valid {
		o.String1 = value.String
	}
	if value, ok := values[21].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_2", values[21])
	} else if value.Valid {
		o.String2 = value.String
	}
	if value, ok := values[22].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field string_3", values[22])
	} else if value.Valid {
		o.String3 = value.String
	}
	if value, ok := values[23].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_1", values[23])
	} else if value.Valid {
		o.Number1 = int(value.Int64)
	}
	if value, ok := values[24].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_2", values[24])
	} else if value.Valid {
		o.Number2 = int(value.Int64)
	}
	if value, ok := values[25].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field number_3", values[25])
	} else if value.Valid {
		o.Number3 = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Oauth2Third.
// Note that, you need to call Oauth2Third.Unwrap() before calling this method, if this Oauth2Third
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oauth2Third) Update() *Oauth2ThirdUpdateOne {
	return (&Oauth2ThirdClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Oauth2Third) Unwrap() *Oauth2Third {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oauth2Third is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oauth2Third) String() string {
	var builder strings.Builder
	builder.WriteString("Oauth2Third(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", platform=")
	builder.WriteString(o.Platform)
	builder.WriteString(", agent_id=")
	builder.WriteString(o.AgentID)
	builder.WriteString(", suite_id=")
	builder.WriteString(o.SuiteID)
	builder.WriteString(", app_id=")
	builder.WriteString(o.AppID)
	builder.WriteString(", app_secret=")
	builder.WriteString(o.AppSecret)
	builder.WriteString(", authorize_url=")
	builder.WriteString(o.AuthorizeURL)
	builder.WriteString(", token_url=")
	builder.WriteString(o.TokenURL)
	builder.WriteString(", profile_url=")
	builder.WriteString(o.ProfileURL)
	builder.WriteString(", domain_def=")
	builder.WriteString(o.DomainDef)
	builder.WriteString(", domain_check=")
	builder.WriteString(o.DomainCheck)
	builder.WriteString(", js_secret=")
	builder.WriteString(o.JsSecret)
	builder.WriteString(", state_secret=")
	builder.WriteString(o.StateSecret)
	builder.WriteString(", callback=")
	builder.WriteString(fmt.Sprintf("%v", o.Callback))
	builder.WriteString(", cb_encrypt=")
	builder.WriteString(fmt.Sprintf("%v", o.CbEncrypt))
	builder.WriteString(", cb_token=")
	builder.WriteString(o.CbToken)
	builder.WriteString(", cb_encoding=")
	builder.WriteString(o.CbEncoding)
	builder.WriteString(", creator=")
	builder.WriteString(o.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", o.Version))
	builder.WriteString(", string_1=")
	builder.WriteString(o.String1)
	builder.WriteString(", string_2=")
	builder.WriteString(o.String2)
	builder.WriteString(", string_3=")
	builder.WriteString(o.String3)
	builder.WriteString(", number_1=")
	builder.WriteString(fmt.Sprintf("%v", o.Number1))
	builder.WriteString(", number_2=")
	builder.WriteString(fmt.Sprintf("%v", o.Number2))
	builder.WriteString(", number_3=")
	builder.WriteString(fmt.Sprintf("%v", o.Number3))
	builder.WriteByte(')')
	return builder.String()
}

// Oauth2Thirds is a parsable slice of Oauth2Third.
type Oauth2Thirds []*Oauth2Third

func (o Oauth2Thirds) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
