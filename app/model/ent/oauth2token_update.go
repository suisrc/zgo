// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/oauth2token"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// Oauth2TokenUpdate is the builder for updating Oauth2Token entities.
type Oauth2TokenUpdate struct {
	config
	hooks      []Hook
	mutation   *Oauth2TokenMutation
	predicates []predicate.Oauth2Token
}

// Where adds a new predicate for the builder.
func (ou *Oauth2TokenUpdate) Where(ps ...predicate.Oauth2Token) *Oauth2TokenUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOauth2ID sets the oauth2_id field.
func (ou *Oauth2TokenUpdate) SetOauth2ID(s string) *Oauth2TokenUpdate {
	ou.mutation.SetOauth2ID(s)
	return ou
}

// SetAccessToken sets the access_token field.
func (ou *Oauth2TokenUpdate) SetAccessToken(s string) *Oauth2TokenUpdate {
	ou.mutation.SetAccessToken(s)
	return ou
}

// SetExpiresIn sets the expires_in field.
func (ou *Oauth2TokenUpdate) SetExpiresIn(s string) *Oauth2TokenUpdate {
	ou.mutation.SetExpiresIn(s)
	return ou
}

// SetCreateTime sets the create_time field.
func (ou *Oauth2TokenUpdate) SetCreateTime(s string) *Oauth2TokenUpdate {
	ou.mutation.SetCreateTime(s)
	return ou
}

// SetSyncLock sets the sync_lock field.
func (ou *Oauth2TokenUpdate) SetSyncLock(i int) *Oauth2TokenUpdate {
	ou.mutation.ResetSyncLock()
	ou.mutation.SetSyncLock(i)
	return ou
}

// AddSyncLock adds i to sync_lock.
func (ou *Oauth2TokenUpdate) AddSyncLock(i int) *Oauth2TokenUpdate {
	ou.mutation.AddSyncLock(i)
	return ou
}

// SetCallCount sets the call_count field.
func (ou *Oauth2TokenUpdate) SetCallCount(i int) *Oauth2TokenUpdate {
	ou.mutation.ResetCallCount()
	ou.mutation.SetCallCount(i)
	return ou
}

// AddCallCount adds i to call_count.
func (ou *Oauth2TokenUpdate) AddCallCount(i int) *Oauth2TokenUpdate {
	ou.mutation.AddCallCount(i)
	return ou
}

// SetCreator sets the creator field.
func (ou *Oauth2TokenUpdate) SetCreator(s string) *Oauth2TokenUpdate {
	ou.mutation.SetCreator(s)
	return ou
}

// SetCreatedAt sets the created_at field.
func (ou *Oauth2TokenUpdate) SetCreatedAt(t time.Time) *Oauth2TokenUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ou *Oauth2TokenUpdate) SetNillableCreatedAt(t *time.Time) *Oauth2TokenUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the updated_at field.
func (ou *Oauth2TokenUpdate) SetUpdatedAt(t time.Time) *Oauth2TokenUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ou *Oauth2TokenUpdate) SetNillableUpdatedAt(t *time.Time) *Oauth2TokenUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// SetVersion sets the version field.
func (ou *Oauth2TokenUpdate) SetVersion(i int) *Oauth2TokenUpdate {
	ou.mutation.ResetVersion()
	ou.mutation.SetVersion(i)
	return ou
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ou *Oauth2TokenUpdate) SetNillableVersion(i *int) *Oauth2TokenUpdate {
	if i != nil {
		ou.SetVersion(*i)
	}
	return ou
}

// AddVersion adds i to version.
func (ou *Oauth2TokenUpdate) AddVersion(i int) *Oauth2TokenUpdate {
	ou.mutation.AddVersion(i)
	return ou
}

// SetString1 sets the string_1 field.
func (ou *Oauth2TokenUpdate) SetString1(s string) *Oauth2TokenUpdate {
	ou.mutation.SetString1(s)
	return ou
}

// SetString2 sets the string_2 field.
func (ou *Oauth2TokenUpdate) SetString2(s string) *Oauth2TokenUpdate {
	ou.mutation.SetString2(s)
	return ou
}

// SetString3 sets the string_3 field.
func (ou *Oauth2TokenUpdate) SetString3(s string) *Oauth2TokenUpdate {
	ou.mutation.SetString3(s)
	return ou
}

// SetNumber1 sets the number_1 field.
func (ou *Oauth2TokenUpdate) SetNumber1(i int) *Oauth2TokenUpdate {
	ou.mutation.ResetNumber1()
	ou.mutation.SetNumber1(i)
	return ou
}

// AddNumber1 adds i to number_1.
func (ou *Oauth2TokenUpdate) AddNumber1(i int) *Oauth2TokenUpdate {
	ou.mutation.AddNumber1(i)
	return ou
}

// SetNumber2 sets the number_2 field.
func (ou *Oauth2TokenUpdate) SetNumber2(i int) *Oauth2TokenUpdate {
	ou.mutation.ResetNumber2()
	ou.mutation.SetNumber2(i)
	return ou
}

// AddNumber2 adds i to number_2.
func (ou *Oauth2TokenUpdate) AddNumber2(i int) *Oauth2TokenUpdate {
	ou.mutation.AddNumber2(i)
	return ou
}

// SetNumber3 sets the number_3 field.
func (ou *Oauth2TokenUpdate) SetNumber3(i int) *Oauth2TokenUpdate {
	ou.mutation.ResetNumber3()
	ou.mutation.SetNumber3(i)
	return ou
}

// AddNumber3 adds i to number_3.
func (ou *Oauth2TokenUpdate) AddNumber3(i int) *Oauth2TokenUpdate {
	ou.mutation.AddNumber3(i)
	return ou
}

// Mutation returns the Oauth2TokenMutation object of the builder.
func (ou *Oauth2TokenUpdate) Mutation() *Oauth2TokenMutation {
	return ou.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *Oauth2TokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Oauth2TokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *Oauth2TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *Oauth2TokenUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *Oauth2TokenUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *Oauth2TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauth2token.Table,
			Columns: oauth2token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth2token.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Oauth2ID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldOauth2ID,
		})
	}
	if value, ok := ou.mutation.AccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldAccessToken,
		})
	}
	if value, ok := ou.mutation.ExpiresIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldExpiresIn,
		})
	}
	if value, ok := ou.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldCreateTime,
		})
	}
	if value, ok := ou.mutation.SyncLock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldSyncLock,
		})
	}
	if value, ok := ou.mutation.AddedSyncLock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldSyncLock,
		})
	}
	if value, ok := ou.mutation.CallCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldCallCount,
		})
	}
	if value, ok := ou.mutation.AddedCallCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldCallCount,
		})
	}
	if value, ok := ou.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldCreator,
		})
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2token.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2token.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldVersion,
		})
	}
	if value, ok := ou.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldVersion,
		})
	}
	if value, ok := ou.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString1,
		})
	}
	if value, ok := ou.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString2,
		})
	}
	if value, ok := ou.mutation.String3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString3,
		})
	}
	if value, ok := ou.mutation.Number1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber1,
		})
	}
	if value, ok := ou.mutation.AddedNumber1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber1,
		})
	}
	if value, ok := ou.mutation.Number2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber2,
		})
	}
	if value, ok := ou.mutation.AddedNumber2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber2,
		})
	}
	if value, ok := ou.mutation.Number3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber3,
		})
	}
	if value, ok := ou.mutation.AddedNumber3(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber3,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2token.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// Oauth2TokenUpdateOne is the builder for updating a single Oauth2Token entity.
type Oauth2TokenUpdateOne struct {
	config
	hooks    []Hook
	mutation *Oauth2TokenMutation
}

// SetOauth2ID sets the oauth2_id field.
func (ouo *Oauth2TokenUpdateOne) SetOauth2ID(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetOauth2ID(s)
	return ouo
}

// SetAccessToken sets the access_token field.
func (ouo *Oauth2TokenUpdateOne) SetAccessToken(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetAccessToken(s)
	return ouo
}

// SetExpiresIn sets the expires_in field.
func (ouo *Oauth2TokenUpdateOne) SetExpiresIn(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetExpiresIn(s)
	return ouo
}

// SetCreateTime sets the create_time field.
func (ouo *Oauth2TokenUpdateOne) SetCreateTime(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetCreateTime(s)
	return ouo
}

// SetSyncLock sets the sync_lock field.
func (ouo *Oauth2TokenUpdateOne) SetSyncLock(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.ResetSyncLock()
	ouo.mutation.SetSyncLock(i)
	return ouo
}

// AddSyncLock adds i to sync_lock.
func (ouo *Oauth2TokenUpdateOne) AddSyncLock(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.AddSyncLock(i)
	return ouo
}

// SetCallCount sets the call_count field.
func (ouo *Oauth2TokenUpdateOne) SetCallCount(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.ResetCallCount()
	ouo.mutation.SetCallCount(i)
	return ouo
}

// AddCallCount adds i to call_count.
func (ouo *Oauth2TokenUpdateOne) AddCallCount(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.AddCallCount(i)
	return ouo
}

// SetCreator sets the creator field.
func (ouo *Oauth2TokenUpdateOne) SetCreator(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetCreator(s)
	return ouo
}

// SetCreatedAt sets the created_at field.
func (ouo *Oauth2TokenUpdateOne) SetCreatedAt(t time.Time) *Oauth2TokenUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ouo *Oauth2TokenUpdateOne) SetNillableCreatedAt(t *time.Time) *Oauth2TokenUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the updated_at field.
func (ouo *Oauth2TokenUpdateOne) SetUpdatedAt(t time.Time) *Oauth2TokenUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ouo *Oauth2TokenUpdateOne) SetNillableUpdatedAt(t *time.Time) *Oauth2TokenUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// SetVersion sets the version field.
func (ouo *Oauth2TokenUpdateOne) SetVersion(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.ResetVersion()
	ouo.mutation.SetVersion(i)
	return ouo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (ouo *Oauth2TokenUpdateOne) SetNillableVersion(i *int) *Oauth2TokenUpdateOne {
	if i != nil {
		ouo.SetVersion(*i)
	}
	return ouo
}

// AddVersion adds i to version.
func (ouo *Oauth2TokenUpdateOne) AddVersion(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.AddVersion(i)
	return ouo
}

// SetString1 sets the string_1 field.
func (ouo *Oauth2TokenUpdateOne) SetString1(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetString1(s)
	return ouo
}

// SetString2 sets the string_2 field.
func (ouo *Oauth2TokenUpdateOne) SetString2(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetString2(s)
	return ouo
}

// SetString3 sets the string_3 field.
func (ouo *Oauth2TokenUpdateOne) SetString3(s string) *Oauth2TokenUpdateOne {
	ouo.mutation.SetString3(s)
	return ouo
}

// SetNumber1 sets the number_1 field.
func (ouo *Oauth2TokenUpdateOne) SetNumber1(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.ResetNumber1()
	ouo.mutation.SetNumber1(i)
	return ouo
}

// AddNumber1 adds i to number_1.
func (ouo *Oauth2TokenUpdateOne) AddNumber1(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.AddNumber1(i)
	return ouo
}

// SetNumber2 sets the number_2 field.
func (ouo *Oauth2TokenUpdateOne) SetNumber2(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.ResetNumber2()
	ouo.mutation.SetNumber2(i)
	return ouo
}

// AddNumber2 adds i to number_2.
func (ouo *Oauth2TokenUpdateOne) AddNumber2(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.AddNumber2(i)
	return ouo
}

// SetNumber3 sets the number_3 field.
func (ouo *Oauth2TokenUpdateOne) SetNumber3(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.ResetNumber3()
	ouo.mutation.SetNumber3(i)
	return ouo
}

// AddNumber3 adds i to number_3.
func (ouo *Oauth2TokenUpdateOne) AddNumber3(i int) *Oauth2TokenUpdateOne {
	ouo.mutation.AddNumber3(i)
	return ouo
}

// Mutation returns the Oauth2TokenMutation object of the builder.
func (ouo *Oauth2TokenUpdateOne) Mutation() *Oauth2TokenMutation {
	return ouo.mutation
}

// Save executes the query and returns the updated entity.
func (ouo *Oauth2TokenUpdateOne) Save(ctx context.Context) (*Oauth2Token, error) {
	var (
		err  error
		node *Oauth2Token
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*Oauth2TokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *Oauth2TokenUpdateOne) SaveX(ctx context.Context) *Oauth2Token {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *Oauth2TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *Oauth2TokenUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *Oauth2TokenUpdateOne) sqlSave(ctx context.Context) (o *Oauth2Token, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauth2token.Table,
			Columns: oauth2token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth2token.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Oauth2Token.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.Oauth2ID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldOauth2ID,
		})
	}
	if value, ok := ouo.mutation.AccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldAccessToken,
		})
	}
	if value, ok := ouo.mutation.ExpiresIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldExpiresIn,
		})
	}
	if value, ok := ouo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldCreateTime,
		})
	}
	if value, ok := ouo.mutation.SyncLock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldSyncLock,
		})
	}
	if value, ok := ouo.mutation.AddedSyncLock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldSyncLock,
		})
	}
	if value, ok := ouo.mutation.CallCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldCallCount,
		})
	}
	if value, ok := ouo.mutation.AddedCallCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldCallCount,
		})
	}
	if value, ok := ouo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldCreator,
		})
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2token.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth2token.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldVersion,
		})
	}
	if value, ok := ouo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldVersion,
		})
	}
	if value, ok := ouo.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString1,
		})
	}
	if value, ok := ouo.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString2,
		})
	}
	if value, ok := ouo.mutation.String3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth2token.FieldString3,
		})
	}
	if value, ok := ouo.mutation.Number1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber1,
		})
	}
	if value, ok := ouo.mutation.AddedNumber1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber1,
		})
	}
	if value, ok := ouo.mutation.Number2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber2,
		})
	}
	if value, ok := ouo.mutation.AddedNumber2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber2,
		})
	}
	if value, ok := ouo.mutation.Number3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber3,
		})
	}
	if value, ok := ouo.mutation.AddedNumber3(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauth2token.FieldNumber3,
		})
	}
	o = &Oauth2Token{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauth2token.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
