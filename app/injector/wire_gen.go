// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/suisrc/zgo/app/api"
	"github.com/suisrc/zgo/app/model/entc"
	"github.com/suisrc/zgo/app/model/sqlxc"
	"github.com/suisrc/zgo/app/service"
	"github.com/suisrc/zgo/middlewire"
	"github.com/suisrc/zgo/modules/casbin"
	"github.com/suisrc/zgo/modules/casbin/watcher/mem"
	"github.com/suisrc/zgo/modules/passwd"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	bundle := api.NewBundle()
	useEngine := api.NewUseEngine(bundle)
	engine := middlewire.InitGinEngine(useEngine)
	router := middlewire.NewRouter(engine)
	client, cleanup, err := entc.NewClient()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := sqlxc.NewClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	gpa := service.GPA{
		Entc: client,
		Sqlx: db,
	}
	casbinAdapter := service.CasbinAdapter{
		GPA: gpa,
	}
	syncedEnforcer, cleanup3, err := casbin.NewCasbinEnforcer(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	auther := api.NewAuther()
	watcher, cleanup4, err := casbinmem.NewCasbinWatcher(casbinAdapter, syncedEnforcer)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	auth := &api.Auth{
		Enforcer: syncedEnforcer,
		Auther:   auther,
	}
	validator := passwd.Validator{}
	signin := service.Signin{
		GPA:    gpa,
		Passwd: validator,
	}
	apiSignin := &api.Signin{
		Auther:        auther,
		SigninService: signin,
	}
	user := &api.User{}
	options := &api.Options{
		Bundle:   bundle,
		Engine:   engine,
		Router:   router,
		Enforcer: syncedEnforcer,
		Auther:   auther,
		Watcher:  watcher,
		Auth:     auth,
		Signin:   apiSignin,
		User:     user,
	}
	endpoints := api.InitEndpoints(options)
	swagger := middlewire.NewSwagger(engine)
	healthz := middlewire.NewHealthz(engine)
	injector := &Injector{
		Engine:    engine,
		Endpoints: endpoints,
		Swagger:   swagger,
		Healthz:   healthz,
	}
	return injector, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// InjectorSet 注入Injector
var InjectorSet = wire.NewSet(wire.Struct(new(Injector), "*"), middlewire.NewSwagger, middlewire.NewHealthz)

// Injector 注入器(用于初始化完成之后的引用)
type Injector struct {
	Engine    *gin.Engine
	Endpoints *api.Endpoints
	Swagger   middlewire.Swagger
	Healthz   middlewire.Healthz
}
